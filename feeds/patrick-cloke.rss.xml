<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Like bricks in the sky</title><link>http://patrick.cloke.us/</link><description></description><atom:link href="http://patrick.cloke.us/feeds/patrick-cloke.rss.xml" rel="self"></atom:link><lastBuildDate>Sun, 24 Jul 2016 13:19:00 -0400</lastBuildDate><item><title>Windows Mobile (or Windows Phone) and FastMail</title><link>http://patrick.cloke.us/posts/2016/07/24/windows-mobile-or-windows-phone-and-fastmail/</link><description>
&lt;p&gt;I’ve been a big fan of Windows Phone (now Windows Mobile) for a while and have
had a few phones across versions 7, 8, and now 10. A while ago I switched to
&lt;a class="reference external" href="https://www.fastmail.com/"&gt;FastMail&lt;/a&gt; as my e-mail provider &lt;a class="footnote-reference" href="#id5" id="id1"&gt;[1]&lt;/a&gt;, but had been stuck using Google as my
calendar provider still (and my contacts were on my Windows Live account). I had
a desire to move all these onto a single account, but Windows 10 Mobile only
officially supports e-mail from arbitrary providers. Calendar and contacts are
limited to a few special providers.&lt;/p&gt;
&lt;p&gt;Below I’ve outlined how I’ve gotten all three services (email, contacts, and
calendar) from my FastMail account onto my Windows Mobile device.&lt;/p&gt;
&lt;div class="section" id="email"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id9"&gt;Email&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Email is the easy one, FastMail even has a
&lt;a class="reference external" href="https://www.fastmail.com/help/clients/winphone.html"&gt;guide to setting up email on Windows Phone&lt;/a&gt;. This guide did not handle sending
emails with a custom domain name, if you don’t have that situation, probably
just use the FastMail guide.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Add a new account, choose “other account”.&lt;/li&gt;
&lt;li&gt;Type in your email address (e.g. &lt;tt class="docutils literal"&gt;you@yourcustomdomain.com&lt;/tt&gt;) and password.&lt;/li&gt;
&lt;li&gt;It will complain about being unable to find proper account settings. Click
“try again”.&lt;/li&gt;
&lt;li&gt;It will complain again, but not give you an option for “advanced”, click it.&lt;/li&gt;
&lt;li&gt;Choose “Internel email account”.&lt;/li&gt;
&lt;li&gt;Enter any “Account name” and “Your name” that you want.&lt;/li&gt;
&lt;li&gt;Choose “&lt;span class="caps"&gt;IMAP4&lt;/span&gt;” as the “Account type”.&lt;/li&gt;
&lt;li&gt;Change the incoming mail server to &lt;tt class="docutils literal"&gt;mail.messagingengine.com&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;Change the username to your FastMail username (e.g. &lt;tt class="docutils literal"&gt;you@fastmail.com&lt;/tt&gt;).&lt;/li&gt;
&lt;li&gt;Change the outgoing mailserver to &lt;tt class="docutils literal"&gt;mail.messagingengine.com&lt;/tt&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now when you send email it should show up properly as
&lt;tt class="docutils literal"&gt;you@yourcustomdomain.com&lt;/tt&gt;, but be sent via FastMail’s servers!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="contacts"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id10"&gt;Contacts&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;FastMail &lt;a class="reference external" href="https://blog.fastmail.com/2015/08/21/carddav-your-contacts-everywhere-you-need-them/"&gt;added support for CardDAV last year&lt;/a&gt; and Windows Phone
&lt;a class="reference external" href="https://blogs.windows.com/windowsexperience/2013/01/30/syncing-google-services-with-windows-phone/"&gt;added support back in 2013&lt;/a&gt;, so why is this hard? Well…turns out that there
isn’t a way to make a CardDAV account on Windows Mobile, it’s just used for
certain account types. Luckily, there is a &lt;a class="reference external" href="http://www.emaildiscussions.com/showthread.php?t=70967"&gt;forum post&lt;/a&gt; about hooking up
CardDAV via a hack. Steps are reproduced below:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Add a new account, choose “iCloud”.&lt;/li&gt;
&lt;li&gt;Type in your FastMail username, but add &lt;tt class="docutils literal"&gt;+Default&lt;/tt&gt; before the &lt;tt class="docutils literal"&gt;@&lt;/tt&gt; (e.g.
&lt;tt class="docutils literal"&gt;you+Default@fastmail.com&lt;/tt&gt;), note that this isn’t anything special, just
the &lt;a class="reference external" href="https://www.fastmail.com/help/clients/iphone.html#contacts"&gt;scheme FastMail uses for CardDAV usernames&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Put in your password. &lt;a class="footnote-reference" href="#id6" id="id2"&gt;[2]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Click “sign in”, it will fail.&lt;/li&gt;
&lt;li&gt;Go back into the account settings (click “Manage”) and modify the advanced
settings (“Change mailbox sync settings”). Choose manually for when to
download new email. Disable syncing of email and calendar.&lt;/li&gt;
&lt;li&gt;Go to “Advanced account settings”. Change the “Incoming email server”,
“Outgoing (&lt;span class="caps"&gt;SMTP&lt;/span&gt;) email server” and “Calendar server (CalDAV)” to
&lt;tt class="docutils literal"&gt;localhost&lt;/tt&gt;. &lt;a class="footnote-reference" href="#id7" id="id3"&gt;[3]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Change “Contacts server (CardDAV)” to
&lt;tt class="docutils literal"&gt;carddav.messagingengine.com:443/dav/addressbooks/user/you@fastmail.com/Default&lt;/tt&gt;,
changing &lt;tt class="docutils literal"&gt;you@fastmail.com&lt;/tt&gt; to your FastMail username.&lt;/li&gt;
&lt;li&gt;Click “Done”!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Your contacts should eventually appear in your address book! I couldn’t figure
out a way to force my phone to sync contacts, but they appeared fairly quickly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="calendar"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id11"&gt;Calendar&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;FastMail &lt;a class="reference external" href="https://blog.fastmail.com/2014/01/23/calendar-now-available-on-beta-fastmail-fm-for-testing/"&gt;added support for CalDAV&lt;/a&gt; back in the beginning of 2014 &lt;a class="footnote-reference" href="#id8" id="id4"&gt;[4]&lt;/a&gt;. These
steps are almost identical to the &lt;a class="reference internal" href="#contacts"&gt;Contacts&lt;/a&gt; section above, but using
information from the &lt;a class="reference external" href="https://www.fastmail.com/help/clients/maccalendar.html"&gt;guide for setting up Calendar.app&lt;/a&gt;.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Add a new account, choose “iCloud”.&lt;/li&gt;
&lt;li&gt;Type in your FastMail username (e.g. &lt;tt class="docutils literal"&gt;you@fastmail.com&lt;/tt&gt;).&lt;/li&gt;
&lt;li&gt;Put in your password.&lt;/li&gt;
&lt;li&gt;Click “sign in”, it will fail.&lt;/li&gt;
&lt;li&gt;Go back into the account settings (click “Manage”) and modify the advanced
settings (“Change mailbox sync settings”). Choose manually for when to
download new email. Disable syncing of email and contacts.&lt;/li&gt;
&lt;li&gt;Go to “Advanced account settings”. Change the “Incoming email server”,
“Outgoing (&lt;span class="caps"&gt;SMTP&lt;/span&gt;) email server” and “Contacts server (CardDAV)” to
&lt;tt class="docutils literal"&gt;localhost&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;Change “Calendar server (CalDAV)” to
&lt;tt class="docutils literal"&gt;caldav.messagingengine.com/dav/principals/user/you@fastmail.com/&lt;/tt&gt;,
changing &lt;tt class="docutils literal"&gt;you@fastmail.com&lt;/tt&gt; to your FastMail username.&lt;/li&gt;
&lt;li&gt;Click “Done”!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;My default calendar appeared very quickly, but additional calendars took a bit
to sync onto my phone.&lt;/p&gt;
&lt;p&gt;Good luck and let me know if there are any errors, easier ways, or other tricks
to getting the most of FastMail on a Windows Mobile device!&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id5" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"&gt;&lt;/col&gt;&lt;col&gt;&lt;/col&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;There are a variety of reasons why I switched, I had
&lt;a class="reference external" href="http://patrick.cloke.us/posts/2014/07/03/new-blog/"&gt;recently bought a domain name&lt;/a&gt; to get better control over my online
presence (email, website, etc.). I was also tired of my email being used
to server me advertisements and various other issues with free webmail.
I highly recommend FastMail, they have awesome &lt;a class="reference external" href="https://www.fastmail.com/help/ourservice/security.html"&gt;security&lt;/a&gt; and &lt;a class="reference external" href="https://www.fastmail.com/about/privacy.html"&gt;privacy&lt;/a&gt;
policies. They also have &lt;em&gt;amazing&lt;/em&gt; support, give back to (a lot) to open
source and a whole slew of other things.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id6" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"&gt;&lt;/col&gt;&lt;col&gt;&lt;/col&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;I put a dummy one in and then changed it after I updated the servers in
step 6. This was to not send my password to iCloud servers. The password
is hopefully encrypted and hashed, but I don’t know for sure.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id7" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"&gt;&lt;/col&gt;&lt;col&gt;&lt;/col&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id3"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;We’re just ensuring that our credentials for these other services will
not hit Apple servers for any reason.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id8" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"&gt;&lt;/col&gt;&lt;col&gt;&lt;/col&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id4"&gt;[4]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;That article talks about beta.fastmail.fm, but this is now available on
the production FastMail servers too!&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Patrick Cloke</dc:creator><pubDate>Sun, 24 Jul 2016 13:19:00 -0400</pubDate><guid>tag:patrick.cloke.us,2016-07-24:posts/2016/07/24/windows-mobile-or-windows-phone-and-fastmail/</guid><category>email</category><category>IMAP</category><category>SMTP</category><category>CalDAV</category><category>CardDAV</category><category>contacts</category><category>calendar</category><category>FastMail</category><category>Windows Phone</category></item><item><title>Google Summer of Code 2016 projects</title><link>http://patrick.cloke.us/posts/2016/05/20/google-summer-of-code-2016-projects/</link><description>&lt;p&gt;I&amp;#8217;d like to introduce the 13 students that are being mentored by Mozilla this
year as part of &lt;a class="reference external" href="https://summerofcode.withgoogle.com/"&gt;Google Summer of Code 2016&lt;/a&gt;! Currently the &amp;#8220;community bonding&amp;#8221;
period is ongoing, but we are on the cusp of the &amp;#8220;coding period&amp;#8221;&amp;nbsp;starting.&lt;/p&gt;
&lt;p&gt;As part of Google Summer of Code (GSoC), we ask students to provide weekly
updates of their progress in a public area (usually a blog). If you&amp;#8217;re
interested in a particular project, please follow along! Lastly, remember that
GSoC is a community effort: if a student is working in an area where you
consider yourself knowledgable, please introduce yourself and offer to provide
help and/or&amp;nbsp;advice!&lt;/p&gt;
&lt;p&gt;Below is a listing of each student&amp;#8217;s project (linked to their weekly updates),
the name of each student and the name of their&amp;nbsp;mentor(s).&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="61%" /&gt;
&lt;col width="15%" /&gt;
&lt;col width="24%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Project&lt;/th&gt;
&lt;th class="head"&gt;Student&lt;/th&gt;
&lt;th class="head"&gt;Mentor(s)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="http://krishnakannan.github.io/"&gt;Download app assets at runtime&lt;/a&gt; (Firefox for Android)&lt;/td&gt;
&lt;td&gt;Krish&lt;/td&gt;
&lt;td&gt;skaspari&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://github.com/izgzhen/gsoc-file-support"&gt;File &lt;span class="caps"&gt;API&lt;/span&gt; Support&lt;/a&gt; (Servo)&lt;/td&gt;
&lt;td&gt;izgzhen&lt;/td&gt;
&lt;td&gt;Manishearth&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="http://myveryownsummerofcode.blogspot.fr/"&gt;Implement &lt;span class="caps"&gt;RFC7512&lt;/span&gt; &lt;span class="caps"&gt;PKCS&lt;/span&gt;#11 &lt;span class="caps"&gt;URI&lt;/span&gt; support and system integration&lt;/a&gt; (&lt;span class="caps"&gt;NSS&lt;/span&gt;)&lt;/td&gt;
&lt;td&gt;varunnaganathan&lt;/td&gt;
&lt;td&gt;Bob Relyea, David Woodhoue&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="http://creativcoder.xyz/"&gt;Implementing Service Worker Infrastructure in Servo Browser Engine&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;creativcoder&lt;/td&gt;
&lt;td&gt;jdm&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://wiki.mozilla.org/User:Abdelrhman/gsoc16"&gt;Improving and expanding the JavaScript &lt;span class="caps"&gt;XMPP&lt;/span&gt; Implementation&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Abdelrhman Ahmed&lt;/td&gt;
&lt;td&gt;aleth, nhnt11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://blog.mozilla.org/calendar/tag/gsoc/"&gt;Mozilla Calendar – Event in a Tab&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;paulmorris&lt;/td&gt;
&lt;td&gt;Philipp Kewisch&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://drive.google.com/folderview?id=0Bzvo3C7XKc_wVzVQWG5xaHo0NTA"&gt;Mozilla Investigator (&lt;span class="caps"&gt;MIG&lt;/span&gt;): Auditd integration&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Arun&lt;/td&gt;
&lt;td&gt;kang&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="http://blog.varun-joshi.com/"&gt;Prevent Failures due to Update Races&lt;/a&gt; (Balrog)&lt;/td&gt;
&lt;td&gt;varunjoshi&lt;/td&gt;
&lt;td&gt;Ben Hearsum&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://mikelingblog.wordpress.com/"&gt;Proposal of Redesign &lt;span class="caps"&gt;SETA&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;MikeLing&lt;/td&gt;
&lt;td&gt;Joel Maher&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="http://martiansideofthemoon.github.io/archive.html"&gt;Schedule TaskCluster Jobs in Treeherder&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;martianwars&lt;/td&gt;
&lt;td&gt;armenzg&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://wiki.mozilla.org/User:Anindyapandey"&gt;Thunderbird - Implement mbox -&amp;gt; maildir converter&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Shiva&lt;/td&gt;
&lt;td&gt;mkmelin&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="http://graphpanovr.blogspot.fr/"&gt;Two Projects to Make A-Frame More Useful, Accessible, and Exciting&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;bryik&lt;/td&gt;
&lt;td&gt;Diego Marcos&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="http://baygeldin.name/gsoc-2016/"&gt;Web-based &lt;span class="caps"&gt;GDB&lt;/span&gt; Frontend&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;baygeldin&lt;/td&gt;
&lt;td&gt;jonasfj&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Patrick Cloke</dc:creator><pubDate>Fri, 20 May 2016 09:15:00 -0400</pubDate><guid>tag:patrick.cloke.us,2016-05-20:posts/2016/05/20/google-summer-of-code-2016-projects/</guid><category>community</category><category>GSoC</category><category>Mozilla</category></item><item><title>Thoughts on Appyling to Google Summer of Code</title><link>http://patrick.cloke.us/posts/2016/03/07/thoughts-on-applying-to-gsoc/</link><description>
&lt;!-- --&gt;
&lt;blockquote&gt;
&lt;p&gt;Over the past few years I’ve been involved in &lt;a class="reference external" href="https://developers.google.com/open-source/gsoc/"&gt;Google Summer of Code&lt;/a&gt;
(GSoC), a program that sponsors students to write code for open-source
projects, as part of Mozilla. I’ve been both a mentor and administrator,
&lt;a class="reference external" href="http://blog.queze.net/"&gt;Florian Quèze&lt;/a&gt; and I frequently get asked questions about what students
should do to apply to GSoC. This post aims to give some resources and
answers to those questions. (I should note that each open-source
organization is different and this is based on my experiences at Mozilla.
Your mileage may vary.)&lt;/p&gt;
&lt;p&gt;Remember that none of this is meant as a guarantee for acceptance, it is
just a few things that can help get you ready and improve your chances!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you haven’t heard yet, then Mozilla has been accepted into
&lt;a class="reference external" href="https://developers.google.com/open-source/gsoc/"&gt;Google Summer of Code&lt;/a&gt; (GSoC) 2016, this will be our 10th time participating
in GSoC mentoring Organizations. Overally, the best way to prepare yourself for
applying to GSoC is to get involved with the community you would like to work
with. Some particular resources to help you in applying to GSoC are:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Go read the &lt;a class="reference external" href="https://developers.google.com/open-source/gsoc/"&gt;Google Summer of Code&lt;/a&gt; website. Every part of it. Particular
pages to point out are the:&lt;ul&gt;
&lt;li&gt;&lt;a class="reference external" href="http://en.flossmanuals.net/GSoCStudentGuide/"&gt;Student Guide&lt;/a&gt;: Written by a variety of people in the GSoC community,
it covers topics from contacting an organization, to applying, to not
being accepted.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://developers.google.com/open-source/gsoc/faq"&gt;&lt;span class="caps"&gt;FAQ&lt;/span&gt;&lt;/a&gt;: If you still have questions after reading the above (or whenever
you have a question), check here for answers &lt;em&gt;before&lt;/em&gt; asking anyone. (In
particular this includes questions about how to apply.)&lt;/li&gt;
&lt;li&gt;The final important page to internalize is the &lt;a class="reference external" href="https://summerofcode.withgoogle.com/how-it-works/"&gt;schedule&lt;/a&gt;. It is a
student’s responsibility to meet each of the deadlines.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Mozilla has some good &lt;a class="reference external" href="https://wiki.mozilla.org/Community:SummerOfCode16#Application_Advice"&gt;application advice&lt;/a&gt; on the idea page. I’ve
included/expanded on this below:&lt;ul&gt;
&lt;li&gt;Talk to the mentor. Contact them on &lt;span class="caps"&gt;IRC&lt;/span&gt;/e-mail/Slack/whatever that
project uses. If you have trouble contacting a mentor, contact the
organization administrators.&lt;/li&gt;
&lt;li&gt;Read &lt;a class="reference external" href="http://blog.gerv.net/2006/05/how_not_to_apply_for_summer_of/"&gt;How Not To Apply For Summer Of Code&lt;/a&gt;
and avoid doing the things listed there.&lt;/li&gt;
&lt;li&gt;Read our examples of good applications:
&lt;a class="reference external" href="https://wiki.mozilla.org/SummerOfCode/SampleApplications/1"&gt;1&lt;/a&gt;
&lt;a class="reference external" href="https://wiki.mozilla.org/SummerOfCode/SampleApplications/2"&gt;2&lt;/a&gt;
&lt;a class="reference external" href="https://wiki.mozilla.org/SummerOfCode/SampleApplications/3"&gt;3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;It is entirely acceptable to apply for 2 or 3 projects, if more than one
catches your eye; if the applications are high quality, that can improve
your chances. However, more than 3 seems like spam.&lt;/li&gt;
&lt;li&gt;Note that if a project suggests it would be helpful to know a technology
you don’t know (e.g. &lt;span class="caps"&gt;XUL&lt;/span&gt;), you may be able to get away with learning on
the job. Don’t be put off from applying if the project otherwise looks
right for you.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="section" id="picking-an-organization"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4"&gt;Picking an Organization&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Pick an organization you’re truly interested in helping. I really can’t stress
this enough. “Truly interested in helping” might mean many things:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;You believe in an organization on a philosophical ground.&lt;/li&gt;
&lt;li&gt;You use the program/library/service/etc. that the organization produces.&lt;/li&gt;
&lt;li&gt;…many other things…&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Throughout this post I use “organization” and “community” synonymously, but
organizations likely have smaller communities within them, each with their own
culture, beliefs, etc. Even within a small community, members will not share all
the same opinions!&lt;/p&gt;
&lt;!-- --&gt;
&lt;blockquote&gt;
A pet peeve of mine is that a student should use (or at the very least
&lt;em&gt;try&lt;/em&gt;) the product the community makes. It is difficult (if not impossible)
to understand the needs and wants of a community without utilizing what
they’ve poured their time and energy into.&lt;/blockquote&gt;
&lt;div class="section" id="introductions"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id5"&gt;Introductions&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Different communities interact in different ways (and frequently a single
community interacts in multiple ways). Common ways include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Instant messaging (&lt;span class="caps"&gt;IRC&lt;/span&gt;, &lt;span class="caps"&gt;XMPP&lt;/span&gt;, Slack, hipChat, etc.) for day-to-day chatter,
help, and off-topic banter.&lt;/li&gt;
&lt;li&gt;E-mail / mailing lists / newsgroups for project wide discussion,
announcements, etc.&lt;/li&gt;
&lt;li&gt;Bug trackers (Bugzilla, GitHub, Trac) for technical discussion and reviewing code.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Choose whichever way of introducting yourself that you’re comfortable with. It
can be useful to “idle” before introducing yourself (i.e.  watch how a community interacts).&lt;/p&gt;
&lt;p&gt;This can be important to figuring out a communities culture, e.g. how friendly
is the community to new-comers? Are they open to helping or do they just expect
patches to be submitted? Remember that it’s important for you to feel
comfortable with a community, you’ll be spending a significant amount of time
interacting with them!&lt;/p&gt;
&lt;p&gt;If none of the above seem appropriate, or you’re unsure, contact the
organization administrator directly. I’d suggest asking pointed questions, as an
organization administrator is much more likely to respond quickly in that case.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="getting-accepted"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id6"&gt;Getting Accepted&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We’re frequently asked how a student can improve their chances of getting
accepted by an organization. GSoC is a very &lt;strong&gt;self-driven&lt;/strong&gt; program, especially
if your mentor is a volunteer. Being a self starter can be a boon for being accepted.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Find a project you’re interested in doing and talk to the mentor / community responsible.&lt;/li&gt;
&lt;li&gt;Ensure you have a development environment set-up (for example, make sure you
can build Firefox, understand what needs to be done after making changes, etc.).&lt;/li&gt;
&lt;li&gt;Figure out where resources are for the project (i.e. Where are technical
discussions? Where can you find documentation?)&lt;/li&gt;
&lt;li&gt;Find minor bugs related to the project you’re interested in and work on
fixing them. (This might be more difficult if your project would add an
entirely new piece of code!)&lt;/li&gt;
&lt;li&gt;Get used to the way the community works and functions.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="building-an-application"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id7"&gt;Building an Application&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The above should help feed into your application. In particular, it should help
to build a realistic schedule for your application. (Scheduling is difficult
even for seasoned engineers, but the above work should help make a more accurate schedule.)&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Develop a plan for splitting your work into discrete chunks that can be
merged separately. Smaller changes are easier to review, can (generally)
land faster, and are easier to test. Of course, each project is different,
but work with your (potential) mentor.&lt;/li&gt;
&lt;li&gt;Estimate the amount of work each part of the project will take (you’ll have
some experience in the code base already, leverage that).&lt;/li&gt;
&lt;li&gt;Estimate how long reviews will take. (All code at Mozilla must go through a
review process before it is merged into a product. You might even need
multiple reviewers if your code touches many different parts of a codebase!
Different people review code on different schedules, etc.)&lt;/li&gt;
&lt;li&gt;Understand how quickly your changes would be merged and released. (How
quickly will your code hit a larger audience?)&lt;/li&gt;
&lt;li&gt;Understand the pieces &lt;strong&gt;besides&lt;/strong&gt; code that you might be asked to do. Will
you need to add/update documentation? Add new tests? Keep an old &lt;span class="caps"&gt;API&lt;/span&gt; intact?&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="summary"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id8"&gt;Summary&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is just a few ideas of what I look for when reviewing a Google Summer of
Code application. To repeat, try to understand an organization’s members, get
involved and gain experience, try to build an accurate schedule. An additional
thing I’d like to add is to &lt;a class="reference external" href="http://patrick.cloke.us/posts/2014/07/09/mentoring-and-time/"&gt;respect your mentors time&lt;/a&gt;, especially for GSoC,
many mentors are volunteers! You’ll likely be working on their project &lt;strong&gt;more&lt;/strong&gt;
than they do during GSoC!&lt;/p&gt;
&lt;p&gt;Please let me know if you have any additions or comments! If you have specific
questions that pertain to your application at Mozilla, please
&lt;a class="reference external" href="http://patrick.cloke.us/pages/contact.html"&gt;contact&lt;/a&gt; me individually.&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Patrick Cloke</dc:creator><pubDate>Mon, 07 Mar 2016 09:18:00 -0500</pubDate><guid>tag:patrick.cloke.us,2016-03-07:posts/2016/03/07/thoughts-on-applying-to-gsoc/</guid><category>GSoC</category><category>Mozilla</category></item><item><title>IRC Client Usage Share on moznet</title><link>http://patrick.cloke.us/posts/2015/09/23/irc-client-usage-share-on-moznet/</link><description>
&lt;div class="section" id="background"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id13"&gt;Background&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The usage share of &lt;span class="caps"&gt;IRC&lt;/span&gt; clients has always been something I’m interested in. This
is partially to see how many people are using &lt;a class="reference external" href="http://instantbird.com/"&gt;Instantbird&lt;/a&gt; or &lt;a class="reference external" href="https://www.mozilla.org/en-US/thunderbird/"&gt;Mozilla
Thunderbird&lt;/a&gt; for &lt;span class="caps"&gt;IRC&lt;/span&gt; (as I’ve written much of the &lt;span class="caps"&gt;IRC&lt;/span&gt; code for those clients).
&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Usage_share_of_web_browsers"&gt;Usage share of browsers&lt;/a&gt; is quite a researched topic, but I’ve never come
across this data for &lt;span class="caps"&gt;IRC&lt;/span&gt;. Most &lt;a class="footnote-reference" href="#id7" id="id1"&gt;[1]&lt;/a&gt; &lt;span class="caps"&gt;IRC&lt;/span&gt; clients implement a part of the &lt;a class="reference external" href="http://www.irchelp.org/irchelp/rfc/ctcpspec.html"&gt;&lt;span class="caps"&gt;CTCP&lt;/span&gt;&lt;/a&gt;
protocol which allows a client to query another client for their version.
Thinking of this as a &lt;a class="reference external" href="http://en.wikipedia.org/wiki/User_agent"&gt;user agent&lt;/a&gt; is probably a good analogue. I don’t think
this would imply that there is much of an issue with &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Usage_share_of_web_browsers#User_agent_spoofing"&gt;user agent spoofing&lt;/a&gt;, as
there would be for web browser statistics since (as far as I know), no one uses
the version response to do capability negotiation. It also is not used by servers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="technical-bits"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id14"&gt;Technical Bits&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So how’d we do this? I wrote an &lt;a class="reference external" href="https://bitbucket.org/clokep/irc-extras/src/tip/stats/"&gt;extension&lt;/a&gt; for Instantbird which handled both
the backend and the display of the results. I think that this really showcases
the extensibility of Instantbird and the effort we’ve put into ensuring their
are generic APIs available for developers. In particular this uses the &lt;a class="reference external" href="http://dxr.mozilla.org/comm-central/source/chat/protocols/irc/ircHandlers.jsm"&gt;&lt;span class="caps"&gt;IRC&lt;/span&gt;
handler &lt;span class="caps"&gt;API&lt;/span&gt;&lt;/a&gt; and the &lt;a class="reference external" href="http://hg.mozilla.org/comm-central/file/dbab5a531594/im/content/tabbrowser.xml#l432"&gt;add panel &lt;span class="caps"&gt;API&lt;/span&gt;&lt;/a&gt; (added by &lt;a class="reference external" href="http://blog.nhnt11.com/"&gt;one of our GSoC students&lt;/a&gt; a
couple of years ago.)&lt;/p&gt;
&lt;p&gt;Anyway, at the actual protocol level, I simply send a &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;CTCP&lt;/span&gt; &lt;span class="caps"&gt;VERSION&lt;/span&gt;&lt;/tt&gt; query to
each user I know of on the &lt;span class="caps"&gt;IRC&lt;/span&gt; network (based on who is in the same channels as
me) and then record the responses. I tried to be nice to the network here and
rate-limited myself to 1 query per second. No one complained after ~100 queries
and I didn’t seem to have any &lt;tt class="docutils literal"&gt;fakelag&lt;/tt&gt; issues. I then dumped the results and
made a pretty(-ish) plot of this. (If you’re a network administrator reading
this and think this is insane, I’d be very curious to hear a better way to do this!)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="results"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id15"&gt;Results&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In order to get some results I hooked my client up to &lt;a class="reference external" href="https://wiki.mozilla.org/IRC"&gt;moznet&lt;/a&gt; on July 23rd,
2015 and let it run on many channels (pretty much anything with more than 20
users) for a few hours &lt;a class="footnote-reference" href="#id8" id="id2"&gt;[2]&lt;/a&gt;. I was in Europe and started early in the morning
and let it run through the evening, so it should encompass some “normal” usage
by Mozillians. I would expect a bit of skew in these results toward
Mozilla-esque &lt;span class="caps"&gt;IRC&lt;/span&gt; clients (Instantbird, Thunderbird and &lt;a class="reference external" href="http://chatzilla.hacksrus.com/"&gt;ChatZilla&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Of course these numbers are just a single sampling and I have no idea how much
variance there is day-to-day or over time, but I found the (un-scientific)
results to be interesting!&lt;/p&gt;
&lt;div class="section" id="responses"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id16"&gt;Responses&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The first thing I noticed is the large amount of information some version
responses gave (in no particular order):&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;KVIrc 4.3.1 &lt;span class="pre"&gt;svn-6313&lt;/span&gt; 'Aria' 20120701 - build &lt;span class="pre"&gt;2013-02-14&lt;/span&gt; 17:47:33 &lt;span class="caps"&gt;UTC&lt;/span&gt; - Windows 7 Ultimate (x64) Service Pack 1 (Build 7601)&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;xchat 2.8.8 Linux &lt;span class="pre"&gt;3.17.4-1-&lt;span class="caps"&gt;ARCH&lt;/span&gt;&lt;/span&gt; [x86_64/2.90GHz/&lt;span class="caps"&gt;SMP&lt;/span&gt;]&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;HexChat 2.10.1 [x64] / Windows 7 &lt;span class="caps"&gt;SP1&lt;/span&gt; [4.09GHz]&lt;/tt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I don’t understand the rationale behind sharing a user’s operating system and
&lt;span class="caps"&gt;CPU&lt;/span&gt; speed. Most clients responded with a simple &lt;tt class="docutils literal"&gt;&amp;lt;software&amp;gt; &amp;lt;version number&amp;gt;&lt;/tt&gt;,
although quite a few also include a &lt;span class="caps"&gt;URL&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Additionally, some bouncers respond in weird ways which might skew the results:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;span class="caps"&gt;ZNC&lt;/span&gt; responds only if there are no clients connected &lt;span class="caps"&gt;OR&lt;/span&gt;, depending on the
version, it appends itself to the client response. &lt;a class="footnote-reference" href="#id9" id="id3"&gt;[3]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;bip responds with it’s own version if no one is connected &lt;span class="caps"&gt;OR&lt;/span&gt; the version of
all connected clients. &lt;a class="footnote-reference" href="#id10" id="id4"&gt;[4]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Lastly, some clients just don’t respond (or respond with an empty string). The
results below aren’t really a count of “users”, but a count of “clients” where
some users might be counted multiple times.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="client-summary"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id17"&gt;Client Summary&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Initially I visualized the data by plotting it two serparate ways: first by
showing the count of each version response and then grouping by “client family”.
The first plot had too many columns to reasonably show in this post: thus I’ve
only included a plot of the client families &lt;a class="footnote-reference" href="#id11" id="id5"&gt;[5]&lt;/a&gt;. There are two plots, the first
shows a subset of the data by cutting the tail (arbitrarily including families
with at least 10 users).&lt;/p&gt;
&lt;div class="note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;A “client family” is counting all versions of the same client together. This
was calculated by taking the text up to the first whitespace or digit and
converting to lowercase:&lt;/p&gt;
&lt;div class="last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;family&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;version&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/[\s\d]/&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;style type="text/css"&gt;
    #family-all-count, #family-count {
      width: 100%;
      height: 300px;
    }
&lt;/style&gt;
&lt;script src="/js/flotr2.min.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script type="text/javascript"&gt;
    function createPlot(aId, aTitle, aData) {
      // Put the data in order from biggest to smallest.
      var data = []
      for (var d of aData.entries())
        data.push(d);
      data.sort(function(a, b) { return a[1] &lt; b[1]; });

      // Re-arrange the data to be plotted into two arrays: one is a set of points
      // of x-index to value, the other is x-index to label.
      var labels = [];
      for (var i = 0; i &lt; data.length; i++) {
        // Sometimes the labels are stupid long.
        labels[i] = [i, (data[i][0] || "undefined").slice(0, 25)];
        data[i] = [i, data[i][1]];
      }

      var options = {
        title: aTitle,
        HtmlText: false,
        bars: {
          show: true,
          shadowSize: 0,
          barWidth: 0.5
        },
        mouse: {
          track: true,
          relative: true
        },
        xaxis: {
          ticks: labels,
          labelsAngle: 90
        },
        yaxis: {
          min: 0,
          autoscaleMargin: 1,
          title: "Count",
          titleAngle: 90
        }
      };

      var plot = document.getElementById(aId);
      Flotr.draw(plot, [data], options);
    }

    document.addEventListener("DOMContentLoaded", function() {
        var raw_data = [["instantbird", 21], ["thunderbird", 39], ["xchat", 77], ["colloquy", 33], ["limechat", 61], ["irssi", 204], ["irccloud", 520], ["znc", 161], ["icedove", 3], ["chatzilla", 59], ["bip-", 11], ["hexchat", 61], ["mozbot", 3], ["miranda", 6], ["mirc", 31], ["textual", 44], ["weechat", 76], ["kvirc", 6], ["purple", 70], ["x-chat", 8], ["xchat-wdk", 1], ["dircproxy", 1], ["konversation", 12], ["quassel", 69], ["linkinus", 3], ["\x02erc\x02", 6], ["leroooooy", 1], ["elitebnc", 1], ["fu,", 1], ["anope-", 1], ["&gt;", 2], ["telepathy-idle", 3], ["rcirc", 3], ["mrgiggles:", 1], ["ircii", 1], ["http://www.mibbit.com", 4], ["shout", 7], ["yaaic", 2], ["karen", 1], ["", 3], ["sceners", 1], ["uberscript", 1], ["tiarra:", 3], ["snak", 1], ["wuunyan", 1], ["adiirc", 1], ["n/a", 1], ["pircbotx", 3], ["none", 1], ["yes", 1], ["nettalk", 1], ["riece/", 1], ["unknown", 1], ["version", 1], ["circ", 3], ["request", 1], ["forrest,", 1], ["trillian", 1], ["\x03", 2], ["smuxi-frontend-gnome", 1], ["some", 1], ["\x02\x03", 1], ["oh", 1], ["\u201Cnever", 1], ["this", 1], ["nochat", 1], ["wee", 1], ["foadirc", 1], ["smuxi-server", 1], ["aperture", 1], ["internet", 1], ["supybot", 1], ["ejabberd", 2], ["dxirc", 1], ["ircle", 1], ["infobot", 1], ["exovenom", 1], ["nsa-irc", 1]];
        var families = new Map();
        for (var data of raw_data)
            families.set(data[0], data[1]);

        // Count the totals, used in reporting not actually displayed.
        var total = 0;
        for (var family of families.entries())
            total += family[1];

        // Update the plots.
        createPlot("family-all-count",
                   "All Families (Total: " + total + ")", families);

        // Remove all families that have less than 10 hits.
        for (var family of families.entries()) {
            if (family[1] &lt; 10) {
                families.delete(family[0])
                total -= family[1];
            }
        }

        createPlot("family-count",
                   "Families with at Least 10 Users (Total: " + total + ")",
                   families);
    });
&lt;/script&gt;
&lt;div id="family-count"&gt;&lt;/div&gt;
&lt;div id="family-all-count"&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="section" id="points-of-note"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id18"&gt;Points of Note&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I have to admit that I was fairly shocked by the number of IRCCloud users as I
found it pretty unusable when messing with it &lt;a class="footnote-reference" href="#id12" id="id6"&gt;[6]&lt;/a&gt;. I suspect it being an 'easy'
bouncer draws many people to it. The bouncer-like software (IRCCloud, &lt;span class="caps"&gt;ZNC&lt;/span&gt;, bip)
represents almost half of the users surveyed (692 / 1549 ≈ 45%)!&lt;/p&gt;
&lt;p&gt;I'm surprised so many people are using &lt;tt class="docutils literal"&gt;purple&lt;/tt&gt; as their &lt;span class="caps"&gt;IRC&lt;/span&gt; client, as the
support there is really barebones. (It makes sense if you're already using
Pidgin and don't want another client.) I think we've made a significant amount
of improvements in Instantbird's &lt;span class="caps"&gt;IRC&lt;/span&gt; support to make it simpler for a user to
get started (give it a try if you haven't!).&lt;/p&gt;
&lt;p&gt;The last thing I'll note is that, when taken together, Instantbird, Thunderbird,
and Icedove, come in as part of the top 10 (63 users, right before ChatZilla)!
There's a lot of great clients out there and I'm happy to say I've helped to
create one of the more popular ones (on moznet, at least!).&lt;/p&gt;
&lt;p&gt;Let me know if I missed a great insight!&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id7" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"&gt;&lt;/col&gt;&lt;col&gt;&lt;/col&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;"Most" is a wild accusation here. But...from the numbers I've seen, it
seems like a reasonable statement.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id8" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"&gt;&lt;/col&gt;&lt;col&gt;&lt;/col&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;While running this I had a few users question what I was doing over
private messages or in a channel. I'm &lt;em&gt;shocked&lt;/em&gt; that clients bother
their users by showing them they received a &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;VERSION&lt;/span&gt;&lt;/tt&gt; request. (Most)
users just won't care! Why show that low-level of the protocol?!&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id9" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"&gt;&lt;/col&gt;&lt;col&gt;&lt;/col&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id3"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;As corrected by DarthGandalf on &lt;span class="caps"&gt;IRC&lt;/span&gt;: "Before 1.6, &lt;span class="caps"&gt;ZNC&lt;/span&gt; version is
returned iff no clients are connected. After 1.6, it's also appended to
the client's response (but still one line per connected client)"&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id10" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"&gt;&lt;/col&gt;&lt;col&gt;&lt;/col&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id4"&gt;[4]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="https://twitter.com/dioxmat/status/646815252898803712"&gt;Source&lt;/a&gt;, have
I mentioned yet in this article that I hate bouncers?&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id11" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"&gt;&lt;/col&gt;&lt;col&gt;&lt;/col&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id5"&gt;[5]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;I stole the code to plot this from the &lt;a class="reference external" href="https://bitbucket.org/clokep/irc-extras/src/41a9572caf957ab8ae3969a145834bcd5be74abe/stats/content/ircStats.js?at=default#cl-55"&gt;plotting code&lt;/a&gt; in the extension
I wrote for this. When actually using that extension, something similar
to this appears as a tab and refreshes as results come in. It uses
&lt;a class="reference external" href="http://humblesoftware.com/flotr2/"&gt;Flotr2&lt;/a&gt; to do the plotting in JavaScript, I've been pretty happy with
it.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id12" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"&gt;&lt;/col&gt;&lt;col&gt;&lt;/col&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id6"&gt;[6]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Although in retrospect I shouldn't be since Mozilla runs their own
&lt;a class="reference external" href="https://irccloud.mozilla.com/"&gt;IRCCloud instance&lt;/a&gt;.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Patrick Cloke</dc:creator><pubDate>Thu, 24 Sep 2015 07:18:00 -0400</pubDate><guid>tag:patrick.cloke.us,2015-09-23:posts/2015/09/23/irc-client-usage-share-on-moznet/</guid><category>Mozilla</category><category>Thunderbird</category><category>Instantbird</category><category>IRC</category></item><item><title>Boston Python: Twisted async networking framework</title><link>http://patrick.cloke.us/posts/2015/08/28/boston-python-twisted-talk/</link><description>&lt;p&gt;Yesterday, &lt;a class="reference external" href="http://stephendicato.com/"&gt;Stephen DiCato&lt;/a&gt; and I gave a talk for &lt;a class="reference external" href="http://www.meetup.com/bostonpython/"&gt;Boston Python&lt;/a&gt; titled:
&lt;a class="reference external" href="http://www.meetup.com/bostonpython/events/221406450/"&gt;Twisted async networking framework&lt;/a&gt;. It was an introduction to intermediate
level talk about using the &lt;a class="reference external" href="https://twistedmatrix.com/"&gt;Twisted networking framework&lt;/a&gt; based on our
experiences at &lt;a class="reference external" href="https://percipientnetworks.com/"&gt;Percipient Networks&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The talk, available &lt;a class="reference external" href="https://github.com/percipient/talks/tree/master/boston_python_08_27_2015"&gt;on our GitHub&lt;/a&gt; (&lt;a class="reference external" href="https://github.com/percipient/talks/raw/master/boston_python_08_27_2015/boston_python_08_27_2015.pdf"&gt;&lt;span class="caps"&gt;PDF&lt;/span&gt;&lt;/a&gt;) covered a few basic&amp;nbsp;topics:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;What is asynchronous&amp;nbsp;programming?&lt;/li&gt;
&lt;li&gt;What is &lt;a class="reference external" href="https://twistedmatrix.com/"&gt;Twisted&lt;/a&gt;?&lt;/li&gt;
&lt;li&gt;When/why to use&amp;nbsp;Twisted?&lt;/li&gt;
&lt;li&gt;What is the event loop&amp;nbsp;(reactor)?&lt;/li&gt;
&lt;li&gt;What are &lt;a class="reference external" href="https://twistedmatrix.com/documents/current/core/howto/defer.html"&gt;Deferreds&lt;/a&gt; and how do you use&amp;nbsp;them?&lt;/li&gt;
&lt;li&gt;What are protocols (and related objects) and how do you use&amp;nbsp;them?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Additionally there was a &amp;#8216;bonus&amp;#8217; section: Using Twisted to build systems &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt;&amp;nbsp;services.&lt;/p&gt;
&lt;p&gt;We used an example of a very simple chat server (NetCatChat: where the official
client is netcat) to demonstrate these principles. All of our (working!) demo
code is included in the &lt;a class="reference external" href="https://github.com/percipient/talks/tree/master/boston_python_08_27_2015"&gt;repository&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There was a great turn out (almost 100 people showed up) and I greatly enjoyed
the experience. Thanks to everyone who came, the sponsors for the night,
&lt;a class="reference external" href="http://www.meetup.com/bostonpython/"&gt;Boston Python&lt;/a&gt; for setting this up, and Stephen for co-presenting! Please let
us know if you have any questions or&amp;nbsp;comments.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Patrick Cloke</dc:creator><pubDate>Fri, 28 Aug 2015 08:42:00 -0400</pubDate><guid>tag:patrick.cloke.us,2015-08-28:posts/2015/08/28/boston-python-twisted-talk/</guid><category>python</category><category>community</category><category>programming</category><category>twisted</category></item><item><title>New Position in Cyber Security at Percipient Networks</title><link>http://patrick.cloke.us/posts/2015/05/30/new-position-in-cyber-security-at-percipient-networks/</link><description>&lt;div class="note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;If you&amp;#8217;re hitting this from &lt;a class="reference external" href="http://planet.mozilla.org/"&gt;planet mozilla&lt;/a&gt;, this doesn&amp;#8217;t mean I&amp;#8217;m leaving
the Mozilla Community since I&amp;#8217;m not (nor was I ever) a Mozilla&amp;nbsp;employee.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;After working for &lt;a class="reference external" href="https://www.mitre.org"&gt;The &lt;span class="caps"&gt;MITRE&lt;/span&gt; Corporation&lt;/a&gt; for a bit over four years, I left a
few weeks ago to begin work at a cyber security start-up: &lt;a class="reference external" href="https://percipientnetworks.com/"&gt;Percipient
Networks&lt;/a&gt;. Currently our main product is &lt;a class="reference external" href="https://strongarm.percipientnetworks.com"&gt;&lt;span class="caps"&gt;STRONGARM&lt;/span&gt;&lt;/a&gt;: an intelligent &lt;span class="caps"&gt;DNS&lt;/span&gt;
blackhole. Usually &lt;span class="caps"&gt;DNS&lt;/span&gt; blackholes are set-up to block known bad domains by
sending requests for those domains to a non-routable or localhost. &lt;span class="caps"&gt;STRONGARM&lt;/span&gt;
redirects that traffic for identification and analysis. You could
&lt;a class="reference external" href="https://strongarm.percipientnetworks.com"&gt;give it a try&lt;/a&gt; and let us know of any feedback you might have! Much of my
involvement has been in the &lt;a class="reference external" href="https://strongarm.percipientnetworks.com/help/tech/"&gt;design and creation of the blackhole&lt;/a&gt;, including
writing protocol parsers for both standard protocols and&amp;nbsp;malware.&lt;/p&gt;
&lt;p&gt;So far, I&amp;#8217;ve been greatly enjoying my new position. There&amp;#8217;s been a renewed focus
on technical work, while being in a position to greatly influence both &lt;span class="caps"&gt;SRTONGARM&lt;/span&gt;
and Percipient Networks. My average day involves many more activities now,
including technical work: reverse engineering, reviewing/writing code, or
reading RFCs; as well as other work: mentoring &lt;a class="footnote-reference" href="#id4" id="id1"&gt;[1]&lt;/a&gt;, user support, writing
documentation, and putting desks together &lt;a class="footnote-reference" href="#id5" id="id2"&gt;[2]&lt;/a&gt;. I&amp;#8217;ve been thoroughly enjoying the
varied&amp;nbsp;activities!&lt;/p&gt;
&lt;p&gt;Shifting software stacks has also been nice. I&amp;#8217;m now writing mostly Python code,
instead of mostly &lt;span class="caps"&gt;MATLAB&lt;/span&gt;, Java and C/C++ &lt;a class="footnote-reference" href="#id6" id="id3"&gt;[3]&lt;/a&gt;. It has been great how many ready
to use packages are available for Python! I&amp;#8217;ve been very impressed with the
ecosystem, and been encouraged to feed back into the open-source community,
where&amp;nbsp;appropriate.&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id4" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;We currently have four interns, so there&amp;#8217;s always some mentoring to do!&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id5" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;We got a delivery of 10 &lt;a class="reference external" href="http://www.ergodepot.com/Jarvis_Desk_s/566.htm"&gt;desks&lt;/a&gt; a couple of weeks ago and spent the
evening putting them together.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id6" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id3"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;I originally titled this post &amp;#8220;xx days since my last semi-colon!&amp;#8221;, since
that has gone from being a common key press of mine to a rare one.
Although now I just get confused when switching between Python and
JavaScript. Since semicolons are optional in both, but encouraged in
JavaScript and discouraged in Python&amp;#8230;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Patrick Cloke</dc:creator><pubDate>Sat, 30 May 2015 13:59:00 -0400</pubDate><guid>tag:patrick.cloke.us,2015-05-30:posts/2015/05/30/new-position-in-cyber-security-at-percipient-networks/</guid><category>personal</category></item><item><title>Google Summer of Code 2015 Project Ideas for Mozilla</title><link>http://patrick.cloke.us/posts/2015/01/21/google-summer-of-code-2015-project-ideas-for-mozilla/</link><description>&lt;p&gt;As &lt;a class="reference external" href="http://blog.queze.net/post/2015/01/22/Project-ideas-wanted-for-Summer-of-Code-2015"&gt;Florian announced&lt;/a&gt; last Thursday, &lt;strong&gt;now&lt;/strong&gt; is the time to brainstorm and
discuss project ideas for &lt;a class="reference external" href="http://google-opensource.blogspot.fr/2014/10/google-summer-of-code-2015-and-google.html"&gt;Google Summer of Code 2015&lt;/a&gt;. Mozilla has
participated in every previous Google Summer of Code (GSoC), and hopes to
participate again this year! In order to help ensure we&amp;#8217;re selected, we need
project ideas before February 20th,&amp;nbsp;2015!&lt;/p&gt;
&lt;p&gt;There are always projects that we&amp;#8217;re passionate about, but keep getting pushed
down our ever growing to-do lists. GSoC is a great opportunity to introduce a
new member to your team, and have a student work full time on a project for 3&amp;nbsp;months.&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;What makes a good&amp;nbsp;project?&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;A project you&amp;#8217;re passionate about and has a clear&amp;nbsp;mentor.&lt;/li&gt;
&lt;li&gt;It should take (&lt;em&gt;a student&lt;/em&gt;) roughly 3 months to design, code, test,
review,&amp;nbsp;etc.&lt;/li&gt;
&lt;li&gt;It should not be in the critical path to your next&amp;nbsp;release/milestone.&lt;/li&gt;
&lt;li&gt;Is related to any Mozilla project (e.g. Firefox, Firefox &lt;span class="caps"&gt;OS&lt;/span&gt;, Thunderbird,
Instantbird, SeaMonkey, Bugzilla, l10n, &lt;span class="caps"&gt;NSS&lt;/span&gt;, &lt;span class="caps"&gt;QA&lt;/span&gt;, &lt;span class="caps"&gt;SUMO&lt;/span&gt;, Rust, and many&amp;nbsp;more!)&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;Please add ideas you might have to the &lt;a class="reference external" href="https://wiki.mozilla.org/Community:SummerOfCode15:Brainstorming"&gt;brainstorming page&lt;/a&gt;, eventually these
ideas will move to the &lt;a class="reference external" href="https://wiki.mozilla.org/Community:SummerOfCode15"&gt;formal ideas page&lt;/a&gt;. Please ensure you read the
directions at the top of the&amp;nbsp;page.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;d also like to thank &lt;a class="reference external" href="http://blog.gerv.net/"&gt;Gerv&lt;/a&gt; for doing an awesome job for the past 10 years as
the organization administrator. He is now passing the reins off to Florian and
I, who are the new points of contact for GSoC at Mozilla. If you have any
questions about GSoC, please check the &lt;a class="reference external" href="https://www.google-melange.com/gsoc/document/show/gsoc_program/google/gsoc2015/help_page"&gt;&lt;span class="caps"&gt;FAQ&lt;/span&gt;&lt;/a&gt; and, if it is still not answered,
please contact Florian or I&amp;nbsp;directly.&lt;/p&gt;
&lt;div class="section" id="for-students"&gt;
&lt;h2&gt;For&amp;nbsp;Students&lt;/h2&gt;
&lt;p&gt;The application period for students is March 16th, 2015 to March 27th, 2015. It
is not too soon to start discussing ideas with a potential mentor/community,
however. If you have an idea of what you&amp;#8217;d like to work on, feel free to seek
out that area of the community, introduce yourself and maybe find a &lt;a class="reference external" href="http://www.joshmatthews.net/bugsahoy/"&gt;mentored
bug&lt;/a&gt; to work&amp;nbsp;on.&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Patrick Cloke</dc:creator><pubDate>Wed, 21 Jan 2015 13:18:00 -0500</pubDate><guid>tag:patrick.cloke.us,2015-01-21:posts/2015/01/21/google-summer-of-code-2015-project-ideas-for-mozilla/</guid><category>mozilla</category><category>GSoC</category></item><item><title>Thunderbird Summit 2014</title><link>http://patrick.cloke.us/posts/2014/11/14/thunderbird-summit-2014/</link><description>&lt;p&gt;Last month (Oct. 15th to Oct. 18th, to be precise), &lt;a class="reference external" href="https://wiki.mozilla.org/Thunderbird:Summit_2014#Invited_Attendees"&gt;twenty volunteers&lt;/a&gt;
descended on Mozilla&amp;#8217;s Toronto office to discuss &lt;a class="reference external" href="https://www.mozilla.org/en-US/thunderbird/"&gt;Mozilla Thunderbird&lt;/a&gt;. This
included Mozilla employees, Thunderbird contributors of all sorts (developers,
user interface designers, add-on reviewers), Lightning contributors, and
chat/&lt;a class="reference external" href="http://instantbird.com/"&gt;Instantbird&lt;/a&gt;&amp;nbsp;contributors.&lt;/p&gt;
&lt;!--  --&gt;
&lt;blockquote class="center"&gt;
&lt;a class="reference external image-reference" href="http://patrick.cloke.us/images/chat-tb-summit/IMG_6516.jpg"&gt;&lt;img alt="The entire group of volunteers." src="/thumbnails/chat-tb-summit/IMG_6516_small.jpg" /&gt;&lt;/a&gt;
&lt;/blockquote&gt;
&lt;p&gt;It was great to spend some quality hacking time with &lt;a class="reference external" href="http://blog.queze.net/"&gt;Florian&lt;/a&gt; and to meet
&lt;a class="reference external" href="http://blog.nhnt11.com/"&gt;Nihanth&lt;/a&gt;, both Instantbird guys who I talk to most days on &lt;span class="caps"&gt;IRC&lt;/span&gt;! I also had the
pleasure of re-meeting a few people from the Mozilla Summit last year (I
attended in Toronto) and to meet some brand new&amp;nbsp;people!&lt;/p&gt;
&lt;!--  --&gt;
&lt;blockquote class="center"&gt;
&lt;a class="reference external image-reference" href="http://patrick.cloke.us/images/chat-tb-summit/IMG_6408.jpg"&gt;&lt;img alt="Nihanth hacking." src="/thumbnails/chat-tb-summit/IMG_6408_small.jpg" /&gt;&lt;/a&gt;
&lt;a class="reference external image-reference" href="http://patrick.cloke.us/images/chat-tb-summit/IMG_6426.jpg"&gt;&lt;img alt="The chat contributors: me, Florian and Nihanth." src="/thumbnails/chat-tb-summit/IMG_6426_small.jpg" /&gt;&lt;/a&gt;
&lt;a class="reference external image-reference" href="http://patrick.cloke.us/images/chat-tb-summit/IMG_6508.jpg"&gt;&lt;img alt="Daniel joining us over Vidyo." src="/thumbnails/chat-tb-summit/IMG_6508_small.jpg" /&gt;&lt;/a&gt;
&lt;p&gt;A few pictures of the chat contributors: Nihanth; me, Florian and Nihanth;
and Daniel (dialing&amp;nbsp;in!)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It was really nice to actually sit down for a few days and work on
Instantbird/Thunderbird without the distractions of &amp;#8220;real life&amp;#8221;. I,
unfortunately, spent the first day fixing an Instantbird &lt;a class="reference external" href="http://hg.mozilla.org/comm-central/rev/05bb70d5b231"&gt;bustage&lt;/a&gt; (from a
mozilla-central change that removed some &lt;span class="caps"&gt;NSS&lt;/span&gt; symbols&amp;#8230;why, I have no idea). But
after that, we got some really exciting work done! We started cleaning up and
finalizing some patches from Google Summer of Code 2014 to add &lt;a class="reference external" href="http://www.webrtc.org/"&gt;WebRTC&lt;/a&gt; support
to &lt;a class="reference external" href="http://xmpp.org/"&gt;&lt;span class="caps"&gt;XMPP&lt;/span&gt;&lt;/a&gt;! You can check out the progress in &lt;a class="reference external" href="https://bugzilla.mozilla.org/show_bug.cgi?id=1018060"&gt;bug 1018060&lt;/a&gt;.&lt;/p&gt;
&lt;!--  --&gt;
&lt;blockquote class="center"&gt;
&lt;a class="reference external image-reference" href="http://patrick.cloke.us/images/chat-tb-summit/IMG_6394.jpg"&gt;&lt;img alt="First working call over Instantbird WebRTC." src="/thumbnails/chat-tb-summit/IMG_6394_small.jpg" /&gt;&lt;/a&gt;
&lt;a class="reference external image-reference" href="http://patrick.cloke.us/images/chat-tb-summit/webrtc_preview.jpg"&gt;&lt;img alt="Screenshot of first working call over Instantbird WebRTC." src="/thumbnails/chat-tb-summit/webrtc_preview_small.jpg" /&gt;&lt;/a&gt;
&lt;p&gt;First working call over Instantbird&amp;nbsp;WebRTC.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!--  --&gt;
&lt;blockquote class="center"&gt;
&lt;a class="reference external image-reference" href="http://patrick.cloke.us/images/chat-tb-summit/IMG_6594.jpg"&gt;&lt;img alt="Eating some poutine!" src="/thumbnails/chat-tb-summit/IMG_6594_small.jpg" /&gt;&lt;/a&gt;
&lt;p&gt;Other highlights of the trip include eating the &amp;#8220;Canadian delicacy&amp;#8221; of
poutine (with pulled pork on&amp;nbsp;it)!&lt;/p&gt;
&lt;/blockquote&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Patrick Cloke</dc:creator><pubDate>Fri, 14 Nov 2014 18:37:00 -0500</pubDate><guid>tag:patrick.cloke.us,2014-11-14:posts/2014/11/14/thunderbird-summit-2014/</guid><category>Mozilla</category><category>Thunderbird</category><category>community</category><category>Instantbird</category></item><item><title>How I Got Involved in Mozilla</title><link>http://patrick.cloke.us/posts/2014/10/07/how-i-got-involved-in-mozilla/</link><description>&lt;p&gt;This is discussed very briefly on my &lt;a class="reference external" href="http://patrick.cloke.us/pages/about.html"&gt;about page&lt;/a&gt;, but I figured it could use a
bit of a longer discussion. I generally consider myself to have joined the
&lt;a class="reference external" href="https://www.mozilla.org/"&gt;Mozilla&lt;/a&gt; community in ~2006. I know that I was using Mozilla Firefox, Mozilla
Thunderbird, &lt;em&gt;and&lt;/em&gt; Mozilla Sunbird way before that (probably since ~2004, which
is when I built my own computer). But I was just an enthusiast then, running
beta builds, then alpha and eventually nightly builds. (This was way back when
things were more dangerous to run: Minefield and&amp;nbsp;Shredder.)&lt;/p&gt;
&lt;p&gt;Anyway, back to 2006&amp;#8230;I initially got involved in a more technical fashion by
writing extensions (or maybe it was &lt;a class="reference external" href="http://www.greasespot.net/"&gt;GreaseMonkey&lt;/a&gt; scripts). I don&amp;#8217;t really have
anyway to prove this though &amp;#8212; I don&amp;#8217;t seem to have any of that code. (This was
before widespread distributed version control.) Anyway, let&amp;#8217;s just assume this
2006 date is&amp;nbsp;correct.&lt;/p&gt;
&lt;p&gt;My &lt;a class="reference external" href="https://bugzilla.mozilla.org/show_bug.cgi?id=468020"&gt;first patch&lt;/a&gt; was in 2008 to move a function from the &lt;a class="reference external" href="https://addons.mozilla.org/en-us/thunderbird/addon/provider-for-google-calendar/"&gt;Provider for Google
Calendar&lt;/a&gt; to the calendar core so that I could use it in &lt;a class="reference external" href="https://bitbucket.org/clokep/thundershows"&gt;Thundershows&lt;/a&gt;: a
calendar provider for &lt;span class="caps"&gt;TV&lt;/span&gt; shows &lt;a class="footnote-reference" href="#id6" id="id1"&gt;[1]&lt;/a&gt; &lt;a class="footnote-reference" href="#id7" id="id2"&gt;[2]&lt;/a&gt;. (As far as I know, I&amp;#8217;m one of a
handful of people to actually implement a &lt;a class="reference external" href="https://wiki.mozilla.org/Calendar:Creating_an_Extension#Provider_Extensions"&gt;calendar provider&lt;/a&gt;.) I found the
calendar project much easier to get involved in than other aspects of Mozilla
since it was so much smaller. (I also &lt;a class="reference external" href="https://bitbucket.org/clokep/microblog-mailnews"&gt;toyed&lt;/a&gt; with adding an entire new protocol
to Thunderbird, which &lt;a class="reference external" href="http://mesquilla.com/"&gt;R Kent James&lt;/a&gt; has &lt;a class="reference external" href="https://bitbucket.org/rkentjames/skinkglue"&gt;now done&lt;/a&gt; successfully! &lt;a class="footnote-reference" href="#id8" id="id3"&gt;[3]&lt;/a&gt; &lt;a class="footnote-reference" href="#id9" id="id4"&gt;[4]&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;I then came across &lt;a class="reference external" href="http://www.instantbird.com/"&gt;Instantbird&lt;/a&gt; in ~2008 (sometime in the Instantbird 0.1 era).
I thought this was great &amp;#8212; Mozilla was finally making an instant messaging
client! Well, I was kind of right&amp;#8230;Instantbird is not an official Mozilla
project, but it was exactly what I wanted! The guys (mostly &lt;a class="reference external" href="http://blog.queze.net/"&gt;Florian Quèze&lt;/a&gt;) in
the &lt;a class="reference external" href="irc://irc.mozilla.org/#instantbird"&gt;#instantbird&lt;/a&gt; &lt;span class="caps"&gt;IRC&lt;/span&gt; channel were awesome: kind, patient, helpful, and
welcoming. They were the ones that really introduced me into the Mozilla way of
doing things. I fixed my first bug for Instantbird in &lt;a class="reference external" href="https://bugzilla.mozilla.org/show_bug.cgi?id=953935"&gt;2010&lt;/a&gt; and haven&amp;#8217;t stopped
since! I&amp;#8217;ve since added &lt;a class="reference external" href="https://bugzilla.mozilla.org/show_bug.cgi?id=953944"&gt;&lt;span class="caps"&gt;IRC&lt;/span&gt; support&lt;/a&gt; via JavaScript (instead of libpurple) and
am now one of the lead developers. I&amp;#8217;ve mentored Google Summer of Code students
twice (2013 and 2014), contribute to Thunderbird and am a peer of the &lt;a class="reference external" href="https://wiki.mozilla.org/Modules/Chat"&gt;chat
code&lt;/a&gt; shared between Instantbird and Thunderbird. (I do also occassionally
contribute to other projects. &lt;a class="footnote-reference" href="#id10" id="id5"&gt;[5]&lt;/a&gt;)&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id6" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;This was my first project to really have other users, I had people filing
bugs, asking for new features, etc. It was great! I even had someone
(years later) tell me in &lt;a class="reference external" href="irc://irc.mozilla.org/#instantbird"&gt;#instantbird&lt;/a&gt; that they had loved
Thundershows!&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id7" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;My &lt;a class="reference external" href="https://bugzilla.mozilla.org/show_bug.cgi?id=469477"&gt;second bug&lt;/a&gt; dealt with the same set of code and had tests committed
(by me) over 5 years after the initial patch. Oops!&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id8" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id3"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;My work was based off of some experiments &lt;a class="reference external" href="http://quetzalcoatal.blogspot.com/"&gt;Joshua Cranmer&lt;/a&gt; did to add
support for &lt;a class="reference external" href="http://quetzalcoatal.blogspot.com/2010/01/developing-new-account-types-part-0.html"&gt;web forums&lt;/a&gt; to Thunderbird. After all this time, I still
want that extension.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id9" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id4"&gt;[4]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Oh, also rkent did &lt;a class="reference external" href="http://mesquilla.com/extensions/tweequilla/"&gt;&lt;span class="caps"&gt;EXACTLY&lt;/span&gt;&lt;/a&gt; what I wanted years later: which is add
Twitter to Thunderbird.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id10" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id5"&gt;[5]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;But not Firefox. After seven years (and over 1800 commits), I&amp;#8217;ve never
fixed a bug in Firefox; although I have had &lt;a class="reference external" href="https://bugzilla.mozilla.org/show_bug.cgi?id=884319"&gt;code&lt;/a&gt; committed to
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;mozilla-central&lt;/span&gt;&lt;/tt&gt;.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Patrick Cloke</dc:creator><pubDate>Tue, 07 Oct 2014 09:31:00 -0400</pubDate><guid>tag:patrick.cloke.us,2014-10-07:posts/2014/10/07/how-i-got-involved-in-mozilla/</guid><category>Mozilla</category></item><item><title>Adding an Auxiliary Audio Input to a 2005 Subaru Outback</title><link>http://patrick.cloke.us/posts/2014/08/30/adding-an-auxiliary-audio-input-to-a-2005-subaru-outback/</link><description>&lt;p&gt;I own a &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Subaru_Legacy#Fourth_generation_.282003.E2.80.932009.29_-_BL.2C_BP"&gt;2005 (fourth generation) Subaru Outback&lt;/a&gt;, I&amp;#8217;ve had it since the fall
of 2006 and it has been great. I have a little over 100,000 miles and do not
plan to sell it anytime&amp;nbsp;soon.&lt;/p&gt;
&lt;p&gt;There is one thing that just &lt;em&gt;kills&lt;/em&gt; me though. You cannot (easily &lt;a class="footnote-reference" href="#id7" id="id1"&gt;[1]&lt;/a&gt;) change
the radio in it&amp;#8230;and it is &lt;em&gt;just&lt;/em&gt; old enough &lt;a class="footnote-reference" href="#id8" id="id2"&gt;[2]&lt;/a&gt; to have neither BlueTooth nor
an auxiliary audio input. I&amp;#8217;ve been carrying around a book of CDs with me for
the past 8 years. I decided it was time to change&amp;nbsp;that.&lt;/p&gt;
&lt;p&gt;I knew that it was possible to &amp;#8220;modify&amp;#8221; the radio to accept an auxiliary input,
but it &lt;a class="reference external" href="http://www.jazzyengineering.com/product_info.php?cPath=21&amp;amp;products_id=28"&gt;involved always playing a silent &lt;span class="caps"&gt;CD&lt;/span&gt;&lt;/a&gt;, which I did not find adequate. I
recently &lt;a class="reference external" href="http://snackeyes.blogspot.com/2011/06/2005-subaru-outback-aux-in-hack-via.html"&gt;came across&lt;/a&gt; a post of how to do this in such a way that the radio
functions as normal, but when you plug in a device to the auxiliary port it cuts
out the radio and plays from the device. &lt;a class="reference external" href="http://www.subaruoutback.org/forums/69-audio-video-security-navigation/36606-2005-outback-aux-hack-via-radio-module-success.html"&gt;Someone else&lt;/a&gt; had also confirmed that
it worked for them.&amp;nbsp;Cool!&lt;/p&gt;
&lt;p&gt;I vaguely followed the directions, but made a few changes here and there. Also,
everyone online seems to make it seem like the radio is &lt;em&gt;super&lt;/em&gt; easy to get
out&amp;#8230;I seriously think I spent at least two hours on it. There were &lt;a class="reference external" href="https://www.youtube.com/watch?v=7W7otDaBwJk"&gt;two&lt;/a&gt;
&lt;a class="reference external" href="https://www.youtube.com/watch?v=EzoGJBNMwmU"&gt;videos&lt;/a&gt; and a &lt;a class="reference external" href="http://www.metraonline.com/files/products/INST99-8901.pdf"&gt;&lt;span class="caps"&gt;PDF&lt;/span&gt;&lt;/a&gt; I found useful for this&amp;nbsp;task.&lt;/p&gt;
&lt;!--  --&gt;
&lt;blockquote class="center"&gt;
&lt;a class="reference external image-reference" href="http://patrick.cloke.us/images/subaru-outback-radio/uninstall-front.jpg"&gt;&lt;img alt="Front view of my uninstalled 2005 Subaru Outback stereo." src="/thumbnails/subaru-outback-radio/uninstall-front_small.jpg" /&gt;&lt;/a&gt;
&lt;a class="reference external image-reference" href="http://patrick.cloke.us/images/subaru-outback-radio/uninstall-right.jpg"&gt;&lt;img alt="Right view of my uninstalled 2005 Subaru Outback stereo." src="/thumbnails/subaru-outback-radio/uninstall-right_small.jpg" /&gt;&lt;/a&gt;
&lt;a class="reference external image-reference" href="http://patrick.cloke.us/images/subaru-outback-radio/uninstall-back.jpg"&gt;&lt;img alt="Back view of my uninstalled 2005 Subaru Outback stereo." src="/thumbnails/subaru-outback-radio/uninstall-back_small.jpg" /&gt;&lt;/a&gt;
&lt;p&gt;A few images of the uninstalled stereo before any disassembly. (So I could
remember how to reassemble&amp;nbsp;it!)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I wouldn&amp;#8217;t say that this modification was extremely difficult, but it does&amp;nbsp;involve:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Soldering to surface mount components (I&amp;#8217;m not awesome a soldering, but I have
had a good amount of&amp;nbsp;experience).&lt;/li&gt;
&lt;li&gt;The willingness to potentially trash a&amp;nbsp;radio.&lt;/li&gt;
&lt;li&gt;Basic understanding of electrical diagrams and how switches&amp;nbsp;work.&lt;/li&gt;
&lt;li&gt;A lot of time! I spent ~13 hours total working on&amp;nbsp;this.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Total cost of components, however, was &amp;lt; $5.00 (and that&amp;#8217;s probably
overestimating.) Really the only component I didn&amp;#8217;t have was the &lt;a class="reference external" href="http://www.radioshack.com/product/index.jsp?productId=2103451"&gt;switching
audio jack&lt;/a&gt;, which I got at my local RadioShack for $2.99. (I also picked up
wire, heatshrink, etc. so&amp;#8230;$5.00 sounded reasonable.) The actual list of parts
and tools I used&amp;nbsp;was:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;1/8&amp;#8221; Stereo Panel-Mount Phone Jack [$2.99, RadioShack&amp;nbsp;#274-246]&lt;/li&gt;
&lt;li&gt;~2 feet of each of green and red 22 gauge wire, ~1 foot of black 22 gauge&amp;nbsp;wire.&lt;/li&gt;
&lt;li&gt;Soldering iron /&amp;nbsp;Solder&lt;/li&gt;
&lt;li&gt;3 x Alligator clip testing wires (1 black, 1 red, 1&amp;nbsp;green)&lt;/li&gt;
&lt;li&gt;Multimeter&lt;/li&gt;
&lt;li&gt;Hot glue gun / Hot&amp;nbsp;glue&lt;/li&gt;
&lt;li&gt;Various sizes of flat/slotted and Phillips head screw&amp;nbsp;drivers&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/File:Wire_stripper.jpg"&gt;Wire&amp;nbsp;strippers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Wire&amp;nbsp;cutter&lt;/li&gt;
&lt;li&gt;Needle nosed&amp;nbsp;pliers&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.streamlight.com/product/product.aspx?pid=133"&gt;Flashlight&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Drill with 1/4&amp;#8221; drill bit and a 1/2&amp;#8221; spade bit (plus some smaller sized drill
bits for pilot&amp;nbsp;holes)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Anyway, once you have the radio out you can disassembly it down to it&amp;#8217;s bare
components. (It is held together with a bunch of screws and tabs, I took
pictures along each step of the way to ensure I could put it back&amp;nbsp;together.)&lt;/p&gt;
&lt;!--  --&gt;
&lt;blockquote class="center"&gt;
&lt;a class="reference external image-reference" href="http://patrick.cloke.us/images/subaru-outback-radio/disassembly-front.jpg"&gt;&lt;img alt="The front of the stereo after removing the control unit." src="/thumbnails/subaru-outback-radio/disassembly-front_small.jpg" /&gt;&lt;/a&gt;
&lt;a class="reference external image-reference" href="http://patrick.cloke.us/images/subaru-outback-radio/disassembly-front-reverse.jpg"&gt;&lt;img alt="The reverse of the control unit." src="/thumbnails/subaru-outback-radio/disassembly-front-reverse_small.jpg" /&gt;&lt;/a&gt;
&lt;a class="reference external image-reference" href="http://patrick.cloke.us/images/subaru-outback-radio/disassembly-top.jpg"&gt;&lt;img alt="The top of the unit with the cover removed showing the CD drive." src="/thumbnails/subaru-outback-radio/disassembly-top_small.jpg" /&gt;&lt;/a&gt;
&lt;p&gt;The initial steps of disassembly: the front after removing the controls, the
reverse of the control unit, a top-down view after removing the top of the
unit &lt;a class="footnote-reference" href="#id9" id="id3"&gt;[3]&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!--  --&gt;
&lt;blockquote class="center"&gt;
&lt;a class="reference external image-reference" href="http://patrick.cloke.us/images/subaru-outback-radio/disassembly-motherboard.jpg"&gt;&lt;img alt="The main circuit board of the unit." src="/thumbnails/subaru-outback-radio/disassembly-motherboard_small.jpg" /&gt;&lt;/a&gt;
&lt;a class="reference external image-reference" href="http://patrick.cloke.us/images/subaru-outback-radio/disassembly-motherboard-reverse.jpg"&gt;&lt;img alt="The reverse of the main circuit board of the unit." src="/thumbnails/subaru-outback-radio/disassembly-motherboard-reverse_small.jpg" /&gt;&lt;/a&gt;
&lt;p&gt;The actual circuit board of the stereo unit. You can see the radio module on
the&amp;nbsp;left.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The radio module connects to the motherboard with a 36-pin connector. Pin 31 is
the right audio channel and pin 32 is left audio channel. I verified this by
connected the disassembly radio to the car and testing with alligator clips
hooked up to my phones audio output &lt;a class="footnote-reference" href="#id10" id="id4"&gt;[4]&lt;/a&gt;. I already knew these were the pins
from the directions, but I verified by completing the circuit to these pins and
ensuring I heard mixed audio with my phone and the&amp;nbsp;radio.&lt;/p&gt;
&lt;p&gt;The direction suggested cutting the pin and bending it up to solder to it. I
didn&amp;#8217;t have any cutting tool small enough to get in between the pins&amp;#8230;so I
flipped the board over and did sketchier things. I scored the board to remove
the traces &lt;a class="footnote-reference" href="#id11" id="id5"&gt;[5]&lt;/a&gt; that connected the radio module to the rest of the board. I then
soldered on either side of this connection to put it through the audio&amp;nbsp;connector.&lt;/p&gt;
&lt;!--  --&gt;
&lt;blockquote class="center"&gt;
&lt;a class="reference external image-reference" href="http://patrick.cloke.us/images/subaru-outback-radio/soldered-connections.jpg"&gt;&lt;img alt="Soldered leads to the bottom of the stereo board." src="/thumbnails/subaru-outback-radio/soldered-connections_small.jpg" /&gt;&lt;/a&gt;
&lt;a class="reference external image-reference" href="http://patrick.cloke.us/images/subaru-outback-radio/soldered-ground.jpg"&gt;&lt;img alt="Soldered ground to the top of the radio unit." src="/thumbnails/subaru-outback-radio/soldered-ground_small.jpg" /&gt;&lt;/a&gt;
&lt;p&gt;Five soldered connections are required, four to the bottom of the board &lt;a class="footnote-reference" href="#id12" id="id6"&gt;[6]&lt;/a&gt;
and one to the ground at the top of the&amp;nbsp;unit.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now, the way that this works is that the audio connector output (pins 2 and 5)
is &lt;em&gt;always&lt;/em&gt; connected. If nothing is in the jack, it is connected as a
passthrough to the inputs (pins 3 and 4, respectively). If an audio connector is
plugged in, input redirects to the jack. (Pin 1 is ground.) For reference, red
is right audio and green is left audio (black is&amp;nbsp;ground).&lt;/p&gt;
&lt;!--  --&gt;
&lt;blockquote class="center"&gt;
&lt;a class="reference external image-reference" href="http://patrick.cloke.us/images/subaru-outback-radio/diagrams.jpg"&gt;&lt;img alt="Wiring diagrams of the connections." src="/thumbnails/subaru-outback-radio/diagrams_medium.jpg" /&gt;&lt;/a&gt;
&lt;p&gt;A few of the diagrams necessary to do this. The top two diagram is simple
the connectors two states: no plug and plug. The bottom two diagrams are a
normal 1/8&amp;#8221; audio plug and the physical pin-out and measurements of the&amp;nbsp;jack.&lt;/p&gt;
&lt;p&gt;To reiterate, pins 2 and 5 connect to the &amp;#8220;stereo side&amp;#8221; of the scored pins
31 and 32 of the radio module. (I.e. They are the output from the connector
back to what will be played by the stereo.) Pins 3 and 4 are the inputs from
the radio module side of pins 31 and 32 to the&amp;nbsp;connector.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So after soldering for connections (and some hot glue), we have the ability to
intercept the signal. At this point I took the bare motherboard and tested this
in my car with alligator clips to ensure the radio still worked, I then
connected the alligator clips to a cut audio plug to ensure everything&amp;nbsp;worked.&lt;/p&gt;
&lt;!--  --&gt;
&lt;blockquote class="center"&gt;
&lt;a class="reference external image-reference" href="http://patrick.cloke.us/images/subaru-outback-radio/hot-glued-connections.jpg"&gt;&lt;img alt="Hot glued wires to the board as strain relief." src="/thumbnails/subaru-outback-radio/hot-glued-connections_small.jpg" /&gt;&lt;/a&gt;
&lt;a class="reference external image-reference" href="http://patrick.cloke.us/images/subaru-outback-radio/testing-alligator-clips.jpg"&gt;&lt;img alt="Testing with alligator clips. (after reassembly)." src="/thumbnails/subaru-outback-radio/testing-alligator-clips_small.jpg" /&gt;&lt;/a&gt;
&lt;p&gt;The wires were also hot glued to the circuit board as strain relief. After
reassembly I tested again with alligator&amp;nbsp;clips.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;At this point, I reassembled the radio case and ran the wires out through holes
in the side / bottom toward the front of the unit. I noticed there was an empty
spot in the top left of the unit which looked like it would fit the panel mount
audio jack. After doing some measurements I deemed my chances good enough to
drill a hole here for the connector. Some tips on drilling plastic, if you
haven&amp;#8217;t done it much: use the lowest speed you can; start with very small bits
and work your way up (I used 4 stages of bits); and cover both sides in masking
tape to avoid&amp;nbsp;scratches.&lt;/p&gt;
&lt;!--  --&gt;
&lt;blockquote class="center"&gt;
&lt;a class="reference external image-reference" href="http://patrick.cloke.us/images/subaru-outback-radio/drilled-setup.jpg"&gt;&lt;img alt="Taped and measurements for drilling the hole from the front." src="/thumbnails/subaru-outback-radio/drilled-setup_small.jpg" /&gt;&lt;/a&gt;
&lt;a class="reference external image-reference" href="http://patrick.cloke.us/images/subaru-outback-radio/drilled-setup-reverse.jpg"&gt;&lt;img alt="Taped and measurements for drilling the hole from the reverse." src="/thumbnails/subaru-outback-radio/drilled-setup-reverse_small.jpg" /&gt;&lt;/a&gt;
&lt;p&gt;Another benefit of tape is you can write anywhere you want. These
measurements were taken initially on the back and transcribed to the front
(where I drilled&amp;nbsp;from).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The plastic was actually too think for the panel mount connector to reach
through, which is where the 1/2&amp;#8221; spade bit came in handy. I use it to drill
through roughly half the thickness of the plastic (a little at a time with lots
of testing). The connector was able to nestle inside the thinner plastic and
reach all the way&amp;nbsp;through.&lt;/p&gt;
&lt;!--  --&gt;
&lt;blockquote class="center"&gt;
&lt;a class="reference external image-reference" href="http://patrick.cloke.us/images/subaru-outback-radio/drilled-hole.jpg"&gt;&lt;img alt="The 1/4&amp;quot; hole drilled through the plastic." src="/thumbnails/subaru-outback-radio/drilled-hole_small.jpg" /&gt;&lt;/a&gt;
&lt;a class="reference external image-reference" href="http://patrick.cloke.us/images/subaru-outback-radio/drilled-hole-reverse.jpg"&gt;&lt;img alt="The thinning of the plastic from the 1/2&amp;quot; spade bit." src="/thumbnails/subaru-outback-radio/drilled-hole-reverse_small.jpg" /&gt;&lt;/a&gt;
&lt;a class="reference external image-reference" href="http://patrick.cloke.us/images/subaru-outback-radio/drilled-hole-assembly.jpg"&gt;&lt;img alt="The assembled connector in the hole" src="/thumbnails/subaru-outback-radio/drilled-hole-assembly_small.jpg" /&gt;&lt;/a&gt;
&lt;p&gt;After the initial hole was drilled, the tape on the back was removed to thin
the&amp;nbsp;plastic.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The last bit was soldering the five connections onto the audio connector,
applying a coating of hot glue (for strain relief and to avoid shorts). Once
the connector was soldered, the front panel was carefully reassembled. Finally,
the completed unit was reinstalled back into the car and voila, I now have an
auxiliary audio input! Can&amp;#8217;t wait to test it out on a long car&amp;nbsp;trip.&lt;/p&gt;
&lt;!--  --&gt;
&lt;blockquote class="center"&gt;
&lt;a class="reference external image-reference" href="http://patrick.cloke.us/images/subaru-outback-radio/soldered-switch.jpg"&gt;&lt;img alt="The soldered jack." src="/thumbnails/subaru-outback-radio/soldered-switch_small.jpg" /&gt;&lt;/a&gt;
&lt;a class="reference external image-reference" href="http://patrick.cloke.us/images/subaru-outback-radio/hot-glued-switch.jpg"&gt;&lt;img alt="The hot-glued jack." src="/thumbnails/subaru-outback-radio/hot-glued-switch_small.jpg" /&gt;&lt;/a&gt;
&lt;p&gt;The soldered and hot-glued audio&amp;nbsp;jack.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!--  --&gt;
&lt;blockquote class="center"&gt;
&lt;a class="reference external image-reference" href="http://patrick.cloke.us/images/subaru-outback-radio/install-1.jpg"&gt;&lt;img alt="The installed unit." src="/thumbnails/subaru-outback-radio/install-1_small.jpg" /&gt;&lt;/a&gt;
&lt;a class="reference external image-reference" href="http://patrick.cloke.us/images/subaru-outback-radio/install-2.jpg"&gt;&lt;img alt="Close-up of the new jack." src="/thumbnails/subaru-outback-radio/install-2_small.jpg" /&gt;&lt;/a&gt;
&lt;p&gt;The final installed stereo&amp;nbsp;unit.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;One caveat of doing this (and I&amp;#8217;m unsure if this is because I didn&amp;#8217;t cut the
pins as suggested or if this is just a fact of doing it this way&amp;#8230;). If you
have an auxiliary input device playing &lt;span class="caps"&gt;AND&lt;/span&gt; play a &lt;span class="caps"&gt;CD&lt;/span&gt;, the audio mixes instead of
being replaced by the auxiliary device. It works fine on radio though, so just
remember to set the stereo to &lt;span class="caps"&gt;FM&lt;/span&gt;.&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id7" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;The head unit of the stereo is directly built into the dashboard and
includes the heat / air conditioning controls. &lt;a class="reference external" href="http://www.metraonline.com/part/Subaru_Legacy_Dash_kit_99-8901"&gt;People&lt;/a&gt; do sell kits to
convert the dash into one that can accept an aftermarket radio&amp;#8230;but
where&amp;#8217;s the fun in that?&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id8" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;The 2007 edition had an option for a stereo with satellite radio and an
&lt;span class="caps"&gt;AUX&lt;/span&gt; input. I probably could have bought this stereo and installed it,
but I was quoted $285 last time I asked about changing my radio.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id9" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id3"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;You can see I actually had a &lt;span class="caps"&gt;CD&lt;/span&gt; in the &lt;span class="caps"&gt;CD&lt;/span&gt; player when I removed the
radio. Oops! Luckily it was just a copy of one of my CDs (I never take
originals in my car). I didn&amp;#8217;t end up scratching it or anything either!&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id10" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id4"&gt;[4]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Playing one of my favorite albums: &lt;a class="reference external" href="http://en.wikipedia.org/wiki/No_Control_%28Bad_Religion_album%29"&gt;&lt;em&gt;No Control&lt;/em&gt;&lt;/a&gt; by &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Bad_Religion"&gt;Bad Religion&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id11" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id5"&gt;[5]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;This might seem insane, but I was fairly certain I&amp;#8217;d be able to solder a
jumper back into place if everything didn&amp;#8217;t work, so I actually felt
more comfortable doing this than cutting the pin.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id12" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id6"&gt;[6]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Please don&amp;#8217;t judge my soldering! Two of the four connections were a
little sloppy (I had to add solder to those instead of just tinning the
wires). I did ensure there were no shorts with a multimeter (and had to
resolder one connection).&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Patrick Cloke</dc:creator><pubDate>Sat, 30 Aug 2014 17:34:00 -0400</pubDate><guid>tag:patrick.cloke.us,2014-08-30:posts/2014/08/30/adding-an-auxiliary-audio-input-to-a-2005-subaru-outback/</guid><category>hacking</category><category>auto</category><category>hardware</category></item><item><title>Mentoring and Time</title><link>http://patrick.cloke.us/posts/2014/07/09/mentoring-and-time/</link><description>&lt;p&gt;No, this is not about being late places, it&amp;#8217;s about respecting people&amp;#8217;s time. I
won&amp;#8217;t go deep into why this is important as, &lt;a class="reference external" href="https://plus.google.com/118086293667040637133"&gt;Michael Haggerty&lt;/a&gt; wrote an
awesome &lt;a class="reference external" href="http://softwareswirl.blogspot.fr/2014/03/my-secret-tip-for-gsoc-success.html"&gt;article&lt;/a&gt; on this. His thoughts boiled down to a single line of&amp;nbsp;advice:&lt;/p&gt;
&lt;blockquote&gt;
&lt;strong&gt;&lt;span class="caps"&gt;DON&lt;/span&gt;&amp;#8217;T &lt;span class="caps"&gt;WASTE&lt;/span&gt; &lt;span class="caps"&gt;OTHER&lt;/span&gt; &lt;span class="caps"&gt;PEOPLE&lt;/span&gt;&amp;#8217;S &lt;span class="caps"&gt;TIME&lt;/span&gt;&lt;/strong&gt;&lt;/blockquote&gt;
&lt;p&gt;I think this applies to any type of mentoring, and not only open source work,
but any formal or informal mentoring! This advice isn&amp;#8217;t meant just for GSoC
students, for interns or new employees, but also things I&amp;#8217;d like to remind
myself to do when someone is helping&amp;nbsp;me.&lt;/p&gt;
&lt;p&gt;To make this sound positive, I&amp;#8217;d reword the above advice&amp;nbsp;as:&lt;/p&gt;
&lt;blockquote&gt;
&lt;strong&gt;Respect other people&amp;#8217;s time!&lt;/strong&gt;&lt;/blockquote&gt;
&lt;p&gt;Someone is willing to help you, so assume some good faith, but help them help
you! Some actions to focus&amp;nbsp;on:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Ask &lt;strong&gt;focused questions&lt;/strong&gt;! If you do not understand an answer, do not &lt;em&gt;re-ask&lt;/em&gt;
the same question, but ask &lt;em&gt;followup&lt;/em&gt; question. Show you&amp;#8217;ve researched the
original answer and attempted to understand it. Write sample code, play with
it, etc. If you think the answer given doesn&amp;#8217;t apply to your question,
&lt;em&gt;reword&lt;/em&gt; your question: your mentor probably did not&amp;nbsp;understand.&lt;/li&gt;
&lt;li&gt;Be cognizant of &lt;strong&gt;timezones&lt;/strong&gt;: if you&amp;#8217;d like a question answered (in realtime),
ask it when the person is awake! (And this includes realizing if they have
just woken up or are going to&amp;nbsp;bed.)&lt;/li&gt;
&lt;li&gt;Your mentor may not have the &lt;strong&gt;context&lt;/strong&gt; you do: they might be helping many
people at once, or even working on something totally different than you!
Try not to get frustrated if you have to explain your context to them multiple
times or have to clarify your question. You are living and breathing the code
you&amp;#8217;re working in; they are&amp;nbsp;not.&lt;/li&gt;
&lt;li&gt;Don&amp;#8217;t be afraid to &lt;strong&gt;share code&lt;/strong&gt;. It&amp;#8217;s much easier to ask a question when
there&amp;#8217;s a specific example in front of you. Be specific and don&amp;#8217;t talk&amp;nbsp;theoretically.&lt;/li&gt;
&lt;li&gt;Don&amp;#8217;t be upset if you&amp;#8217;re asked to change code (e.g. receive an r-)! Part of
helping you to grow is telling you what you&amp;#8217;re doing&amp;nbsp;wrong.&lt;/li&gt;
&lt;li&gt;Working &lt;em&gt;remotely&lt;/em&gt; is hard. It requires effort to &lt;strong&gt;build a level of trust&lt;/strong&gt;
between people. Don&amp;#8217;t just assume it will come in time, but work at it and try
to get to know and understand your&amp;nbsp;mentor.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Quickly respond&lt;/strong&gt; to both feedback and questions. Your mentor is taking
their precious time to help you. If they ask you a question or ask something
of you, do it &lt;span class="caps"&gt;ASAP&lt;/span&gt;. If you can&amp;#8217;t answer their question immediately, at least
let them know you received it and will soon look at&amp;nbsp;it.&lt;/li&gt;
&lt;li&gt;If there are multiple people helping you, assume that they communicate
(without your knowledge). Don&amp;#8217;t&amp;#8230;&lt;ul&gt;
&lt;li&gt;&amp;#8230;try to get each of them to do separate parts of a project for&amp;nbsp;you.&lt;/li&gt;
&lt;li&gt;&amp;#8230;ask the same question to multiple people hoping for different&amp;nbsp;answers.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The above is a lot to consider. I know that I have a tendency to do some of
the above. Using your mentors time efficiently will not only make your mentor
happy, but it will probably cause them to want to give you &lt;em&gt;more&lt;/em&gt; of their&amp;nbsp;time.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Mentoring is also hard and a skill to practice. Although I&amp;#8217;ve talked a lot
about what a mentee needs to do, it is also important that a mentor makes
h(im|er)self available and open. A few thoughts on interacting as a&amp;nbsp;mentor:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Be cognizant of &lt;em&gt;culture&lt;/em&gt; and &lt;em&gt;language&lt;/em&gt; (as in, the level at which a mentor
and mentee share a common language). In particular, colloquialisms should be
avoided whenever possible. At least until a level of trust is&amp;nbsp;reached.&lt;/li&gt;
&lt;li&gt;Be tactful when &lt;em&gt;giving feedback&lt;/em&gt;. Thank people for submitting a patch, give
good, &lt;em&gt;actionable&lt;/em&gt; feedback quickly. Concentrate more on overall code design
and algorithms than nits. (Maybe even point out nits, but fix them yourself
for an initial&amp;nbsp;patch.)&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Patrick Cloke</dc:creator><pubDate>Wed, 09 Jul 2014 17:32:00 -0400</pubDate><guid>tag:patrick.cloke.us,2014-07-09:posts/2014/07/09/mentoring-and-time/</guid><category>community</category><category>GSoC</category></item><item><title>New Blog: Serving the Content</title><link>http://patrick.cloke.us/posts/2014/07/06/new-blog-serving-the-content/</link><description>
&lt;p&gt;In the &lt;a class="reference external" href="http://patrick.cloke.us/posts/2014/07/03/new-blog/"&gt;first part&lt;/a&gt; of this blog post I talked about using Pelican to create a
blog, this is a bit more about how I got it up and running.&lt;/p&gt;
&lt;div class="section" id="getting-a-domain"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;Getting a Domain&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The most exciting part! Getting a domain! I used &lt;a class="reference external" href="https://www.gandi.net/"&gt;gandi.net&lt;/a&gt;, it was
recommended to me by &lt;a class="reference external" href="http://blog.queze.net/"&gt;Florian&lt;/a&gt; as “awesome, but a bit expensive”. I liked that
they actually explain &lt;a class="reference external" href="https://www.gandi.net/domain/interface"&gt;exactly&lt;/a&gt; what I was getting by registering a domain
through them. Nowhere else I looked was this explicit.&lt;/p&gt;
&lt;p&gt;Once you get your domain you’ll need to set up your &lt;a class="reference external" href="https://en.wikipedia.org/wiki/CNAME"&gt;&lt;span class="caps"&gt;CNAME&lt;/span&gt;&lt;/a&gt; record to forward to
wherever you’re serving your content. I found it pretty interesting that gandi
essentially gives you an &lt;a class="reference external" href="https://en.wikipedia.org/wiki/DNS_zone"&gt;&lt;span class="caps"&gt;DNS&lt;/span&gt; zone&lt;/a&gt; file to modify. I ended up making a few modifications:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Created a patrick subdomain (patrick.cloke.us)&lt;/li&gt;
&lt;li&gt;Redirected the apex domain (cloke.us) to the patrick subdomain&lt;/li&gt;
&lt;li&gt;Redirected the www subdomain to the patrick subdomain&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I also created a few email aliases which forward to the email accounts I already own.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="serving-the-content"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4"&gt;Serving the Content&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span class="caps"&gt;OK&lt;/span&gt;, we have a domain! We have content! How do we actually link them!? I used
&lt;a class="reference external" href="https://pages.github.com/"&gt;GitHub Pages&lt;/a&gt;, cause I’m cheap and don’t like to pay for things. The quick version:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Create a repository that is named &lt;tt class="docutils literal"&gt;&amp;lt;your account &lt;span class="pre"&gt;name&amp;gt;.github.io&lt;/span&gt;&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;Push whatever &lt;span class="caps"&gt;HTML&lt;/span&gt; content you want into the master branch&lt;/li&gt;
&lt;li&gt;Voila it’s available as &amp;lt;your account name&amp;gt;.github.io&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Personally, I store my Pelican code in a separate &lt;a class="reference external" href="https://github.com/clokep/clokep.github.io"&gt;source&lt;/a&gt; branch &lt;a class="footnote-reference" href="#id2" id="id1"&gt;[1]&lt;/a&gt; and use
&lt;a class="reference external" href="https://github.com/davisp/ghp-import"&gt;ghp-import&lt;/a&gt; to actually publish my content. I’ve automated a lot of the tasks by
&lt;a class="reference external" href="https://github.com/clokep/clokep.github.io/blob/source/fabfile.py"&gt;extending&lt;/a&gt; the default &lt;a class="reference external" href="http://www.fabfile.org/"&gt;fabfile.py&lt;/a&gt; that is generated with the quickstart. My
workflow looks something like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;komodo content/new-article.rst
&lt;span class="c1"&gt;# &amp;lt;edit article&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;# &amp;lt;check it out in a browser using fab build/serve/regenerate&amp;gt;&lt;/span&gt;
git add content/ &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; git commit -m &lt;span class="s2"&gt;"Add 'New Article!'."&lt;/span&gt;
fab publish &lt;span class="c1"&gt;# Which runs "ghp-import -p -b master output" underneath!&lt;/span&gt;
git push origin &lt;span class="nb"&gt;source&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;One other thing you’ll need to do is add a &lt;span class="caps"&gt;CNAME&lt;/span&gt; file that has the domain of
your host in it (and only the domain). I found the GitHub documents on this
extremely confusing, but it’s pretty simple:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Create a file called &lt;span class="caps"&gt;CNAME&lt;/span&gt; somewhere you have static files in Pelican (mine is
at content/static/&lt;span class="caps"&gt;CNAME&lt;/span&gt;)&lt;/li&gt;
&lt;li&gt;Add a line to your pelicanconf.py to have this file end up in the root:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Set up static content and output locations.&lt;/span&gt;
&lt;span class="n"&gt;STATIC_PATHS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s1"&gt;'images'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'static/CNAME'&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;EXTRA_PATH_METADATA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;'static/CNAME'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'path'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'CNAME'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It took 10 - 20 minutes for this to “kick in” on GitHub, until that time I had a
404 GitHub page.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="redirect-blogger"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id5"&gt;Redirect Blogger&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is the really fun part. How the hell do we redirect blogger links to
actually go to the new location of each blog post? With some hackery, some luck,
and some magic.&lt;/p&gt;
&lt;p&gt;I found some help in an article about &lt;a class="reference external" href="http://www.labnol.org/internet/switch-from-blogger-to-wordpress/9707/"&gt;switching to WordPress from Blogger&lt;/a&gt; and
modified the template they had there. On the Blogger dashboard, choose
“Template”, scroll to the bottom and click “Revert to Classic Template”. Then
use something like the following template:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;$BlogPageTitle$&amp;gt;&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;MainOrArchivePage&amp;gt;&lt;/span&gt;
                window.location.href = "http://patrick.cloke.us/";
            &lt;span class="nt"&gt;&amp;lt;/MainOrArchivePage&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;Blogger&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;ItemPage&amp;gt;&lt;/span&gt;
                    // This is the full permalink.
                    var permalink = "&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;$BlogItemPermalinkURL$&amp;gt;";
                    // Split up each part by the slash.
                    var parts = permalink.split("/");
                    // Take the last part (the page) and strip off the .html.
                    var slug = parts.slice(-1)[0].slice(0, -5);

                    var article = "http://patrick.cloke.us/posts/&lt;span class="nt"&gt;&amp;lt;BlogDateHeader&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;$BlogDateHeaderDate$&amp;gt;&lt;span class="nt"&gt;&amp;lt;/BlogDateHeader&amp;gt;&lt;/span&gt;/" + slug;
                    window.location.href = article;

                    window.onload = function() {
                        document.getElementById("linkrel").href = article;
                        document.getElementById("simplelink").href = article;
                    }
                &lt;span class="nt"&gt;&amp;lt;/ItemPage&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/Blogger&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;MainPage&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"canonical"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"http://patrick.cloke.us/"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/MainPage&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;Blogger&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;ItemPage&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"linkrel"&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"canonical"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/ItemPage&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/Blogger&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;MainOrArchivePage&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"http://patrick.cloke.us"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;$BlogTitle$&amp;gt;&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/MainOrArchivePage&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;Blogger&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;ItemPage&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"simplelink"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;$BlogItemTitle$&amp;gt;
                    &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
                &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;$BlogItemBody$&amp;gt;
            &lt;span class="nt"&gt;&amp;lt;/ItemPage&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/Blogger&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Obviously you’ll need to change the URLs, but the key parts here are that we’re
generating a &lt;span class="caps"&gt;URL&lt;/span&gt; based on the date and the full article name. The magic comes in
generating the date. The get it in the format I wanted (&lt;span class="caps"&gt;YYYY&lt;/span&gt;/&lt;span class="caps"&gt;MM&lt;/span&gt;/&lt;span class="caps"&gt;DD&lt;/span&gt;) I modified a
the “Date Header Format” in “Settings” &amp;gt; “Language and formatting”. This matches
how I formatted my URLs in my pelicanconf.py. The &lt;tt class="docutils literal"&gt;slug&lt;/tt&gt; that gets generated
needs to match the slug you used in your template so the link will work. (I had
&lt;a class="reference external" href="https://support.google.com/blogger/answer/42095"&gt;some&lt;/a&gt; &lt;a class="reference external" href="http://www.elizabethcastro.com/blogvqj/extras/templatetags.html"&gt;help&lt;/a&gt; in figuring out these template tags.)&lt;/p&gt;
&lt;p&gt;I’d suggest you check the links to all your articles! A couple of the dates were
messed up in mine (the day was off by one, causing the forwarded location to be broken).&lt;/p&gt;
&lt;p&gt;The last thing to do is to redirect the Atom/&lt;span class="caps"&gt;RSS&lt;/span&gt; feed (if anyone is using that).
Go to “Settings” &amp;gt; “Other” &amp;gt; “Post Feed Redirect &lt;span class="caps"&gt;URL&lt;/span&gt;” and set it to your new
Atom feed &lt;span class="caps"&gt;URL&lt;/span&gt; (wherever that might be).&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id2" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"&gt;&lt;/col&gt;&lt;col&gt;&lt;/col&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Pro-tip: You can &lt;a class="reference external" href="https://help.github.com/articles/setting-the-default-branch"&gt;change the “default” branch&lt;/a&gt; of your repository in the
settings page on GitHub.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Patrick Cloke</dc:creator><pubDate>Sun, 06 Jul 2014 18:36:00 -0400</pubDate><guid>tag:patrick.cloke.us,2014-07-06:posts/2014/07/06/new-blog-serving-the-content/</guid><category>blog</category></item><item><title>New Blog</title><link>http://patrick.cloke.us/posts/2014/07/03/new-blog/</link><description>
&lt;p&gt;If you’re reading this you might have noticed that I have a shiny new blog! I
had been pretty disappointed in &lt;a class="reference external" href="https://www.blogger.com/"&gt;Blogger&lt;/a&gt; practically since I started using it.
But it was free, I was a poor college student, etc. I finally managed to get
myself a &lt;a class="reference external" href="http://patrick.cloke.us"&gt;domain name&lt;/a&gt; and set up a more proper blog!&lt;/p&gt;
&lt;p&gt;I was between a few different pieces of blog software (namely &lt;a class="reference external" href="https://wordpress.com/"&gt;WordPress&lt;/a&gt;,
&lt;a class="reference external" href="http://dotclear.org/"&gt;DotClear&lt;/a&gt; and &lt;a class="reference external" href="http://jekyllrb.com/"&gt;Jekyll&lt;/a&gt;) and couldn’t really decide. I loved the idea of the
simplicity of Jekyll, but it’s &lt;a class="reference external" href="http://www.ruby-lang.org/"&gt;Ruby&lt;/a&gt;. (Who’s got time for that?) I wanted
something I could read the code of and understand if necessary. (And it has
been necessary!) My main requirements for blog software were:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Easy to use and set up.&lt;/li&gt;
&lt;li&gt;Free.&lt;/li&gt;
&lt;li&gt;Support for syntax highlighted code blocks. (This was the only “hard” one to
come by.)&lt;/li&gt;
&lt;li&gt;Support for &lt;a class="reference external" href="https://en.wikipedia.org/wiki/RSS"&gt;&lt;span class="caps"&gt;RSS&lt;/span&gt;&lt;/a&gt; feeds.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After a quick Google search for “&lt;a class="reference external" href="https://www.google.com/search?q=jekyll+python"&gt;jekyll python&lt;/a&gt;“, I ended up on &lt;a class="reference external" href="https://hyde.github.io/"&gt;Hyde&lt;/a&gt;. It
seemed alright, but no one seemed to use it. Farther down the page I came across
&lt;a class="reference external" href="http://arunrocks.com/moving-blogs-to-pelican/"&gt;a blog&lt;/a&gt; talking about moving to &lt;a class="reference external" href="http://getpelican.com/"&gt;Pelican&lt;/a&gt;. I was hooked. (Note that I don’t
necessarily agree with all the ideas in that post, it just introduced me to Pelican.)&lt;/p&gt;
&lt;div class="section" id="set-up-pelican"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id1"&gt;Set up Pelican&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;(Since I dislike writing my own descriptions:)&lt;/p&gt;
&lt;blockquote&gt;
“Pelican is a static site generator, written in &lt;a class="reference external" href="http://www.python.org/"&gt;Python&lt;/a&gt;, that requires no
database or server-side logic.”&lt;/blockquote&gt;
&lt;p&gt;Cool! Sounds real simple to use! And it was. Mostly.&lt;/p&gt;
&lt;p&gt;I pretty much followed the &lt;a class="reference external" href="http://docs.getpelican.com/en/3.4.0/quickstart.html"&gt;quickstart&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir -p blog/blog &lt;span class="c1"&gt;# The first blog is to store other repos, etc.&lt;/span&gt;
&lt;span class="nb"&gt;cd&lt;/span&gt; blog/blog
git init &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; git checkout -b &lt;span class="nb"&gt;source&lt;/span&gt; &lt;span class="c1"&gt;# Explained later on.&lt;/span&gt;
brew install pandoc &lt;span class="c1"&gt;# If you're not on Mac you'll need to do something else.&lt;/span&gt;
mkvirtualenv blog
pip install pelican markdown Fabric ghp_import feedparser
pelican-quickstart
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I’ll let you read the rest of the quickstart guide, but it was super quick to
get up and running! (I also referenced another &lt;a class="reference external" href="http://terriyu.info/blog/posts/2013/07/pelican-setup/"&gt;blog post&lt;/a&gt; I found that had some
good information!) I, of course, had no content…but wait I did, it was just
in Blogger!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="importing-content-from-blogger"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id2"&gt;Importing Content from Blogger&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Pelican does not directly support importing from Blogger (&lt;em&gt;Edit: Seems someone
just put up a `pull request`_ to support Blogger natively!&lt;/em&gt;), but it supports
&lt;a class="reference external" href="http://docs.getpelican.com/en/3.4.0/importer.html"&gt;importing from a &lt;span class="caps"&gt;RSS&lt;/span&gt; feed&lt;/a&gt;. The first time I did this it missed a couple of
articles (which I didn’t notice right away), so make sure you bump up the max
amount in the &lt;span class="caps"&gt;URL&lt;/span&gt; like so (this also outputs in the folder “content”):&lt;/p&gt;
&lt;pre class="literal-block"&gt;
pelican-import --feed http://clokep.blogspot.com/feeds/posts/default\?alt\=rss\&amp;amp;max-results\=240 -o content
&lt;/pre&gt;
&lt;p&gt;No import is ever perfect and I had to clean up a bunch of stuff by hand including:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The slugs did not match the ones from Blogger (this is important later on!)&lt;/li&gt;
&lt;li&gt;Some of the dates were strangely wrong&lt;/li&gt;
&lt;li&gt;Some &lt;span class="caps"&gt;HTML&lt;/span&gt; formatting was included (in particular around &amp;lt;code&amp;gt;/&amp;lt;pre&amp;gt; blocks I
had added).&lt;/li&gt;
&lt;li&gt;Some formatting was messed up.&lt;/li&gt;
&lt;li&gt;The (single) image I had on my blog had to be manually downloaded and added.&lt;/li&gt;
&lt;li&gt;I had bolded things I really wanted to be headers. (This is my fault!)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I probably spent a couple of hours cleaning all the reStructuredText content up,
but now I feel that I have a portable set of all of my blog posts, which I’m
pretty happy about!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="customizing-pelican"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;Customizing Pelican&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I tried a few different themes for Pelican, but eventually settled on just using
and modifying the default theme. I, frankly, haven’t tried it on too many
different systems, so hopefully it doesn’t totally break on small screen sizes
or something. I’m not &lt;span class="caps"&gt;HTML&lt;/span&gt; expert, so I’d rather talk about the other stuff I
modified. (Although, if you’re curious, the main elements I &lt;em&gt;did&lt;/em&gt; modify are
adding the sidebar to the left and the organization of the archives page.)&lt;/p&gt;
&lt;p&gt;Blogger has a concept of “labels”, Pelican has a concept of “category” and
“tags”. I &lt;em&gt;hate&lt;/em&gt; this. What’s the difference? Anyway, I wanted to eradicate the
concept of a “category” (and “authors” since I’m the only one on my blog!), so I
added a few things to my pelicanconf.py:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Disable categories.&lt;/span&gt;
&lt;span class="n"&gt;DISPLAY_CATEGORIES_ON_MENU&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="n"&gt;DISPLAY_CATEGORY_ON_ARTICLE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="n"&gt;CATEGORY_FEED_ATOM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;span class="n"&gt;CATEGORY_SAVE_AS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;
&lt;span class="n"&gt;CATEGORIES_SAVE_AS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;

&lt;span class="c1"&gt;# Disable author pages.&lt;/span&gt;
&lt;span class="n"&gt;AUTHOR_SAVE_AS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;
&lt;span class="n"&gt;AUTHORS_SAVE_AS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that &lt;tt class="docutils literal"&gt;DISPLAY_CATEGORY_ON_ARTICLE&lt;/tt&gt; is actually a variable I added and
used in the template to not show categories above the list of tags on each article.&lt;/p&gt;
&lt;p&gt;This is getting pretty long so I’ll leave how I’m actually serving this content
to my next article!&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Patrick Cloke</dc:creator><pubDate>Sun, 06 Jul 2014 18:24:00 -0400</pubDate><guid>tag:patrick.cloke.us,2014-07-03:posts/2014/07/03/new-blog/</guid><category>blog</category></item><item><title>Google Summer of Code 2014</title><link>http://patrick.cloke.us/posts/2014/07/01/google-summer-of-code-2014-file/</link><description>&lt;p&gt;I&amp;#8217;m again mentoring for &lt;a class="reference external" href="https://www.google-melange.com/gsoc/homepage/google/gsoc2014"&gt;Google Summer of Code&lt;/a&gt; 2014, this year my student is
&lt;a class="reference external" href="http://sawrubh.tumblr.com/"&gt;Saurabh Anand&lt;/a&gt; (sawrubh), who has been working on a few related&amp;nbsp;things:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Adding a &lt;a class="reference external" href="https://bugzilla.mozilla.org/show_bug.cgi?id=1024023"&gt;file transfer mechanism for &lt;span class="caps"&gt;XMPP&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Hooking up libpurple&amp;#8217;s file transfer code to&amp;nbsp;Instantbird&lt;/li&gt;
&lt;li&gt;Integrating &lt;a class="reference external" href="https://support.mozilla.org/en-US/kb/filelink-large-attachments"&gt;FileLink&lt;/a&gt; as a fallback to in-protocol file&amp;nbsp;transfers&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sorry for the way overdue post (as it&amp;#8217;s already past mid-term for&amp;nbsp;GSoC)!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Patrick Cloke</dc:creator><pubDate>Tue, 01 Jul 2014 08:03:00 -0400</pubDate><guid>tag:patrick.cloke.us,2014-07-01:posts/2014/07/01/google-summer-of-code-2014-file/</guid><category>community</category><category>GSoC</category></item><item><title>Extending JavaScript Maps (or other built-in objects)</title><link>http://patrick.cloke.us/posts/2014/04/27/extending-javascript-maps-or-other/</link><description>
&lt;p&gt;Finally another technical post, this one is about my adventures in
attempting to extend the built-in &lt;a class="reference external" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map"&gt;Map&lt;/a&gt; object in JavaScript to extend
the functionality. As background, there are two reasons we’d want this:&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;In the chat backend we currently use JavaScript &lt;a class="reference external" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object"&gt;objects&lt;/a&gt; (&lt;tt class="docutils literal"&gt;{}&lt;/tt&gt;) as
hashes/maps to keep track of various things (i.e. there’s a &lt;a class="reference external" href="https://mxr.mozilla.org/comm-central/source/chat/protocols/irc/irc.js#789"&gt;hash of
conversations&lt;/a&gt; which map from conversation name to prplIConversation
objects in the &lt;span class="caps"&gt;IRC&lt;/span&gt; code). Whenever checking to see if something is in
this map we have to use &lt;a class="reference external" href="https://mxr.mozilla.org/comm-central/source/chat/protocols/irc/irc.js#1509"&gt;hasOwnProperty&lt;/a&gt;. This has to be the
&lt;a class="reference external" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty"&gt;version from Object.prototype&lt;/a&gt; in case the map has a conversation
named hasOwnProperty. This is &lt;a class="reference external" href="https://mxr.mozilla.org/comm-central/source/chat/modules/imXPCOMUtils.jsm#166"&gt;super simple code&lt;/a&gt;, but annoying:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// Similar to Object.hasOwnProperty, but doesn't fail if the object&lt;/span&gt;
&lt;span class="c1"&gt;// has a hasOwnProperty property set.&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;hasOwnProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aObject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;aPropertyName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hasOwnProperty&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aObject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;aPropertyName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a class="reference external" href="https://bugzilla.mozilla.org/show_bug.cgi?id=955366"&gt;Replacing these custom objects with a Map&lt;/a&gt; would alleviate this
funky dance.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Frequently in the chat backend we have to “normalize” &lt;a class="footnote-reference" href="#id4" id="id1"&gt;[1]&lt;/a&gt; strings
(e.g. #INsTanTBIrd and #instantbird are the same on &lt;span class="caps"&gt;IRC&lt;/span&gt; &lt;a class="footnote-reference" href="#id5" id="id2"&gt;[2]&lt;/a&gt;). This is
almost always done for sane storage of data received from the network
(or from the user). I figured it’d be great if, instead of having to
&lt;a class="reference external" href="https://mxr.mozilla.org/comm-central/source/chat/protocols/irc/irc.js#1510"&gt;manually&lt;/a&gt; &lt;a class="reference external" href="https://mxr.mozilla.org/comm-central/source/chat/protocols/irc/irc.js#1514"&gt;handle&lt;/a&gt; &lt;a class="reference external" href="https://mxr.mozilla.org/comm-central/source/chat/protocols/irc/irc.js#1528"&gt;this&lt;/a&gt; normalization each time we tried to
access data, the keys were magically normalized when accessing the
data.
(Note that although normalization is generally more complicated, just
consider to be &lt;a class="reference external" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase"&gt;String.prototype.toLowerCase()&lt;/a&gt; for the rest of this post!)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This has been explored before by &lt;a class="reference external" href="http://perfectionkills.com/how-ecmascript-5-still-does-not-allow-to-subclass-an-array/"&gt;others&lt;/a&gt;, but generally in the
context of web sites / cross browser compatibility. Which are concerns
that don’t really limit us for backend code.&lt;/p&gt;
&lt;div class="section" id="goals"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id7"&gt;Goals&lt;/a&gt;&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Replace objects with Maps for safe access. This is pretty easily
fixed by switching all &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;obj["foo"]&lt;/span&gt;&lt;/tt&gt; calls to &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;obj.get("foo")&lt;/span&gt;&lt;/tt&gt; (or the
appropriate other method: set, delete, etc.)&lt;/li&gt;
&lt;li&gt;Automatically “normalize” keys in the some user defined way, e.g.
such that &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;obj.get("foo")&lt;/span&gt;&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;obj.get("FoO")&lt;/span&gt;&lt;/tt&gt; return the same value.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="first-approach-setting-proto-to-map-prototype"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id8"&gt;First Approach (setting __proto__ to Map.prototype)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;My first naive approach was to create an object with &lt;tt class="docutils literal"&gt;__proto__&lt;/tt&gt; set
to Map.prototype and overwrite anything that uses keys to appropriately
call a normalization function.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;NormalizedMap&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;NormalizedMap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;__proto__&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;_normalize&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aStr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;aStr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;

    &lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aStr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_normalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aStr&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
    &lt;span class="nx"&gt;set&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aStr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;aVal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;set&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_normalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aStr&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;aVal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;NormalizedMap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"foo"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Throws TypeError: set method called on incompatible Object&lt;/span&gt;
&lt;span class="nx"&gt;m&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="nx"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// true . . . wat . . .&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This throws an error and does not work. Apparently there are plans to
&lt;a class="reference external" href="https://bugzilla.mozilla.org/show_bug.cgi?id=838540"&gt;support something like this&lt;/a&gt;. The totally fun thing, in my opinion, is
that m is an instance of a Map!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="second-approach-modifying-proto-after-instance-creation"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id9"&gt;Second Approach (modifying __proto__ after instance creation)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;My second approach was to generate a real Map and then override the
&lt;tt class="docutils literal"&gt;__proto__&lt;/tt&gt; to give it the properties I wanted:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;NormalizedMap&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;  &lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;__proto__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;NormalizedMap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;NormalizedMap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;__proto__&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;_normalize&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aStr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;aStr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aStr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_normalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aStr&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
    &lt;span class="nx"&gt;set&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aStr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;aVal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;set&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_normalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aStr&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;aVal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;NormalizedMap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"foo"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"FOO"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 1&lt;/span&gt;
&lt;span class="nx"&gt;m&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="nx"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This actually works! But will &lt;a class="reference external" href="https://bugzilla.mozilla.org/show_bug.cgi?id=963519"&gt;throw a warning&lt;/a&gt; each time it is
created since changing an objects &lt;tt class="docutils literal"&gt;__proto__&lt;/tt&gt; is generally a bad idea.
I also thought of overriding individual methods, but this seemed
cumbersome and would increase the time in the constructor calls. (Which
occur during the start up of each account and is generally a resource
constrained time. No, I didn’t profile this, it just seemed like bad design.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="solution-wrapping-a-map"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id10"&gt;Solution (wrapping a Map)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Finally I settled on the simple solution of just wrapping the Map in a
custom object. Initially I thought this would be frustrating to
re-declare every function (and prone to breakage in the future if new
methods are added), but there’s a nice magic method
&lt;a class="reference external" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/noSuchMethod"&gt;__noSuchMethod__&lt;/a&gt; that fixes this! (Note that this is a
non-standard feature of SpiderMonkey.) &lt;tt class="docutils literal"&gt;__noSuchMethod__&lt;/tt&gt; allows an
object to intercept a call to a non-existent method (and in this case
call that same method on the internal Map object).&lt;/p&gt;
&lt;p&gt;Below is the final version that seems to act magically like a Map when
necessary (e.g. iterating the map works, all functions and properties
exist, the constructor works &lt;a class="footnote-reference" href="#id6" id="id3"&gt;[3]&lt;/a&gt;). I need to thank aleth (another chat
developer) who helped out quite a bit with this (and will ultimately be
reviewing this code)!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// A Map that automatically normalizes keys before accessing the values.&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;NormalizedMap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aNormalizeFunction&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;aIt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aNormalizeFunction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s2"&gt;"function"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="s2"&gt;"NormalizedMap must have a normalize function!"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_normalize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;aNormalizeFunction&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_map&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;([[&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_normalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;aIt&lt;/span&gt;&lt;span class="p"&gt;)]);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;NormalizedMap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;_map&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="c1"&gt;// The function to apply to all keys.&lt;/span&gt;
  &lt;span class="nx"&gt;_normalize&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

  &lt;span class="c1"&gt;// Anything that accepts a key as an input needs to be manually overridden.&lt;/span&gt;
  &lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aKey&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_normalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aKey&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
  &lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aKey&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_normalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aKey&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
  &lt;span class="nx"&gt;has&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aKey&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;has&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_normalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aKey&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
  &lt;span class="nx"&gt;set&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;aValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_normalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aKey&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;aValue&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;

  &lt;span class="c1"&gt;// Properties must be manually forwarded.&lt;/span&gt;
  &lt;span class="nx"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

  &lt;span class="c1"&gt;// Here's where the magic happens. If a method is called that isn't defined&lt;/span&gt;
  &lt;span class="c1"&gt;// here, just pass it to the internal _map object.&lt;/span&gt;
  &lt;span class="nx"&gt;__noSuchMethod__&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;aArgs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;aId&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_map&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;aArgs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The one downside of see of this is that properties must be declared
manually to forward to the internal &lt;tt class="docutils literal"&gt;_map&lt;/tt&gt; object. Maybe there is a
matching &lt;tt class="docutils literal"&gt;__noSuchProperty__&lt;/tt&gt; method I’m missing? Overall, I’m happy
with this solution, but please leave a comment if you can think of an
easier / better way to do this! (Or see a glaring way this will break!)&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id4" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"&gt;&lt;/col&gt;&lt;col&gt;&lt;/col&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;This is always a little bit of a sore subject in &lt;a class="reference external" href="irc://irc.mozilla.org/#instantbird"&gt;#instantbird&lt;/a&gt;
since we’ve had a variety of issues with this over the years. I think
we’ve fixed most of them at this point though!&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id5" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"&gt;&lt;/col&gt;&lt;col&gt;&lt;/col&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;As I’ve &lt;a class="reference external" href="http://patrick.cloke.us/posts/2011/03/08/so-called-irc-specifications/"&gt;written before&lt;/a&gt;, &lt;span class="caps"&gt;IRC&lt;/span&gt; tends to have crazy specifications.
In &lt;span class="caps"&gt;IRC&lt;/span&gt;, &lt;a class="reference external" href="https://tools.ietf.org/html/rfc2812#section-2.2"&gt;the characters of A-Z[]\~ are considered the upper case of a-z{}|^&lt;/a&gt;
(“because of &lt;span class="caps"&gt;IRC&lt;/span&gt;’s Scandinavian origin”). Oh, also this can
change based on an &lt;a class="reference external" href="http://tools.ietf.org/html/draft-brocklesby-irc-isupport-03#section-3.1"&gt;&lt;span class="caps"&gt;ISUPPORT&lt;/span&gt; response&lt;/a&gt; from the server to pure &lt;span class="caps"&gt;ASCII&lt;/span&gt; or
&lt;span class="caps"&gt;RFC&lt;/span&gt; 1459 casemapping (A-Z[]\ map to a-z{}|). It seems like this could
theoretically change at any point on a live server too, although that
would be &lt;span class="caps"&gt;INSANE&lt;/span&gt; and I hope no one ever does that.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id6" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"&gt;&lt;/col&gt;&lt;col&gt;&lt;/col&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id3"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;I wrote some xpcshell tests to ensure these properties work as
expected, but they’re uhh…not up anywhere yet though. Oops.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Patrick Cloke</dc:creator><pubDate>Sun, 27 Apr 2014 13:46:00 -0400</pubDate><guid>tag:patrick.cloke.us,2014-04-27:posts/2014/04/27/extending-javascript-maps-or-other/</guid><category>Instantbird</category><category>programming</category><category>specifications</category><category>Thunderbird</category><category>Wat</category></item><item><title>Community and Volunteers</title><link>http://patrick.cloke.us/posts/2014/04/16/community-and-volunteers/</link><description>&lt;p&gt;It was suggested that I cross-post this from mozilla.dev.planning onto
my blog. This is in reply to a thread entitled &amp;#8220;&lt;a class="reference external" href="https://groups.google.com/forum/#%21topic/mozilla.dev.planning/P8oHKTCWSiQ"&gt;Proposal: Move
Thunderbird and SeaMonkey to mozilla-central&lt;/a&gt;&amp;#8221; about (essentially)
merging comm-central back into mozilla-central. There have been many
technical concerns raised in the thread (that I&amp;#8217;m not going to rehash
here). What I&amp;#8217;m more interested in is the lack of community feeling
there. As Nicholas Nethercote said in that&amp;nbsp;thread:&lt;/p&gt;
&lt;blockquote&gt;
&amp;#8220;I am surprised [&amp;#8230;] by how heartless the discussion has been.&amp;#8221;&lt;/blockquote&gt;
&lt;p&gt;I should note that I did have some help editing this down from my
original post. Turns out I tend to write inflammatory statements that
don&amp;#8217;t help get me point across. Who knew? Anyway, thanks to all of you
who helped me out&amp;nbsp;there!&lt;/p&gt;
&lt;p&gt;My full post is below (with a few links added and plaintext formatting
converted to &lt;span class="caps"&gt;HTML&lt;/span&gt;&amp;nbsp;formatting):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;On Monday, April 14, 2014 4:52:53 &lt;span class="caps"&gt;PM&lt;/span&gt; &lt;span class="caps"&gt;UTC&lt;/span&gt;-4, Nicholas Nethercote&amp;nbsp;wrote:&lt;/p&gt;
&lt;p&gt;&amp;gt; The technical aspects of this decision have been discussed to death,
&amp;gt; so I won&amp;#8217;t say anything about that. I am surprised, however, by how
&amp;gt; heartless the discussion has&amp;nbsp;been.&lt;/p&gt;
&lt;p&gt;I agree, the technical bitshere seem to have solutions suggested by
Joshua and others, but the non-technical parts of this discussion
have left mefeeling disheartened and confused with the Mozilla&amp;nbsp;community.&lt;/p&gt;
&lt;p&gt;I find it ironic/amusing/sad/upsetting that a few threads above this
is a thread entitled &amp;#8220;&lt;a class="reference external" href="https://groups.google.com/forum/#!topic/mozilla.dev.planning/1kbZsYoQcng"&gt;Contributor pathways, engagement points and
bug mentoring&lt;/a&gt;&amp;#8221; while in this thread I see community contributors
being blocked at every&amp;nbsp;turn!&lt;/p&gt;
&lt;p&gt;Here I don&amp;#8217;t see people attempting to foster a community by putting
their best foot forward. I see people trying to get their &lt;strong&gt;job&lt;/strong&gt;
done; with an attitude of &amp;#8220;if this doesn&amp;#8217;t help me, get it outta my
way!&amp;#8221; I don&amp;#8217;t think this is the right way to grow a community. I
don&amp;#8217;t think this is how Mozilla &lt;span class="caps"&gt;HAS&lt;/span&gt; grown it&amp;#8217;s community. I don&amp;#8217;t
think it&amp;#8217;s in line with what Mozilla expects from it&amp;#8217;s community
members (both employees and&amp;nbsp;volunteers!)&lt;/p&gt;
&lt;p&gt;Personally, I dislike the amount of Mozilla &lt;strong&gt;Corporation&lt;/strong&gt; goals
focus in this thread. Can we have a discussion aspart ofa larger
community? Why must it focus on Corporate goals? I&amp;#8217;m not part of the
corporation, I don&amp;#8217;t really care what its goals are or are not. I
care about Mozilla, I care about providing high-quality, free, open
source softwareto improve the experience of the Internet for
everyone. And no, I&amp;#8217;m not talking about Firefox. I&amp;#8217;m talking about
Thunderbird. I understand that Mozilla&amp;#8217;s goals arecurrently Firefox
and Firefox &lt;span class="caps"&gt;OS&lt;/span&gt;, but these are not my personal&amp;nbsp;goals.&lt;/p&gt;
&lt;p&gt;At the Summit I had a few conversations with people about
&amp;#8220;on-boarding&amp;#8221; new employees and getting them to understand how the
community works and that interacting with the community in a
positive manner is an important part of Mozilla. I don&amp;#8217;t remember
the exact context, but part of it wasthat it is important that new
employees don&amp;#8217;t think of it as &amp;#8220;How can I &lt;em&gt;use&lt;/em&gt; the community?&amp;#8221;, for
that implies taking advtange of them, but &amp;#8220;How can I work with the&amp;nbsp;community?&amp;#8221;&lt;/p&gt;
&lt;p&gt;Please don&amp;#8217;t see this as an &amp;#8220;employees vs. volunteers&amp;#8221; argument. I
believe that I&amp;#8217;m expected to live up to these same goals. If I, as a
volunteer, can help an employee achieve his goals; I&amp;#8217;m
&lt;span class="strike"&gt;more than willing&lt;/span&gt;, no&amp;#8230;I&amp;#8217;m &lt;span class="caps"&gt;EXPECTED&lt;/span&gt; to do that. I think
this is a two-way relationship that must be fostered. It has seemed
to me that over the past couple of years that I&amp;#8217;ve been hanging
around here there&amp;#8217;s been less and less focus on the community and
more and more on the&amp;nbsp;Corporation.&lt;/p&gt;
&lt;p&gt;I understand Thunderbird and SeaMonkey may not be important to you,
but it is important tome! (And otherswho contribute
totheThunderbird/SeaMonkey community, including employees who
contribute on their spare time.) When Mozilla stopped directly
supporting development of Thunderbird it was widely announced that
&amp;#8220;Thunderbird is dead!&amp;#8221;. We, as part of the Mozilla community, have
been fighting to prove this wrong.Could you please respect our
efforts? Merging c-c into m-c will help us focus our efforts on
building a great product instead of spending significant effort on
keeping a dying one on life-support. (And prove to all that
&amp;#8220;Thunderbird is dead!&amp;#8221; was just a sensational&amp;nbsp;headline.)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I don&amp;#8217;t have much else to say beyond that (besides thanks for reading
this&amp;nbsp;far!)&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Patrick Cloke</dc:creator><pubDate>Wed, 16 Apr 2014 12:34:00 -0400</pubDate><guid>tag:patrick.cloke.us,2014-04-16:posts/2014/04/16/community-and-volunteers/</guid><category>community</category><category>crosspost</category><category>Mozilla</category><category>Thunderbird</category></item><item><title>GSoc Lessons: Part Deux: The Arms Race</title><link>http://patrick.cloke.us/posts/2013/12/04/gsoc-lessons-part-deux-arms-race/</link><description>&lt;p&gt;This post title might be a little excessive, but I&amp;#8217;ll blame &lt;a class="reference external" href="http://en.wikipedia.org/wiki/The_Sum_of_All_Fears_%28film%29"&gt;The Sum
of All Fears&lt;/a&gt; that I was watching last night. This is the second part
of a set of posts about ideas I heard at the Google Summer of Code 2013
Mentor Summit (you can read &lt;a class="reference external" href="http://patrick.cloke.us/posts/2013/12/02/gsoc-lessons-part-1-application-period/"&gt;the first part about the application
process&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;This will explore an interesting anecdote I heard about the
interaction between applicants from another organization that, on
reflection, seemed to resonate somewhat with what I had seen in my
corner of the Mozilla&amp;nbsp;community.&lt;/p&gt;
&lt;p&gt;The organization these students were applying to required patches to
be fixed for a student&amp;#8217;s application to be accepted (as discussed in my
previous post). For a particular project there existed multiple highly
motivated and skilled students, but only one slot. Thus, a &amp;#8220;patch race&amp;#8221;
of sorts occurred where the students competed by continually providing
more patches that were increasingly complex. (Note that this wasn&amp;#8217;t a in
response to a challenge from community members, it was a spontaneous
situation.) Once a single student started to submit extra patches the
other students felt they must also submit more patches to be considered
equal/superior (hence my allusion to an &amp;#8220;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Arms_race#Nuclear_arms_race"&gt;arms race&lt;/a&gt;&amp;#8220;).
Interestingly, they would also sometimes work on the same bug in a sort
of race to see who could fix it&amp;nbsp;first.&lt;/p&gt;
&lt;p&gt;There&amp;#8217;s a couple things I took away from&amp;nbsp;this:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Great, the project just had a lot of things&amp;nbsp;fixed!&lt;/li&gt;
&lt;li&gt;The students were investing escalating amounts of time &lt;em&gt;during the
application phase&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;The students were not working in an open&amp;nbsp;manner.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I won&amp;#8217;t really expand much more about the first point, it&amp;#8217;s always
good to fix&amp;nbsp;things.&lt;/p&gt;
&lt;p&gt;Although submitting patches might showcase a student&amp;#8217;s skill, it also
relates to how much time the student is willing and able to put into the
application period. This, in particular, matters since different areas
of the world end their school year at different times. A student that
has already finished his semester during the application period may have
a lot of free time to attempt to get a GSoC slot (but will most likely
not have as much time during the actual summer!) This something that
mentors should keep in mind while reviewing&amp;nbsp;applications.&lt;/p&gt;
&lt;p&gt;A downside of increasing amounts of time invested is that the
rejection is that much harder for both the mentor (especially if the
student is now part of the community!), as well as for the student who
has now vested a large amount of time in the&amp;nbsp;project.&lt;/p&gt;
&lt;p&gt;The realization that actually upset me, however, is that these
students were not working in an open manner! Instead of collaborating,
they were competing! To me, this would set off a very poor tone for the
rest of GSoC. In fact, one of the biggest challenges I&amp;#8217;ve had with GSoC
students is getting them to work in the open (i.e. &amp;#8220;show me the code&amp;#8221;,
anyone in &lt;a class="reference external" href="irc://irc.mozilla.org/#instantbird"&gt;#instantbird&lt;/a&gt; is probably tired of hearing me say&amp;nbsp;that).&lt;/p&gt;
&lt;p&gt;At this point you &lt;em&gt;might&lt;/em&gt; think this is a hypothetical case I made up!
Upon letting it sink in and reflecting on it&amp;#8230;I realized I had actually
seen similar situations during the application periods I&amp;#8217;ve been
involved with. This year, we found a bug in Instantbird&amp;#8217;s &lt;span class="caps"&gt;IRC&lt;/span&gt; code (&lt;span class="caps"&gt;CTCP&lt;/span&gt;
quoting and dequoting); after referencing some &lt;a class="reference external" href="http://patrick.cloke.us/posts/2011/03/08/so-called-irc-specifications/"&gt;specifications&lt;/a&gt;, I was
pretty quickly able to figure out the vague areas where people should
look for a fix. A couple of GSoC students in the room started looking
into it and exhibited a greatly reduced form of the behavior I discussed
above. The students were sharing information, but were not comfortable
sharing code. Unfortunately, this led to some very vague questions which
I was unable to answer (or answered incorrectly) and led to me coining
my catchphrase from&amp;nbsp;above.&lt;/p&gt;
&lt;p&gt;I by no means think this reflects poorly on our students! I think this
is some what natural and expected for most students unfamiliar with open
development. (Extrapolating from my experiences in school&amp;#8230;) Students
generally work individually (or in small groups) on projects and are
directly competing for grades (at least if the course is graded on a
curve). This would foster a sense of competition as opposed to
cooperation! Luckily the students working with us understood (with very
little prompting, I might add!) that we&amp;#8217;d prefer they work together and
help each other. We were able to successfully fix the dequoting bug
(which then caused a bug in the quoting code to be&amp;nbsp;visible&amp;#8230;sigh&amp;#8230;).&lt;/p&gt;
&lt;p&gt;My &lt;strong&gt;short take away&lt;/strong&gt; from all this: remember that students are not
yet a community and they&amp;#8217;re competing with each other until they&amp;#8217;ve been
accepted. (And that they&amp;#8217;re used to competing, e.g. homework and exams,
not collaborating!) I don&amp;#8217;t really know whether I feel the above
situation is good or bad, but it&amp;#8217;s certainly an interesting effect from
the way the GSoC process&amp;nbsp;works.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Patrick Cloke</dc:creator><pubDate>Wed, 04 Dec 2013 09:17:00 -0500</pubDate><guid>tag:patrick.cloke.us,2013-12-04:posts/2013/12/04/gsoc-lessons-part-deux-arms-race/</guid><category>community</category><category>GSoC</category><category>Mozilla</category></item><item><title>GSoC Lessons: Part 1: Application Period</title><link>http://patrick.cloke.us/posts/2013/12/02/gsoc-lessons-part-1-application-period/</link><description>&lt;p&gt;I briefly talked about &lt;a class="reference external" href="http://patrick.cloke.us/posts/2013/10/20/google-summer-of-code-mentor-summit-2013/"&gt;my experiences&lt;/a&gt; at the Google Summer of Code
2013 Mentor Summit. I&amp;#8217;ve been pretty remiss in sharing what was actually
discussed there and for that I must apologize! This will hopefully be
one of a few posts about what I learned and discussed at the&amp;nbsp;Summit.&lt;/p&gt;
&lt;p&gt;The first part I&amp;#8217;d like to talk about is the application period:
welcoming students, requirements for student applications, etc. Much of
what I say on here is just ideas I&amp;#8217;ve heard other organizations
implement (with my personal opinion on them, please don&amp;#8217;t think this
represents what Mozilla is suggesting students do, or even what I&amp;#8217;m
suggesting Mozilla should ask students to&amp;nbsp;do!)&lt;/p&gt;
&lt;p&gt;I had many separate conversations about what is required for an
application to be accepted. It seems that Mozilla is actually on the
side of one of the easier organizations to apply to. We don&amp;#8217;t (to my
knowledge) require that students have contributed at all to the
community beforehand. It is possible that some smaller communities
inside of Mozilla require more than just an application, but there does
not seem to be any rule across Mozilla. I said I wouldn&amp;#8217;t offer my
opinion above&amp;#8230;but I lied: I think Mozilla should make it clearer to
applicants what is expected of them before the&amp;nbsp;application.&lt;/p&gt;
&lt;p&gt;There seem to be a variety of things different organizations &amp;#8220;require&amp;#8221;
before accepting a student application, for&amp;nbsp;example:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A patch / pull&amp;nbsp;request&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;IRC&lt;/span&gt; / email involvement /&amp;nbsp;idling&lt;/li&gt;
&lt;li&gt;File a bug (I mean this in the &amp;#8220;Mozilla&amp;#8221; sense: an actual bug, a
feature request,&amp;nbsp;etc.)&lt;/li&gt;
&lt;li&gt;Fix a bug / make a&amp;nbsp;commit&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I think all of these have pros and cons and making any a hard and fast
rule would probably be a bad idea. Personally for Instantbird, we
greatly encourage students to idle on &lt;span class="caps"&gt;IRC&lt;/span&gt; and get to know us; and to fix
a minor bug or two or three. What I&amp;#8217;m always looking for is: use,
passion, and&amp;nbsp;skill.&lt;/p&gt;
&lt;p&gt;Asking for a &lt;strong&gt;patch / pull request&lt;/strong&gt; (I include these together since
they really just depend on how an organization accepts changes) can be a
bit intimidating for a new user. I think this can be a pretty rough
thing to ask for new contributors that might not want to share their
work publicly with a large group of people (on a mailing list, public
bug tracker, etc.) where they might be wrong. Even after being part of
the community, I find that GSoC students are often very unwilling to
publicly share code unless it&amp;#8217;s &amp;#8220;perfect&amp;#8221;, but I digress. Anyway, if
you&amp;#8217;re considering &amp;#8220;requiring&amp;#8221; this, I think it should be pretty clear
that this changeset doesn&amp;#8217;t need to be &lt;em&gt;perfect&lt;/em&gt;, it just needs to show
that the student is able to read code, understand a bug report, provide
a fix and test&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;I think it&amp;#8217;s perfect reasonable to ask students to &lt;strong&gt;idle on &lt;span class="caps"&gt;IRC&lt;/span&gt; and
join mailing lists&lt;/strong&gt;. They should definitely be trying to understand the
community before attempting to join it. It isn&amp;#8217;t just a matter of if the
community thinks the student would be a good fit, but also the student
must ensure they can fit into the&amp;nbsp;community.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Filing a bug&lt;/strong&gt; is a great way for a student to show a few different
things: they&amp;#8217;ve used your software; they&amp;#8217;ve used your software enough to
find a bug in it (and there most likely is one!); they&amp;#8217;re able to
express themselves in a clear and concise matter. If you&amp;#8217;re lucky
they&amp;#8217;ll find something that actually annoys them and fix it&amp;nbsp;themselves!&lt;/p&gt;
&lt;p&gt;I have &lt;strong&gt;fix a bug&lt;/strong&gt; listed last. You might ask how this differs from
submitting a patch&amp;#8230;and it does! Fixing a bug requires a patch to go
through whatever review process your project uses, but builds upon just
submitting a patch. My thoughts on this are pretty similar to just
submitting a patch, but it depends on how large the bug&amp;nbsp;is.&lt;/p&gt;
&lt;p&gt;Something I found interesting is that almost everyone I talked to
didn&amp;#8217;t treat their GSoC students any differently than they would treat a
new contributor to their project. They still had to prove they were
worthy of commit access, etc. Is there anything else you ask of your
students before they apply to GSoC? I&amp;#8217;d love to hear&amp;nbsp;it!&lt;/p&gt;
&lt;p&gt;Some other topics I&amp;#8217;ll hopefully find some time to write about
include: community lessons, and handling a failing student. The
community one will be very not-GSoC focused and could apply to just
trying to incorporate new contributors&amp;#8230;but I&amp;#8217;ll include it in this&amp;nbsp;series.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Patrick Cloke</dc:creator><pubDate>Mon, 02 Dec 2013 20:55:00 -0500</pubDate><guid>tag:patrick.cloke.us,2013-12-02:posts/2013/12/02/gsoc-lessons-part-1-application-period/</guid><category>community</category><category>GSoC</category><category>Mozilla</category></item><item><title>Google Summer of Code Mentor Summit 2013</title><link>http://patrick.cloke.us/posts/2013/10/20/google-summer-of-code-mentor-summit-2013/</link><description>&lt;p&gt;Not only was I lucky enough to mentor a great student for this year&amp;#8217;s
Google Summer of Code, but Mozilla asked me to represent them at the
Google Summer of Code Mentor Summit!&amp;nbsp; This was located at Google&amp;#8217;s
offices in Mountain View, California this past weekend (Friday, Oct.
18th - Sunday, Oct. 20th,&amp;nbsp;2013).&lt;/p&gt;
&lt;p&gt;Before actually heading over to the Summit, &lt;a class="reference external" href="http://mykzilla.org/"&gt;Myk Melez&lt;/a&gt; and &lt;a class="reference external" href="http://nickdesaulniers.github.io/"&gt;Nick
Desaulniers&lt;/a&gt; were kind enough to show me around the Mozilla Mountain
View office!&amp;nbsp; (Thanks to Daniel Holbert for setting that&amp;nbsp;up!)&lt;/p&gt;
&lt;p&gt;The GSoC Mentor Summit is run as an &amp;#8220;unconference&amp;#8221;, the open sessions
were chosen by conference attendees and run as discussions with no
keynote speakers.&amp;nbsp; This was an interesting experience and how good each
session was varied quite a bit by who was taking part in the discussion,
but overall it was great to hear the experiences of other projects with
their GSoC students, as well as to hear about lots of projects I had
never heard of before!&amp;nbsp; In general the session I attended were about
community building and managing GSoC students, I took lots of notes and
will digest all of this in further detail at some&amp;nbsp;point.&lt;/p&gt;
&lt;p&gt;I was able to meet lots of great people from different projects, just
a few of which were: &lt;a class="reference external" href="http://pidgin.im/"&gt;Pidgin&lt;/a&gt;, &lt;a class="reference external" href="http://www.debian.org/"&gt;Debian&lt;/a&gt;, &lt;a class="reference external" href="http://buildbot.net/"&gt;Buildbot&lt;/a&gt;, the &lt;a class="reference external" href="http://www.opendmx.net/"&gt;Open
Lighting Project&lt;/a&gt;, the &lt;a class="reference external" href="https://www.torproject.org/"&gt;Tor Project&lt;/a&gt;, &lt;a class="reference external" href="https://www.phpbb.com/%E2%80%8E"&gt;phpBB&lt;/a&gt;, etc.&amp;nbsp; Unfortunately
being from Mozilla, most people already know what you do&amp;#8230;or they think
you do at least!&amp;nbsp; Many people were surprised when I said I work on
Thunderbird and Instantbird.&amp;nbsp; I heard &amp;#8220;Thunderbird is dead&amp;#8221; at least
twenty times, which was quite disappointing that those in the open
source community don&amp;#8217;t even understand the current status of
Thunderbird.&amp;nbsp; Many were happy to hear that it is still being maintained
and developed by the community, however.&amp;nbsp; I even had some people thank
me (which I don&amp;#8217;t really deserve) for helping to continue maintain
Thunderbird!&amp;nbsp; It was great to hear things like this at the Mozilla
Summit, but it was really invigorating to hear people outside of the
Mozilla community excited that their favorite email client was still
being&amp;nbsp;developed.&lt;/p&gt;
&lt;p&gt;People were further surprised to hear that Thunderbird now includes
instant messaging / chat (since Thunderbird 15 or 17) and that there is
a Gecko based instant messaging client: Instantbird.&amp;nbsp; It seemed like
some people were excited by this and hopefully they&amp;#8217;ll try it&amp;nbsp;out!&lt;/p&gt;
&lt;p&gt;Anyway, I&amp;#8217;ve gone a little off-topic, but overall the Mentor Summit
was great and I&amp;#8217;d like to thank both Mozilla and Google for giving me
this opportunity.&amp;nbsp; If I find any really great gems in my notes I&amp;#8217;ll
write further blog posts about&amp;nbsp;them.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Patrick Cloke</dc:creator><pubDate>Sun, 20 Oct 2013 22:18:00 -0400</pubDate><guid>tag:patrick.cloke.us,2013-10-20:posts/2013/10/20/google-summer-of-code-mentor-summit-2013/</guid><category>Google</category><category>GSoC</category><category>Mozilla</category></item><item><title>Yahoo Protocol Google Summer of Code Round-up</title><link>http://patrick.cloke.us/posts/2013/10/06/yahoo-protocol-google-summer-of-code/</link><description>&lt;p&gt;I have to apologize to my student, &lt;a class="reference external" href="http://phaseshiftsoftware.com/blog/"&gt;Quentin&lt;/a&gt; (aka qheaden on &lt;span class="caps"&gt;IRC&lt;/span&gt;),
for taking so long to write this&amp;#8230;but anyway: Google Summer of Code
2013 is over!&amp;nbsp; Quentin has done a great job working at implementing the
Yahoo Protocol for Instantbird (and Thunderbird) in JavaScript
(henceforth called &amp;#8220;&lt;span class="caps"&gt;JS&lt;/span&gt;-Yahoo&amp;#8221;).&amp;nbsp; It&amp;#8217;s at the point where it has mostly
reached feature-parity with the libpurple plug-in.&amp;nbsp; Before &lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=2135"&gt;turning this
on as default&lt;/a&gt; there are a few minor bugs that still need to be fixed,
but most of them have patches that just need another couple&amp;nbsp;iterations.&lt;/p&gt;
&lt;div class="section" id="where-do-we-go-from-here"&gt;
&lt;h2&gt;Where do we go from&amp;nbsp;here?&lt;/h2&gt;
&lt;p&gt;Once the last few bugs are fixed we&amp;#8217;ll enable Yahoo by default in the nightly
builds and, assuming we have no issues, it will be enabled by default in the
upcoming Instantbird 1.5. If there are no major issues in 1.5, we&amp;#8217;ll remove the
libpurple Yahoo implementation for Instantbird&amp;nbsp;1.next.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-do-i-try-this-now"&gt;
&lt;h2&gt;How do I try this&amp;nbsp;now?!&lt;/h2&gt;
&lt;p&gt;You can already easily enable &lt;span class="caps"&gt;JS&lt;/span&gt;-Yahoo in &lt;a class="reference external" href="http://nightly.instantbird.im/"&gt;Instantbird nightly builds&lt;/a&gt;:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Type /about config in a conversation tab&amp;#8217;s&amp;nbsp;textbox&lt;/li&gt;
&lt;li&gt;Type &amp;#8220;forcePurple&amp;#8221; in the search&amp;nbsp;box&lt;/li&gt;
&lt;li&gt;Remove &amp;#8220;prpl-yahoo&amp;#8221; and &amp;#8220;prpl-yahoojp&amp;#8221; from this comma separated list
of values (you can also remove prpl-jabber if you want to always use
the &lt;span class="caps"&gt;JS&lt;/span&gt;-&lt;span class="caps"&gt;XMPP&lt;/span&gt; implementation from GSoC 2011! Note that this doesn&amp;#8217;t
support &lt;a class="reference external" href="https://bugzilla.mozilla.org/show_bug.cgi?id=14328"&gt;&lt;span class="caps"&gt;DNS&lt;/span&gt; &lt;span class="caps"&gt;SRV&lt;/span&gt;&lt;/a&gt;,&amp;nbsp;however.)&lt;/li&gt;
&lt;li&gt;Restart&amp;nbsp;Instantbird!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You should now be using the &lt;span class="caps"&gt;JS&lt;/span&gt;-Yahoo protocol.&amp;nbsp; Hopefully you don&amp;#8217;t
notice anything different, but &lt;a class="reference external" href="https://bugzilla.instantbird.org/"&gt;&lt;span class="caps"&gt;PLEASE&lt;/span&gt; file bugs&lt;/a&gt; if you see any&amp;nbsp;issues.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-come-i-can-t-use-this-in-thunderbird"&gt;
&lt;h2&gt;How come I can&amp;#8217;t use this in&amp;nbsp;Thunderbird?!&lt;/h2&gt;
&lt;p&gt;Because Instantbird and comm-central development don&amp;#8217;t happen in the same
Mercurial repository.&amp;nbsp; I&amp;#8217;m working on &lt;a class="reference external" href="https://bugzilla.mozilla.org/show_bug.cgi?id=920801"&gt;syncing the chat/ folder of these
repositories&lt;/a&gt; currently and &lt;span class="caps"&gt;JS&lt;/span&gt;-Yahoo should be in Daily soon to be
included in the next Thunderbird release (i.e. Thunderbird&amp;nbsp;31).&lt;/p&gt;
&lt;p&gt;The whole Instantbird community has been super happy with the progress
Quentin made and we hope that Quentin has learned a lot! Thanks for a
great summer qheaden and hopefully we&amp;#8217;ll see you around&amp;nbsp;still!&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Patrick Cloke</dc:creator><pubDate>Sun, 06 Oct 2013 09:18:00 -0400</pubDate><guid>tag:patrick.cloke.us,2013-10-06:posts/2013/10/06/yahoo-protocol-google-summer-of-code/</guid><category>chat</category><category>GSoC</category><category>instant messaging</category><category>Instantbird</category><category>Yahoo</category></item><item><title>Mentoring Google Summer of Code 2013</title><link>http://patrick.cloke.us/posts/2013/06/28/mentoring-google-summer-of-code-2013/</link><description>&lt;p&gt;I&amp;#8217;m officially a mentor this year for &lt;a class="reference external" href="http://www.google-melange.com/gsoc/homepage/google/gsoc2013"&gt;2013&amp;#8217;s Google Summer of Code&lt;/a&gt;.
I&amp;#8217;m a bit late on posting this, but oh well! My student this year is
&lt;a class="reference external" href="http://phaseshiftsoftware.com/"&gt;Quentin Headen&lt;/a&gt; who is &lt;a class="reference external" href="http://www.google-melange.com/gsoc/project/google/gsoc2013/qheaden/26001"&gt;working on&lt;/a&gt; a &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Yahoo!_Messenger_Protocol"&gt;Yahoo! Messenger protocol&lt;/a&gt;
for the Instantbird chat/ backend (so it&amp;#8217;ll also be usable via
Thunderbird). You can see &lt;a class="reference external" href="http://phaseshiftsoftware.com/blog/category/gsoc-2013-logs/"&gt;an account of his trials, successes and
trepidations&lt;/a&gt; (&lt;a class="reference external" href="http://phaseshiftsoftware.com/blog/category/gsoc-2013-logs/feed/"&gt;&lt;span class="caps"&gt;RSS&lt;/span&gt;&lt;/a&gt;) or follow his &lt;a class="reference external" href="https://bitbucket.org/qheaden/instantbird-gsoc-2013"&gt;code repository&lt;/a&gt;. He&amp;#8217;s made
great progress so far and is able to connect, download all the buddies
and start private conversations! Not too bad for a few weeks of work!
We&amp;#8217;ve been keeping a &lt;a class="reference external" href="https://etherpad.mozilla.org/ELTNA6O44F"&gt;&lt;span class="caps"&gt;TODO&lt;/span&gt; list&lt;/a&gt; of things to be supported, please
don&amp;#8217;t edit it without discussing it with us&amp;nbsp;first.&lt;/p&gt;
&lt;p&gt;Our hope is to get this checked into Instantbird by the end of summer
and run it in parallel (behind an &lt;a class="reference external" href="about:config"&gt;about:config&lt;/a&gt; preference) with the
current libpurple Yahoo implementation. Once we&amp;#8217;re satisified that it
has feature parity we&amp;#8217;ll remove the libpurple version and enable this by&amp;nbsp;default!&lt;/p&gt;
&lt;p&gt;Instantbird is also supporting two other&amp;nbsp;projects:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The &lt;a class="reference external" href="http://www.google-melange.com/gsoc/project/google/gsoc2013/nhnt11/7001"&gt;&amp;#8220;Awesometab&amp;#8221;&lt;/a&gt; is being done by &lt;a class="reference external" href="http://awesometab.blogspot.com/"&gt;Nihanth Subramanya&lt;/a&gt;
(&lt;a class="reference external" href="http://awesometab.blogspot.com/feeds/posts/default?alt=rss"&gt;&lt;span class="caps"&gt;RSS&lt;/span&gt;&lt;/a&gt;)
and being mentored by Benedikt Pfeifer, his code is &lt;a class="reference external" href="https://bitbucket.org/nhnt11/instantbird-addons"&gt;available&lt;/a&gt; and
some has already been &lt;a class="reference external" href="http://hg.instantbird.org/instantbird/rev/55009d68c4ec"&gt;checked&lt;/a&gt; &lt;a class="reference external" href="http://hg.instantbird.org/instantbird/rev/46ee5c836e48"&gt;into&lt;/a&gt; &lt;a class="reference external" href="http://hg.instantbird.org/instantbird/rev/52401d522970"&gt;Instantbird&lt;/a&gt; &lt;a class="reference external" href="http://hg.instantbird.org/instantbird/rev/ea36babac4be"&gt;nightlies&lt;/a&gt;!&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.google-melange.com/gsoc/project/google/gsoc2013/atuljangra/68001"&gt;FileLinks in &lt;span class="caps"&gt;IM&lt;/span&gt;&lt;/a&gt; is being worked on by &lt;a class="reference external" href="http://atuljangra.tumblr.com/"&gt;Atul Jangra&lt;/a&gt; (or &lt;a class="reference external" href="http://gsoc-mozilla.tumblr.com/"&gt;maybe&lt;/a&gt;)
(&lt;a class="reference external" href="http://atuljangra.tumblr.com/rss"&gt;&lt;span class="caps"&gt;RSS&lt;/span&gt;&lt;/a&gt; /
&lt;a class="reference external" href="http://gsoc-mozilla.tumblr.com/rss"&gt;&lt;span class="caps"&gt;RSS&lt;/span&gt;&lt;/a&gt;) and being mentored by
Florian Quèze, check out the &lt;a class="reference external" href="https://bitbucket.org/atuljangra/instantbird-gsoc-2013"&gt;repository&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can find any of us in #instantbird on irc.mozilla.org, my nick is
clokep, Quentin&amp;#8217;s is qheaden, Nihanth&amp;#8217;s: nhnt11, Atul&amp;#8217;s: atuljangra,
Benedikt goes by Mic and Florian goes by something starting with&amp;nbsp;&amp;#8220;flo&amp;#8221;.&lt;/p&gt;
&lt;p&gt;Thanks also go out to Mozilla for letting us participate in Google
Summer of Code with them again! You can see all of the accepted projects
in &lt;a class="reference external" href="http://blog.gerv.net/2013/06/gsoc-2013-project-list/"&gt;Gerv&amp;#8217;s blogpost&lt;/a&gt;.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Patrick Cloke</dc:creator><pubDate>Fri, 28 Jun 2013 18:05:00 -0400</pubDate><guid>tag:patrick.cloke.us,2013-06-28:posts/2013/06/28/mentoring-google-summer-of-code-2013/</guid><category>chat</category><category>GSoC</category><category>instant messaging</category><category>Instantbird</category><category>Yahoo</category></item><item><title>Instantbird 1.4 Released!</title><link>http://patrick.cloke.us/posts/2013/05/20/instantbird-14-released/</link><description>&lt;p&gt;After a bunch of l10n build problems, we&amp;#8217;ve finally released
Instantbird 1.4, which includes updates to libpurple 2.10.7 and Mozilla
20.&amp;nbsp; In particular this&amp;nbsp;includes:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Updated Twitter code that uses v1.1 of their &lt;span class="caps"&gt;API&lt;/span&gt; (v1.0 will be
disabled on June 11th,&amp;nbsp;2013).&lt;/li&gt;
&lt;li&gt;Better character counter for Twitter (it now takes into account if
URLs are&amp;nbsp;embedded).&lt;/li&gt;
&lt;li&gt;Updated log viewer which organizes logs by date (and nests them by
week, month,&amp;nbsp;etc.)&lt;/li&gt;
&lt;li&gt;Better support for &lt;span class="caps"&gt;IRC&lt;/span&gt;&amp;nbsp;bouncers.&lt;/li&gt;
&lt;li&gt;Support for overriding self-signed/invalid/out-of-date certificates
for &lt;span class="caps"&gt;IRC&lt;/span&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you&amp;#8217;ve been using some other instant messaging client (e.g. Pidgin
or Adium); I&amp;#8217;d highly suggest giving Instantbird a try, especially if
you also go on &lt;span class="caps"&gt;IRC&lt;/span&gt;. Instantbird has great &lt;span class="caps"&gt;IRC&lt;/span&gt; support! (And&amp;#8230;if you do
have issues, feel free to ping me in #instantbird on irc.mozilla.org and
let me know what your issue&amp;nbsp;is.)&lt;/p&gt;
&lt;p&gt;You can download it &lt;a class="reference external" href="http://www.instantbird.com/download-all.html"&gt;here&lt;/a&gt;, or view the full &lt;a class="reference external" href="http://www.instantbird.com/release-notes.html"&gt;release notes&lt;/a&gt;.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Patrick Cloke</dc:creator><pubDate>Mon, 20 May 2013 16:45:00 -0400</pubDate><guid>tag:patrick.cloke.us,2013-05-20:posts/2013/05/20/instantbird-14-released/</guid><category>Instantbird</category></item><item><title>JavaScript typed arrays pain</title><link>http://patrick.cloke.us/posts/2012/11/28/javascript-typed-arrays-pain/</link><description>&lt;p&gt;If you&amp;#8217;ve ever tried to deal with binary data in JavaScript you know
it isn&amp;#8217;t much fun and you usually resort to using strings lots of
charCodeAt and related functions.&amp;nbsp; &lt;a class="reference external" href="https://developer.mozilla.org/en-US/docs/JavaScript_typed_arrays"&gt;Typed arrays&lt;/a&gt; are supposed to solve
this though!&amp;nbsp; The typed array &lt;span class="caps"&gt;API&lt;/span&gt; consists of creating a buffer of bytes
(called an &lt;a class="reference external" href="https://developer.mozilla.org/en-US/docs/JavaScript_typed_arrays/ArrayBuffer"&gt;ArrayBuffer&lt;/a&gt;) and then manipulating those bytes via
different views (&lt;a class="reference external" href="https://developer.mozilla.org/en-US/docs/JavaScript_typed_arrays/ArrayBufferView"&gt;ArrayBufferView&lt;/a&gt;s).&amp;nbsp; You can have multiple views of
the same buffer, starting at different offsets, of different lengths and
types&amp;#8230;which is all neat from a technical point of view, but is it
really useful?&amp;nbsp; It is kind of nice working with the views as if they
were normal arrays&amp;nbsp;though.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve been playing with these ArrayBuffers quite a bit as I&amp;#8217;m working
on an implementation of the &lt;a class="reference external" href="http://en.wikipedia.org/wiki/OSCAR_protocol"&gt;&lt;span class="caps"&gt;OSCAR&lt;/span&gt; protocol&lt;/a&gt; (used for &lt;a class="reference external" href="http://en.wikipedia.org/wiki/AOL_Instant_Messenger"&gt;&lt;span class="caps"&gt;AOL&lt;/span&gt; Instant
Messenger&lt;/a&gt; and &lt;a class="reference external" href="http://en.wikipedia.org/wiki/ICQ"&gt;&lt;span class="caps"&gt;ICQ&lt;/span&gt;&lt;/a&gt;) in the chat backend (for Instantbird /
Thunderbird).&amp;nbsp; (As an aside, the &lt;span class="caps"&gt;OSCAR&lt;/span&gt; protocol Wikipedia page has
surprisingly good documentation of some of the underlying data
structures of the protocol&amp;#8230;)&amp;nbsp; I started by writing some test code
using ArrayBuffers and views, which have been around a while: since
Gecko 2.0 in fact!&amp;nbsp; I quickly ran into some tedious issues with
repetitive code such&amp;nbsp;as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt; * A TLV (Type, Length and Value) data structure:&lt;/span&gt;
&lt;span class="cm"&gt; *  Unsigned Short  type    Describes what the value represents.&lt;/span&gt;
&lt;span class="cm"&gt; *  Unsigned Short  length  The length of the data block.&lt;/span&gt;
&lt;span class="cm"&gt; *  Bytes           value   The raw payload.&lt;/span&gt;
&lt;span class="cm"&gt; *&lt;/span&gt;
&lt;span class="cm"&gt; * The overall length of a TlvBlock is length + 4.&lt;/span&gt;
&lt;span class="cm"&gt; *&lt;/span&gt;
&lt;span class="cm"&gt; * The inputs to this are:&lt;/span&gt;
&lt;span class="cm"&gt; *  aType    The type of the TLV Block.&lt;/span&gt;
&lt;span class="cm"&gt; *  aValue   An ArrayBuffer containing the data.&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;TlvBlock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;aValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ArrayBuffer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aValue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;byteLength&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;// The first two bytes are unsigned shorts.&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;view&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Uint16Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;view&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;aType&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;view&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;aValue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;byteLength&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// The rest just gets the data copied into it.&lt;/span&gt;
  &lt;span class="nx"&gt;view&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Uint8Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;view&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Uint8Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aValue&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This actually illustrates two annoying issues I&amp;nbsp;have:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;I end up with extra lines of code defining a new view every time I
switch data&amp;nbsp;types.&lt;/li&gt;
&lt;li&gt;There&amp;#8217;s no simple way to copy an ArrayBuffer into a part of an
ArrayBuffer. In the above example I create a Uint8Array view of the
target location, a Uint8Array view of the source location and then
set the source to the target. Seems simple once you figure it out,
but it took a while to figure&amp;nbsp;out.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;(As an aside, some of you might find the following function helpful,
it is essentially a &lt;a class="reference external" href="http://en.cppreference.com/w/cpp/string/byte/memcpy"&gt;memcpy&lt;/a&gt; for ArrayBuffers&amp;#8230;this isn&amp;#8217;t really
tested heavily at all,&amp;nbsp;however.)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt; * aTarget / aSource are ArrayBuffers&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;copyBytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aTarget&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;aSource&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;aTargetOffset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;aSourceOffset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;aLength&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;aSource&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;byteLength&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// The rest just gets the data copied into it.&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;view&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Uint8Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aTarget&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;aTargetOffset&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;view&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Uint8Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aSource&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;aSourceOffset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;aLength&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class="caps"&gt;OK&lt;/span&gt;, so typed arrays seem good, but kind of annoying, right?
Wrong&amp;#8230;the &lt;span class="caps"&gt;OSCAR&lt;/span&gt; protocol is a &amp;#8220;network order&amp;#8221; protocol (aka it is big
endian). At this point you&amp;#8217;re probably thinking &amp;#8220;&lt;span class="caps"&gt;OK&lt;/span&gt;, so the ArrayBuffer
constructor must take an endianess flag!&amp;#8221;&amp;nbsp; Wrong, it does no such
thing.&amp;nbsp; &amp;#8220;Hmmm&amp;#8230;Well do the ArrayBufferViews take an endianess flag?&amp;#8221;
Nope, wrong again.&amp;nbsp; The only way to specify the endianess of the data is
to use a &lt;a class="reference external" href="https://developer.mozilla.org/en-US/docs/JavaScript_typed_arrays/DataView"&gt;DataView&lt;/a&gt;, a slightly different interface to the underlying
bytes.&amp;nbsp; It offers an &lt;span class="caps"&gt;API&lt;/span&gt; to individually set different data elements via
their offset and endianess.&amp;nbsp; (If you&amp;#8217;re too lazy to read the
documentation all the way through, DataView assumes big endian: makes my
life&amp;nbsp;easier!)&lt;/p&gt;
&lt;p&gt;For the curious, JavaScript typed arrays use the system endianess,
which in my opinion is pretty much useless (at least if you plan on
sharing data) since you can never guarantee the endianess to be either
big or little endian.&amp;nbsp; (The fun part is that this isn&amp;#8217;t even documented,
I found it on &lt;a class="reference external" href="http://stackoverflow.com/questions/7869752/javascript-typed-arrays-and-endianness"&gt;Stack Overflow&lt;/a&gt; and&amp;nbsp;verified.)&lt;/p&gt;
&lt;p&gt;So, in summary&amp;#8230;if you plan on networking at all with ArrayBuffers,
don&amp;#8217;t use ArrayBufferViews, use DataViews.&amp;nbsp; (Although Uint8Arrays and
Int8Arrays should work&amp;nbsp;fine!)&lt;/p&gt;
&lt;p&gt;And to not rant the &lt;em&gt;entire&lt;/em&gt; time, working with typed arrays certainly
does beat strings +&amp;nbsp;charCodeAt!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Patrick Cloke</dc:creator><pubDate>Wed, 28 Nov 2012 23:11:00 -0500</pubDate><guid>tag:patrick.cloke.us,2012-11-28:posts/2012/11/28/javascript-typed-arrays-pain/</guid><category>Instantbird</category><category>Mozilla</category><category>OSCAR</category><category>Thunderbird</category><category>Wat</category></item><item><title>Instantbird 1.3 Released!!!</title><link>http://patrick.cloke.us/posts/2012/11/16/instantbird-13-released/</link><description>&lt;p&gt;Well we finally got our release process down a bit better and were
able to do a quicker release (from 1.2 to 1.3, compared to our previous
few releases). This is great news, as it gives incremental changes to
our users faster!&amp;nbsp; There&amp;#8217;s some new features available, which are mostly
covered on the &lt;a class="reference external" href="http://blog.instantbird.org/2012/11/instantbird-1-3-released/"&gt;Instantbird blog&lt;/a&gt;, but&amp;nbsp;quickly:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;span class="caps"&gt;IRC&lt;/span&gt; now supports &lt;span class="caps"&gt;SASL&lt;/span&gt; authentication, which is required by Freenode
when connecting from Tor or certain &lt;span class="caps"&gt;IP&lt;/span&gt;&amp;nbsp;ranges.&lt;/li&gt;
&lt;li&gt;Long messages over &lt;span class="caps"&gt;IRC&lt;/span&gt; are now smartly chopped and sent as multiple
messages (instead of being&amp;nbsp;truncated).&lt;/li&gt;
&lt;li&gt;The &amp;#8220;Show Nick&amp;#8221; add-on was integrated: this allows styling of a
mentioned nick in a conversation (and is extremely useful for
following multiple&amp;nbsp;conversations).&lt;/li&gt;
&lt;li&gt;Various other minor&amp;nbsp;improvements&amp;#8230;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Instantbird 1.3 is based off of Mozilla 16.0.2, but I believe we&amp;#8217;re
hoping to update to mozilla-central soon in order to benefit from cool
new technologies, like WebRTC!&amp;nbsp; You should &lt;a class="reference external" href="http://www.instantbird.com/download-all.html"&gt;check out Instantbird&lt;/a&gt;&amp;nbsp;now!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Patrick Cloke</dc:creator><pubDate>Fri, 16 Nov 2012 06:42:00 -0500</pubDate><guid>tag:patrick.cloke.us,2012-11-16:posts/2012/11/16/instantbird-13-released/</guid><category>Instantbird</category></item><item><title>On Status</title><link>http://patrick.cloke.us/posts/2012/10/16/on-status/</link><description>&lt;p&gt;Something that comes up often about Instantbird is why we only support
three statuses: Available, Unavailable and Offline.&amp;nbsp; (We do actually
support a fourth one too, Idle, but that is set automatically, not
chosen by the user.)&amp;nbsp; Frequently this discussion is in the context of
wanting an &amp;#8220;Invisible&amp;#8221; status, but I&amp;#8217;ll get to that&amp;nbsp;later&amp;#8230;&lt;/p&gt;
&lt;p&gt;Many users have talked to us on &lt;span class="caps"&gt;IRC&lt;/span&gt;, email or via bugs and complained
about wanting an &amp;#8220;Away&amp;#8221; status or a &amp;#8220;Do Not Disturb&amp;#8221; status.&amp;nbsp; There&amp;#8217;s a
few issues with&amp;nbsp;this:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;What&amp;#8217;s really the difference between &amp;#8220;Unavailable&amp;#8221;, &amp;#8220;Away&amp;#8221; and &amp;#8220;Do
Not Disturb&amp;#8221;?&amp;nbsp; Do you really need to choose them individually?
(Other things that fit into here: &amp;#8220;Not at my desk&amp;#8221;, &amp;#8220;on the phone&amp;#8221;,
&amp;#8220;busy&amp;#8221;, &amp;#8220;stepped out&amp;#8221;.&amp;nbsp; It is amazing how some protocols have so many
ways to describe being&amp;nbsp;unavailable!)&lt;/li&gt;
&lt;li&gt;A technical issue that we often run into is trying to shoehorn
different protocol implementations into our abstract protocol
interface.&amp;nbsp; (We already have some fairly complicated interfaces
around joining chat rooms, creating different account, etc. because
of&amp;nbsp;this.)&lt;/li&gt;
&lt;li&gt;Setting yourself as &amp;#8220;Away&amp;#8221; or &amp;#8220;Invisible&amp;#8221; is a lie.&amp;nbsp; Perhaps this is
me being overly idealistic, but why would you set yourself as
&amp;#8220;Away&amp;#8221;?&amp;nbsp; It seems that this is something that should be done
automatically (when you lock your display, perhaps?).&amp;nbsp; You can&amp;#8217;t be
&amp;#8220;Away&amp;#8221; and using your computer at the same time!
Again, perhaps being idealistic, but what is the point of the
&amp;#8220;Invisible&amp;#8221; status?&amp;nbsp; If you wish to be hidden from someone
(everyone?) why not just block those users.&amp;nbsp; Or ignore them when they
send you a message.&amp;nbsp; If you are busy, set yourself to &amp;#8220;Unavailable&amp;#8221;
and people should understand that they should not talk to you&amp;#8230;if
they don&amp;#8217;t, well&amp;#8230;do you really want them talking to you ever?&amp;nbsp; (Are
they really your friend?&amp;nbsp; I guess you don&amp;#8217;t get to choose your
co-workers, but still.)&amp;nbsp; Now, perhaps this is just my opinion as
being someone who never really hard an &amp;#8220;Invisible&amp;#8221; status (I actually
remember it being added to the &lt;span class="caps"&gt;AIM&lt;/span&gt; client at some&amp;nbsp;point).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;At this point you probably don&amp;#8217;t believe me that there&amp;#8217;s really &lt;em&gt;that&lt;/em&gt;
many different protocol statuses out there, so I figured I&amp;#8217;d illustrate
a few protocols in a matrix.&amp;nbsp; Note that this isn&amp;#8217;t meant to be
exhaustive, just to show how complicated of a situation this really is.
All protocols can obviously be &amp;#8220;offline&amp;#8221; as well, but that&amp;#8217;s not shown
in the&amp;nbsp;table.&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="30%" /&gt;
&lt;col width="13%" /&gt;
&lt;col width="21%" /&gt;
&lt;col width="17%" /&gt;
&lt;col width="19%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;&amp;nbsp;&lt;/th&gt;
&lt;th class="head"&gt;Available&lt;/th&gt;
&lt;th class="head"&gt;Unavailable&lt;/th&gt;
&lt;th class="head"&gt;Phone&lt;/th&gt;
&lt;th class="head"&gt;Invisible&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;Oscar (&lt;span class="caps"&gt;AIM&lt;/span&gt;/&lt;span class="caps"&gt;ICQ&lt;/span&gt;)&lt;/td&gt;
&lt;td&gt;Online&lt;/td&gt;
&lt;td&gt;Away&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;Invisible&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;span class="caps"&gt;IRC&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Online&lt;/td&gt;
&lt;td&gt;Away&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Microsoft Lync&lt;/td&gt;
&lt;td&gt;Online&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Busy&lt;/li&gt;
&lt;li&gt;Away&lt;/li&gt;
&lt;li&gt;In a&amp;nbsp;meeting&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;In a call&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Yahoo! Messenger&lt;/td&gt;
&lt;td&gt;Available&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Busy&lt;/li&gt;
&lt;li&gt;Stepped&amp;nbsp;out&lt;/li&gt;
&lt;li&gt;Be right&amp;nbsp;back&lt;/li&gt;
&lt;li&gt;Not at my&amp;nbsp;desk&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;On the phone&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Windows Live Messenger&lt;/td&gt;
&lt;td&gt;Online&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Busy&lt;/li&gt;
&lt;li&gt;Away&lt;/li&gt;
&lt;li&gt;Be Right&amp;nbsp;Back&lt;/li&gt;
&lt;li&gt;Out to&amp;nbsp;lunch&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;On the phone&lt;/td&gt;
&lt;td&gt;Appear offline&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;span class="caps"&gt;XMPP&lt;/span&gt; (e.g. Google Talk)&lt;/td&gt;
&lt;td&gt;Available&lt;/td&gt;
&lt;td&gt;Busy&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Patrick Cloke</dc:creator><pubDate>Tue, 16 Oct 2012 21:33:00 -0400</pubDate><guid>tag:patrick.cloke.us,2012-10-16:posts/2012/10/16/on-status/</guid><category>chat</category><category>instant messaging</category><category>Instantbird</category><category>messaging</category><category>status</category><category>Thunderbird</category></item><item><title>Instantbird 1.2 Released (with awesome new IRC features)!</title><link>http://patrick.cloke.us/posts/2012/08/08/instantbird-12-released-with-awesome/</link><description>&lt;p&gt;If you haven&amp;#8217;t seen the announcement&amp;#8230;&lt;a class="reference external" href="http://blog.instantbird.org/2012/08/instantbird-1-2-released/"&gt;Instantbird 1.2 has been
released&lt;/a&gt;!&amp;nbsp; It&amp;#8217;s got a ton of great new features that I&amp;#8217;m excited for:
&lt;a class="reference external" href="http://blog.instantbird.org/2012/08/tab-completion-in-instantbird-1-2/"&gt;better tab complete&lt;/a&gt;, a marker showing the last viewed messages,
support for Bonjour and more.&amp;nbsp; But the most exciting bits to me are our
JavaScript implementations of &lt;a class="reference external" href="http://lxr.instantbird.org/instantbird/source/chat/protocols/xmpp/"&gt;&lt;span class="caps"&gt;XMPP&lt;/span&gt;&lt;/a&gt; (used for &lt;a class="reference external" href="http://lxr.instantbird.org/instantbird/source/chat/protocols/facebook/"&gt;Facebook Chat&lt;/a&gt; and
&lt;a class="reference external" href="http://lxr.instantbird.org/instantbird/source/chat/protocols/gtalk/"&gt;GTalk&lt;/a&gt;, so far) and &lt;a class="reference external" href="http://lxr.instantbird.org/instantbird/source/chat/protocols/irc/"&gt;&lt;span class="caps"&gt;IRC&lt;/span&gt;&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;Why am I so excited for them? Mostly because they&amp;#8217;re extendable!
(Well&amp;#8230;and I guess because I wrote most of the &lt;span class="caps"&gt;IRC&lt;/span&gt; code.) I&amp;#8217;ve
&lt;a class="reference external" href="http://patrick.cloke.us/posts/2012/06/11/irc-auto-performs/"&gt;written&lt;/a&gt; a bit about this before for &lt;span class="caps"&gt;IRC&lt;/span&gt;&amp;#8230;but it will let add-ons do
whatever they want to the &lt;span class="caps"&gt;IRC&lt;/span&gt; protocol.&amp;nbsp; You should check out the
implementations (links above), they&amp;#8217;re very hackable.&amp;nbsp; Hopefully we can
remove libpurple &lt;span class="caps"&gt;XMPP&lt;/span&gt; and fully switch to Instantbird&amp;#8217;s &lt;span class="caps"&gt;XMPP&lt;/span&gt; for the
next release, once a few &lt;a class="reference external" href="https://bugzilla.mozilla.org/show_bug.cgi?id=14328"&gt;Mozilla bugs&lt;/a&gt; are&amp;nbsp;fixed.&lt;/p&gt;
&lt;p&gt;Did I also mention that these implementations (including the raw &lt;span class="caps"&gt;XMPP&lt;/span&gt;
and Twitter, which Instantbird has supported since 1.0) are going to be
included in &lt;a class="reference external" href="http://www.mozilla.org/en-US/thunderbird/"&gt;Thunderbird&lt;/a&gt;15, as part of it&amp;#8217;s new &lt;a class="reference external" href="https://wiki.mozilla.org/Modules/Chat"&gt;chat feature&lt;/a&gt;?
Florian has done a great job of integrating our chat code there and it
gives quite a different user experience than Instantbird, so don&amp;#8217;t be
worried about Instantbird going&amp;nbsp;away!&lt;/p&gt;
&lt;p&gt;Now of course, we always think of the future here (after all,
releasing itself isn&amp;#8217;t really exciting when most of the features have
been in nightly builds&amp;#8230;forever), so we started making a list of some
of the stuff we&amp;#8217;d like to implement in future Instantbirds, you can
check it out &lt;a class="reference external" href="https://etherpad.mozilla.org/ib-1-3"&gt;here&lt;/a&gt;. Some of them are very exciting, feel free to grab
one and work on&amp;nbsp;it.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Patrick Cloke</dc:creator><pubDate>Wed, 08 Aug 2012 13:08:00 -0400</pubDate><guid>tag:patrick.cloke.us,2012-08-08:posts/2012/08/08/instantbird-12-released-with-awesome/</guid><category>Instantbird</category><category>IRC</category></item><item><title>IRC Auto-Performs</title><link>http://patrick.cloke.us/posts/2012/06/11/irc-auto-performs/</link><description>
&lt;p&gt;There have been a &lt;a class="reference external" href="https://bugzilla.mozilla.org/show_bug.cgi?id=742675"&gt;few&lt;/a&gt; &lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=1101"&gt;requests&lt;/a&gt; to support “auto-performs”
(sending commands to the &lt;span class="caps"&gt;IRC&lt;/span&gt; server after connection that the user types
into a box or whatever). Personally I find this to be:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;A fairly awful user experience.&lt;/li&gt;
&lt;li&gt;Confusing to new users.&lt;/li&gt;
&lt;li&gt;Unnecessary.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I additionally don’t like this idea since it requires us to have
commands for all the common tasks you’d want to do in an auto-perform
(or support sending absolutely raw messages to the server, which we
actually do already in the /quote command). Essentially what I just
described is writing our own scripting language…that seems pointless
(and frankly, I have better things to do). I’m hoping to convince you
with this post (and maybe a series of posts) that auto-performs aren’t
necessary and a trivial restartless extension can replace them.&lt;/p&gt;
&lt;div class="section" id="design"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id1"&gt;Design&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Part of the desire to &lt;a class="reference external" href="http://patrick.cloke.us/posts/2011/04/30/why-rewrite-irc-protocol-plugin-part-2/"&gt;replace the libpurple &lt;span class="caps"&gt;IRC&lt;/span&gt; protocol plugin&lt;/a&gt;
with a new JavaScript one built specifically for Instantbird (which is
also now used in Thunderbird!) was to make the protocol fully
extensible. There are &lt;a class="reference external" href="http://patrick.cloke.us/posts/2011/03/08/so-called-irc-specifications/"&gt;many revisions and unofficial extensions to &lt;span class="caps"&gt;IRC&lt;/span&gt;&lt;/a&gt;
and we might not necessarily want to support them all (especially if
they only apply to a single network). Allowing all parts of the protocol
implementation to be touched and extended seemed like a great way to
handle this.&lt;/p&gt;
&lt;p&gt;Initially I tried to do this by making the &lt;span class="caps"&gt;IRC&lt;/span&gt; account into an &lt;span class="caps"&gt;XPCOM&lt;/span&gt;
component (well it is one already, it’s an prplIAccount, but I meant an
&lt;span class="caps"&gt;IRC&lt;/span&gt; specific one: implementing ircIAccount, if you will). Unfortunately,
this seemed to have a lot of overhead and got complicated extremely
quickly. Anything I’d want to touch from a message handler (wait,
wait…what’s a handler?! I’ll get back to that) would need to have
methods written and exposed to access internal data of the
account…does that sound very extensible to you? Well, it doesn’t to me…&lt;/p&gt;
&lt;p&gt;Onto design two! (Well actually my first design…) Lots of JavaScript
objects! The entire protocol is implemented as a set of JavaScript
objects and the handlers directly touch and modify the account’s data
(of course there’s methods for abstraction, etc.). This means that an
extension has absolutely &lt;span class="caps"&gt;FULL&lt;/span&gt; access to every about an account…this
also means an extension could seriously mess with and cause the protocol
to stop working or do really crazy things, etc. Unfortunately there
isn’t really a way to avoid that. Hopefully people write good code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="messages"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id2"&gt;Messages&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I’m going to go into an aside about messages right now, even though it
doesn’t quite seem relevent yet. It will. &lt;span class="caps"&gt;IRC&lt;/span&gt; has a bunch of
sub-protocols embedded within the &lt;span class="caps"&gt;IRC&lt;/span&gt; protocol (see the link above about
unofficial extensions). We attempt to parse all the string messages and
make pretty JavaScript objects out of them. I’ve actually identified
five (yes, count that: five) different sub-“protocols” within &lt;span class="caps"&gt;IRC&lt;/span&gt; that
we deal:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;span class="caps"&gt;IRC&lt;/span&gt; itself (i.e. &lt;a class="reference external" href="http://tools.ietf.org/html/rfc1459"&gt;&lt;span class="caps"&gt;RFC&lt;/span&gt; 1459&lt;/a&gt; / &lt;a class="reference external" href="http://tools.ietf.org/html/rfc2812"&gt;&lt;span class="caps"&gt;RFC&lt;/span&gt; 2812&lt;/a&gt; / various numeric extensions)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.irchelp.org/irchelp/rfc/ctcpspec.html"&gt;&lt;span class="caps"&gt;CTCP&lt;/span&gt; (the Client-to-Client Protocol)&lt;/a&gt;,embedded in &lt;span class="caps"&gt;PRIVMSG&lt;/span&gt; commands
of &lt;span class="caps"&gt;IRC&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;DCC&lt;/span&gt; (Direct Client-to-Client), a subprotocol of &lt;span class="caps"&gt;CTCP&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://tools.ietf.org/html/draft-brocklesby-irc-isupport-03"&gt;&lt;span class="caps"&gt;ISUPPORT&lt;/span&gt;&lt;/a&gt; (also known as Numeric 005), a method of negotiating
capabilities between a client and server&lt;/li&gt;
&lt;li&gt;And finally, handling of &lt;span class="caps"&gt;IRC&lt;/span&gt; Services (there’s a lot of them and no
specification, but we treat them specially)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Briefly what happens when we receive a raw message over the wire, we
create an &lt;a class="reference external" href="http://hg.instantbird.org/instantbird/file/b8d8b6e60aef/chat/protocols/irc/irc.js#l14"&gt;ircMessage object out of it using a variety of regular
expressions&lt;/a&gt;. This object has a variety of fields (see the link for
details), including the command, who sent the message and the parameters.&lt;/p&gt;
&lt;p&gt;If the message is identified as a &lt;span class="caps"&gt;CTCP&lt;/span&gt; message, we then morph the
ircMessage into a &lt;a class="reference external" href="http://hg.instantbird.org/instantbird/file/b8d8b6e60aef/chat/protocols/irc/ircCTCP.jsm#l44"&gt;CTCPMessage&lt;/a&gt;, which can be morphed into a
&lt;a class="reference external" href="http://hg.instantbird.org/instantbird/file/b8d8b6e60aef/chat/protocols/irc/ircDCC.jsm#l20"&gt;DCCMessage&lt;/a&gt;. Additionally, a 005 reply can be parsed into a
&lt;a class="reference external" href="http://hg.instantbird.org/instantbird/file/b8d8b6e60aef/chat/protocols/irc/ircISUPPORT.jsm#l22"&gt;isupportMessage&lt;/a&gt;. And last, but not least, a received &lt;span class="caps"&gt;PRIVMSG&lt;/span&gt; can also
be parsed into a &lt;a class="reference external" href="http://hg.instantbird.org/instantbird/file/b8d8b6e60aef/chat/protocols/irc/ircServices.jsm#l19"&gt;ServiceMessage&lt;/a&gt;. Each of these extends the &lt;span class="caps"&gt;IRC&lt;/span&gt;
message without destroying information. (Yes, I’m realizing now that my
choice of whether to use capitals is all messed up…)&lt;/p&gt;
&lt;p&gt;Well, why do we care…? By preparsing the strings into objects (as
defined by any “specifications” that exist), we keep extensions from
having to parse messages over and over again from strings.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="handlers"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;Handlers&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A handler is simply what I call the object that contains the methods
to deal with an incoming message. Pretty much, you get to say “Only send
me &lt;span class="caps"&gt;ISUPPORT&lt;/span&gt; messages!” or “Only send me &lt;span class="caps"&gt;CTCP&lt;/span&gt; messages!” and voila, you
only get that type of message. Each message type has a field that is
used to choose the method to run (for the &lt;span class="caps"&gt;IRC&lt;/span&gt; messages, the “command”,
for &lt;span class="caps"&gt;CTCP&lt;/span&gt; the “&lt;span class="caps"&gt;CTCP&lt;/span&gt; command”, &lt;span class="caps"&gt;ISUPPORT&lt;/span&gt; the “parameter”, etc.) This sounds
a lot more complicated than it is, I think a brief &lt;a class="reference external" href="https://bitbucket.org/clokep/irc-extras/src/6f778f17172a/example/bootstrap.js"&gt;example&lt;/a&gt; is in order:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;ircSimpleExample&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// The name here is really only used in error messages.&lt;/span&gt;
  &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"IRC Simple Example"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="c1"&gt;// Slightly above the default priority so we run before the main IRC handler.&lt;/span&gt;
  &lt;span class="nx"&gt;priority&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ircHandlers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DEFAULT_PRIORITY&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="c1"&gt;// Run this for all accounts (note that the 'this' object in this method is&lt;/span&gt;
  &lt;span class="c1"&gt;// the JavaScript account object.&lt;/span&gt;
  &lt;span class="nx"&gt;isEnabled&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

  &lt;span class="c1"&gt;// The commands we want to handle. For each of these, the account object is&lt;/span&gt;
  &lt;span class="c1"&gt;// bound to 'this' and the single parameter is of the type that you've&lt;/span&gt;
  &lt;span class="c1"&gt;// registered your handle.&lt;/span&gt;
  &lt;span class="nx"&gt;commands&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"001"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aMessage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// At the 001 response we've successfully connected to the server.&lt;/span&gt;
      &lt;span class="c1"&gt;// Send an IDENTIFY command to NickServ.&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"PRIVMSG"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"NickServ"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"IDENTIFY &amp;lt;your password&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

      &lt;span class="c1"&gt;// Return false so the default handler still runs.&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Just like that we’ve designed a handler! Whenever the 001 method is
received from the server, this function will run and attempt to identify
with the NickServ (of course this could use a bit more security on it,
but it’s to demonstrate the possibilities). (The sendMessage function
takes the command to send and an array of parameters to send.)&lt;/p&gt;
&lt;p&gt;As this is already a long post, I think I’ll cut this off now and
continue this at another time, but I hope I’m beginning to convince you
that allowing directy access to the account and protocol implementation
is a more powerful (and even simpler in many ways, in my opinion)
alternative to “auto-performs”. The one major downside I see to this, is
that it requires a bit more understanding of the actual protocol level
implementation, I don’t feel that knowing you need to use “&lt;span class="caps"&gt;PRIVMSG&lt;/span&gt;” as a
command instead of /msg is a huge issue, however.&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Patrick Cloke</dc:creator><pubDate>Mon, 11 Jun 2012 22:25:00 -0400</pubDate><guid>tag:patrick.cloke.us,2012-06-11:posts/2012/06/11/irc-auto-performs/</guid><category>Instantbird</category><category>IRC</category><category>Mozilla</category></item><item><title>Instantbird Contact List Hack #2</title><link>http://patrick.cloke.us/posts/2012/01/15/instantbird-contact-list-hack-2/</link><description>&lt;p&gt;There was a &lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=987"&gt;request&lt;/a&gt; on the Instantbird Bugzilla to always show
contacts in the contact list as the &amp;#8220;big&amp;#8221; contact (as shown when a
contact is selected).&amp;nbsp; Similarly to my &lt;a class="reference external" href="http://patrick.cloke.us/posts/2011/10/31/instantbird-contact-list-hack/"&gt;last post&lt;/a&gt;, this can easily be
done with userChrome.css.&amp;nbsp; See the post if you don&amp;#8217;t know what
userChrome.css&amp;nbsp;is.&lt;/p&gt;
&lt;p&gt;Again, we&amp;#8217;re simply going to always apply a specific &lt;span class="caps"&gt;CSS&lt;/span&gt; style to the
contacts, namely we&amp;#8217;ll be modifying the behavior of &lt;a class="reference external" href="http://lxr.instantbird.org/instantbird/source/instantbird/content/blist.css#38"&gt;blist.css&lt;/a&gt;.&amp;nbsp; I&amp;#8217;m
sure you don&amp;#8217;t really care about that and just want the code, well I&amp;#8217;ll&amp;nbsp;oblige:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/* Expand all contacts to the big contact. */&lt;/span&gt;
&lt;span class="nx"&gt;contact&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;moz&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;binding&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;chrome://instantbird/content/contact.xml#contact-big&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;moz&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;box&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;orient&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;vertical&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;moz&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;box&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;align&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;stretch&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And that&amp;#8217;s it!&amp;nbsp; Restart Instantbird and you should always have big
contacts.&amp;nbsp; I haven&amp;#8217;t seen any issues of using this (missing or wrong
behavior), but of course your mileage might vary.&amp;nbsp; Have&amp;nbsp;fun!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Patrick Cloke</dc:creator><pubDate>Sun, 15 Jan 2012 10:00:00 -0500</pubDate><guid>tag:patrick.cloke.us,2012-01-15:posts/2012/01/15/instantbird-contact-list-hack-2/</guid><category>customizing</category><category>Instantbird</category><category>programming</category></item><item><title>Instantbird Contact List Hack</title><link>http://patrick.cloke.us/posts/2011/10/31/instantbird-contact-list-hack/</link><description>&lt;p&gt;A friend of mine asked me if there was a way to have selected contacts
in the contact list &lt;span class="caps"&gt;NOT&lt;/span&gt; expand to two lines (where the status goes onto
the second line) in&amp;nbsp;Instantbird.&lt;/p&gt;
&lt;p&gt;There&amp;#8217;s actually no option to do this in Instantbird, but with a
little &lt;a class="reference external" href="http://www-archive.mozilla.org/unix/customizing.html"&gt;userChrome&lt;/a&gt; tweak, we can easily get this behavior (although
with a couple caveats).&amp;nbsp; You should be able to add a new folder &lt;a class="reference external" href="http://instantbird.com/faq.html#profilefolder"&gt;inside
your profile&lt;/a&gt; called chrome.&amp;nbsp; Inside of this make a new file called
userChrome.css and place the&amp;nbsp;following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nn"&gt;#buddylistbox&lt;/span&gt;&lt;span class="nd"&gt;:focus&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;contact&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;selected&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;moz&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;binding&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url(&amp;quot;chrome://instantbird/content/contact.xml#contact&amp;quot;)&lt;/span&gt; &lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;moz&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;box&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;orient&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;horizontal&lt;/span&gt; &lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Save the file and restart&amp;#8230;and that&amp;#8217;s it! Now your selected contacts
should be on one line, just like your unselected&amp;nbsp;contacts.&lt;/p&gt;
&lt;p&gt;I did mention there was a caveat though! If you want to expand a
contact (to see all the protocols, etc. that you&amp;#8217;ve merged together)
you&amp;#8217;ll need to use the arrow keys: right arrow expands a contact, left
arrow collapses a contact.&amp;nbsp; (You need to do this since the chevron icon
that lets you expand/collapse isn&amp;#8217;t shown on a non-selected&amp;nbsp;contact.)&lt;/p&gt;
&lt;p&gt;(Some more technical details: we&amp;#8217;re forcing the standard contact
template to be used instead of the contact-big template, even when the
contact is expanded; i.e. we&amp;#8217;re overwriting the command given
&lt;a class="reference external" href="http://lxr.instantbird.org/instantbird/source/instantbird/content/blist.css#44"&gt;blist.css&lt;/a&gt;.)&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Patrick Cloke</dc:creator><pubDate>Mon, 31 Oct 2011 20:20:00 -0400</pubDate><guid>tag:patrick.cloke.us,2011-10-31:posts/2011/10/31/instantbird-contact-list-hack/</guid><category>customizing</category><category>Instantbird</category><category>programming</category></item><item><title>Adding a protocol to Instantbird (Part 2)</title><link>http://patrick.cloke.us/posts/2011/09/03/adding-protocol-to-instantbird-part-2/</link><description>
&lt;p&gt;I had &lt;a class="reference external" href="http://patrick.cloke.us/posts/2011/06/18/adding-new-protocol-sipeoffice/"&gt;previously talked about adding a protocol to Instantbird&lt;/a&gt;,
that focused on adding &lt;span class="caps"&gt;SIPE&lt;/span&gt; (Microsoft Office Communicator support).
Since then I’ve been slowly working on defeating &lt;span class="caps"&gt;SIPE&lt;/span&gt;.  Fortunately I
found a few flags that help us compile it easily in Instantbird: we can
declare that we do &lt;em&gt;not&lt;/em&gt; have gmime and the standard libpurple &lt;span class="caps"&gt;MIME&lt;/span&gt;
functions will be used (they might not be as good, but it keeps from
adding &amp;gt;10 &lt;span class="caps"&gt;MB&lt;/span&gt; of source to Instantbird).&lt;/p&gt;
&lt;p&gt;Some modifications to the &lt;span class="caps"&gt;SIPE&lt;/span&gt; source were made to compile it in
Instantbird (note that most of the changes were probably more based on
using &lt;span class="caps"&gt;MSVC&lt;/span&gt;, than having to do with Instantbird).  The code is also
broken up into a few different sections the core, api, and purple are
ones we care about (they’re working on making a general Office
Communicator protocol library, so the purple folder contains the
libpurple bindings that use the api, while the core is private).&lt;/p&gt;
&lt;div class="section" id="purple"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id1"&gt;Purple&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Changes to purple consisted mostly of ifdefs that remove some header
files not supported on Windows.  For example, I encountered a few of:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
#include &amp;lt;unistd.h&amp;gt;
&lt;/pre&gt;
&lt;p&gt;Luckily there was already a define &lt;tt class="docutils literal"&gt;HAVE_UNISTD_H&lt;/tt&gt;, so I just needed
to add:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
#ifdef HAVE_UNISTD_H
#include &amp;lt;unistd.h&amp;gt;
#endif
&lt;/pre&gt;
&lt;p&gt;Easy!  There were also a couple other issues, but those were rather trivial.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="core"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id2"&gt;Core&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There isn’t a specific issue in the core I’d like to highlight, it did
use a few glib functions which we didn’t have (we removed the files, as
they were unused), they were all reimplemented in libpurple though, so
we were able to just define the function calls to the libpurple variants.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="api"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;&lt;span class="caps"&gt;API&lt;/span&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This had similar issues the core (in particular, there was a function
which used &lt;tt class="docutils literal"&gt;g_usleep&lt;/tt&gt;, which is blocking and a definite no-no for a
protocol plug-in, I’ve removed that…hopefully it doesn’t break
anything!)  In addition to that, we needed to use the libpurple l10n
system instead of glib’s gi18n.h, this was easily copied from
libpurple’s internal &lt;span class="caps"&gt;API&lt;/span&gt; though.&lt;/p&gt;
&lt;p&gt;So at this point…I have a copy of &lt;span class="caps"&gt;SIPE&lt;/span&gt; compiled!  Unfortunately
since I’m using Visual Studio Express I cannot compile on my computer
and deploy to other computers for testing (a Mozilla issue with how it
uses some of the header files, etc., I believe).  I’m looking into
trying to get this to work though, apparently using the exact same copy
of &lt;span class="caps"&gt;MSVC&lt;/span&gt; Redistributable might help.  Once this is tested, hopefully
it’ll land in Instantbird for use!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="sametime-support"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4"&gt;Sametime support&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Unrelated to &lt;span class="caps"&gt;SIPE&lt;/span&gt;, but recently I landed a patch in Instantbird to add
back Sametime support (Sametime is Lotus Notes’ equivalent to Office
Communicator).  You can see the gory details in &lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=102"&gt;bug 102&lt;/a&gt;, but in
general it’s similar to what I’ve (not gone into great detail about)
here. Most of getting Sametime to work was rewriting some C code
that doesn’t compile in &lt;span class="caps"&gt;MSVC&lt;/span&gt;.  There’s also a &lt;a class="reference external" href="https://bugzilla.instantbird.org/attachment.cgi?id=797&amp;amp;action=diff"&gt;diff&lt;/a&gt; of all the
changes I made to the libpurple Sametime plugin and the external library
(called &lt;a class="reference external" href="http://meanwhile.sourceforge.net/"&gt;Meanwhile&lt;/a&gt;) to get it to work.  Once I get Monotone (a version
control system) set up I’ll look into getting these changes pushed back
to libpurple to avoid diverging code bases.&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Patrick Cloke</dc:creator><pubDate>Sat, 03 Sep 2011 10:31:00 -0400</pubDate><guid>tag:patrick.cloke.us,2011-09-03:posts/2011/09/03/adding-protocol-to-instantbird-part-2/</guid><category>Instantbird</category><category>programming</category><category>SIPE</category></item><item><title>Shared Lightning profile across Linux and Windows</title><link>http://patrick.cloke.us/posts/2011/07/08/shared-lightning-profile-across-linux/</link><description>&lt;p&gt;In &lt;a class="reference external" href="irc://irc.mozilla.org/calendar"&gt;#calendar on Mozilla &lt;span class="caps"&gt;IRC&lt;/span&gt;&lt;/a&gt; the past few days a user has been
asking about using a shared profile on Thunderbird between Linux and
Windows (&amp;#8220;shared&amp;#8221; meaning a dual boot system of Linux/Windows, but not
at the same time, obviously).&amp;nbsp; Generally this isn&amp;#8217;t a big deal &lt;span class="caps"&gt;UNLESS&lt;/span&gt;
you have a binary extension, in which case you&amp;#8217;d have to reinstall the
extension every time! That&amp;#8217;s awfully&amp;nbsp;lame.&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;BUT&lt;/span&gt; there should be a way to make a unified extension for all
operating systems.&amp;nbsp; In fact &lt;a class="reference external" href="https://wiki.mozilla.org/User:Ssitter/UnifiedLightning"&gt;ssitter had written an article to do
that&lt;/a&gt;.&amp;nbsp; It needs some updating to account for the Mozilla 2 &lt;span class="caps"&gt;XPCOM&lt;/span&gt;
changes,&amp;nbsp;however.&lt;/p&gt;
&lt;p&gt;The steps are mostly the same, with some&amp;nbsp;added.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Download whatever versions you want (&lt;a class="reference external" href="http://releases.mozilla.org/pub/mozilla.org/calendar/lightning/releases/1.0b4/"&gt;perhaps 1.0b4&lt;/a&gt;?).&lt;/li&gt;
&lt;li&gt;Unzip them all and choose which one will be your &amp;#8220;unified&amp;#8221;&amp;nbsp;version.&lt;/li&gt;
&lt;li&gt;Find the &amp;lt;em:targetPlatform&amp;gt; section in the install.rdfs and include
all the necessary&amp;nbsp;ones.&lt;/li&gt;
&lt;li&gt;Find the libcalbasecomps.* (where * is dll, dylib, so, etc. for
your platform) inside the components&amp;nbsp;directories.&lt;/li&gt;
&lt;li&gt;Copy the libraries together into one&amp;nbsp;directory.&lt;/li&gt;
&lt;li&gt;Copy the lines from each components.manifest together into one&amp;nbsp;manifest.&lt;/li&gt;
&lt;li&gt;For some systems you&amp;#8217;ll need to specify the &lt;span class="caps"&gt;ABI&lt;/span&gt; (and possibly change
the path), note that the &lt;span class="caps"&gt;ABI&lt;/span&gt; is just what was inside the&amp;nbsp;&amp;lt;em:targetPlatform&amp;gt;.&lt;/li&gt;
&lt;li&gt;Rezip this up into an &lt;span class="caps"&gt;XPI&lt;/span&gt; and you should be good to&amp;nbsp;go!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In my test I ended up with an &lt;span class="caps"&gt;XPI&lt;/span&gt; that was approximately 10% bigger
after combining Mac (x86 and x64), Linux (x86 and x64), Win32, Solaris
Sparc and Solaris x86.&amp;nbsp; Why is this not done by default?&amp;nbsp; Probably just
cause no one has done it&amp;#8230;there is a &lt;a class="reference external" href="https://bugzilla.mozilla.org/show_bug.cgi?id=352543"&gt;bug about it&lt;/a&gt; though.&amp;nbsp; One issue
that might be encountered using this method is pre-processing of some
script files (as is discussed in that big) but hopefully it should
&amp;#8220;mostly&amp;#8221; work.&amp;nbsp; (Note that this is mostly&amp;nbsp;untested.)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; I should also mention that you would need to do something
similar with the themes folders if they differ dramatically (it seems
there&amp;#8217;s &lt;a class="reference external" href="http://mxr.mozilla.org/comm-central/source/calendar/lightning/themes/"&gt;just two&lt;/a&gt;: winstripe and pinstripe: i.e. Windows &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; Mac; Linux
and Solaris most likely also use&amp;nbsp;winstripe).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Patrick Cloke</dc:creator><pubDate>Fri, 08 Jul 2011 20:46:00 -0400</pubDate><guid>tag:patrick.cloke.us,2011-07-08:posts/2011/07/08/shared-lightning-profile-across-linux/</guid><category>Lightning</category><category>Mozilla</category></item><item><title>Adding a new protocol (SIPE/Office Communicator) to Instantbird (part 1)</title><link>http://patrick.cloke.us/posts/2011/06/18/adding-new-protocol-sipeoffice/</link><description>&lt;p&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Office_Communicator"&gt;Microsoft Office Communicator&lt;/a&gt; is an instant messaging client that
integrates into the &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Microsoft_Exchange_Server"&gt;Exchange Messaging Server&lt;/a&gt; (the protocol behind it
is an extended version of &lt;span class="caps"&gt;SIP&lt;/span&gt;/&lt;span class="caps"&gt;SIMPLE&lt;/span&gt;).&amp;nbsp; Anyway, there&amp;#8217;s a &lt;a class="reference external" href="http://developer.pidgin.im/wiki/WhatIsLibpurple"&gt;libpurple&lt;/a&gt;
(i.e. the backend of &lt;a class="reference external" href="http://instantbird.com/"&gt;Instantbird&lt;/a&gt; and &lt;a class="reference external" href="http://pidgin.im/"&gt;Pidgin&lt;/a&gt;) protocol plug-in for
&lt;span class="caps"&gt;OCS&lt;/span&gt; (Office Communicator Server) called &lt;a class="reference external" href="http://sipe.sourceforge.net/"&gt;&lt;span class="caps"&gt;SIPE&lt;/span&gt;&lt;/a&gt;.&amp;nbsp; (It&amp;#8217;s also striving
for a generic library to connect to &lt;span class="caps"&gt;OCS&lt;/span&gt;, but that&amp;#8217;s not quite there&amp;nbsp;yet.)&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve been interested in getting this to compile in the Instantbird
framework for a while now, adding a new protocol to Instantbird.&amp;nbsp; First
of course I need the &lt;span class="caps"&gt;SIPE&lt;/span&gt; source, I chose to grab a release &lt;a class="reference external" href="http://sourceforge.net/projects/sipe/files/sipe/pidgin-sipe-1.11.2/"&gt;source
bundle&lt;/a&gt; instead of using the &lt;a class="reference external" href="http://sourceforge.net/apps/mediawiki/sipe/index.php?title=Windows_Build"&gt;git repository&lt;/a&gt;, just for ease moving
files around, etc.&amp;nbsp; There&amp;#8217;s a rather vague &lt;a class="reference external" href="http://sourceforge.net/apps/mediawiki/sipe/index.php?title=Windows_Build"&gt;Windows build&lt;/a&gt; page on the
wiki that I started with, says I&amp;nbsp;need:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;libpurple &amp;gt;2.4.0 (we have&amp;nbsp;2.7.11)&lt;/li&gt;
&lt;li&gt;libglib &amp;gt;2.12.0 (we have&amp;nbsp;2.28.6)&lt;/li&gt;
&lt;li&gt;libxml2 (we have&amp;nbsp;this)&lt;/li&gt;
&lt;li&gt;gmime &amp;gt;2.4 (not currently&amp;nbsp;used)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So great, &lt;a class="reference external" href="https://wiki.instantbird.org/Instantbird:Third_party_code"&gt;we have most of the dependencies&lt;/a&gt;! We just need one more.
So I go grab, &lt;a class="reference external" href="http://developer.gnome.org/gmime/"&gt;gmime&lt;/a&gt;from the &lt;span class="caps"&gt;GNOME&lt;/span&gt; website (2.5.7, which is the
newest stable, currently), again as a source bundle and put the
necessary files in purple/libraries/gmime and edit the makefile so it
will (attempt) to compile.&amp;nbsp; But great &amp;#8212; it requires &lt;a class="reference external" href="http://www.gnu.org/software/libiconv/"&gt;libiconv&lt;/a&gt;, which
apparently is very difficult to compile, especially on Windows.&amp;nbsp; Luckily
for me there&amp;#8217;s a Windows version (not a port, but one that uses the
native Win32 APIs with the same interface): &lt;a class="reference external" href="http://code.google.com/p/win-iconv/"&gt;win-iconv&lt;/a&gt;.&amp;nbsp; This compiled
like a champ when added as&amp;nbsp;purple/libraries/iconv.&lt;/p&gt;
&lt;p&gt;Unfortunately when I went back to compiling gmime, it attempts to
access parts of glib we&amp;#8217;re not using (gio, in particular) and thus is
not in our source code.&amp;nbsp; I can grab the &lt;a class="reference external" href="http://developer.gnome.org/glib/"&gt;glib&lt;/a&gt; source (2.28.6 to match,
of course) and add the gio subfolder, but first we should check if this
part of gmime is even used by &lt;span class="caps"&gt;SIPE&lt;/span&gt;! (My guess is that it is &lt;em&gt;not&lt;/em&gt;, but
that&amp;#8217;s where I&amp;#8217;m at now.&amp;nbsp; I&amp;#8217;ll post back when I get&amp;nbsp;further.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Patrick Cloke</dc:creator><pubDate>Sat, 18 Jun 2011 21:53:00 -0400</pubDate><guid>tag:patrick.cloke.us,2011-06-18:posts/2011/06/18/adding-new-protocol-sipeoffice/</guid><category>Instantbird</category><category>programming</category><category>SIPE</category></item><item><title>Compiling Instantbird</title><link>http://patrick.cloke.us/posts/2011/05/16/compilling-instantbird/</link><description>
&lt;p&gt;In the past I’ve tried to compile a few different programs that use
the Mozilla toolkit to various levels of success.  I’ve tried to compile
Thunderbird, Songbird and Instantbird at various points.  I got
Thunderbird to compile, but it only worked sporadically (although I
think that was Firefox moving so fast that Thunderbird couldn’t keep
up), Songbird I gave up on rather quickly and Instantbird I’ve tried a
few times.&lt;/p&gt;
&lt;p&gt;Last summer I had Instantbird compiling on my old laptop (a Lenovo
T60), which is &amp;gt;5 years old at this point and has had the heatsink / fan
replaced twice — a known issue with that model laptop.  Needless to
say, that laptop didn’t like compiling something on Windows that took
approximately an hour with a large number of reads and writes to the
hard drive.  This mixed with it being an old dual core + a 5400 &lt;span class="caps"&gt;RPM&lt;/span&gt;
meant I’d be waiting a &lt;span class="caps"&gt;LONG&lt;/span&gt; time for my code to compile.  I got a
Thinkpad X201 this past summer, so I finally got around to setting up a
development environment on it and was able to get Instantbird to compile
fully today.  I’ve outlined the steps I’ve followed: kind of to mirror
the &lt;a class="reference external" href="https://developer.mozilla.org/En/Simple_Thunderbird_build"&gt;Simple Thunderbird Build&lt;/a&gt; page on &lt;span class="caps"&gt;MDC&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;I’ve done this using Microsoft Windows 7 Professional (64-bit) with
Service Pack 1. (4.00 &lt;span class="caps"&gt;GB&lt;/span&gt; of &lt;span class="caps"&gt;RAM&lt;/span&gt;, Intel Core i7 M620 2.67 GHz).
Throughout these steps, the defaults locations and options are used in
the installers.&lt;/p&gt;
&lt;div class="section" id="build-requirements"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id2"&gt;Build Requirements:&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="visual-studio-express"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id3"&gt;Visual Studio Express:&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;We need to install Visual Studio Express, specifically &lt;span class="caps"&gt;VC8&lt;/span&gt; (2005) with
Service Pack 1.  (Mozilla compiles with &lt;span class="caps"&gt;VC9&lt;/span&gt; and &lt;span class="caps"&gt;VC10&lt;/span&gt; to various degrees,
but it seems libpurple only compiles with &lt;span class="caps"&gt;VC8&lt;/span&gt;, also this is what’s on
the Instantbird buildbot, so I like having the same version.)  I
couldn’t find this on Microsoft’s website but I found it on &lt;a class="reference external" href="http://www.softpedia.com/get/Programming/Other-Programming-Files/Microsoft-Visual-C-Toolkit.shtml"&gt;Softpedia&lt;/a&gt;
(which is a legitimate site).  Anyway, download the installer and
install it (which will download the actual compiler from Microsoft),
ensure that you also install the &lt;span class="caps"&gt;IDE&lt;/span&gt; (which is checked by default).&lt;/p&gt;
&lt;p&gt;This will only install &lt;span class="caps"&gt;VC8&lt;/span&gt;, the initial release.  We also need to
install &lt;a class="reference external" href="http://www.microsoft.com/downloads/en/details.aspx?FamilyID=7b0b0339-613a-46e6-ab4d-080d4d4a8c4e"&gt;Service Pack 1&lt;/a&gt;.  I personally did this using Windows Update,
but one of the installers from there should also work.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="microsoft-windows-sdk"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id4"&gt;Microsoft Windows &lt;span class="caps"&gt;SDK&lt;/span&gt;:&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Specifically we need the &lt;a class="reference external" href="http://www.microsoft.com/downloads/en/details.aspx?FamilyID=c17ba869-9671-4330-a63e-1fd44e0e2505&amp;amp;displaylang=en"&gt;Windows 7 &lt;span class="caps"&gt;SDK&lt;/span&gt;&lt;/a&gt; (for Jumplist, Aero, etc.
support).  Download and install the &lt;span class="caps"&gt;SDK&lt;/span&gt;, this one took a while for me to
install.  I ate dinner while it was installing (pasta, if you’re curious
— I already had sauce made).&lt;/p&gt;
&lt;p&gt;There’s a linker error when using &lt;span class="caps"&gt;VC8&lt;/span&gt; and the Windows 7 &lt;span class="caps"&gt;SDK&lt;/span&gt;, so we’ll
need to install a &lt;a class="reference external" href="http://support.microsoft.com/kb/949009/"&gt;hotfix&lt;/a&gt;for that (I tried without it and I ran into
the issue).  I had to download the “VS80sp1-&lt;span class="caps"&gt;KB949009&lt;/span&gt;-&lt;span class="caps"&gt;IA64&lt;/span&gt;-&lt;span class="caps"&gt;INTL&lt;/span&gt;.exe”
version (there’s also an X86 and an X64 version).  Choose the one that works.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="microsoft-macro-assembler"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id5"&gt;Microsoft Macro Assembler:&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In order to properly assemble the code we need to &lt;a class="reference external" href="http://www.microsoft.com/downloads/en/details.aspx?familyid=7A1C9DA0-0510-44A2-B042-7EF370530C64&amp;amp;displaylang=en"&gt;install &lt;span class="caps"&gt;MASM&lt;/span&gt;&lt;/a&gt;
(which I think will eventually be included in MozillaBuild, but it isn’t
currently).  Again, just install it with the defaults.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="mozillabuild"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id6"&gt;MozillaBuild:&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Almost there, I promise.  In order to get a *nix type shell to run
make, etc. in we’ll use a package from Mozilla that includes &lt;span class="caps"&gt;MSYS&lt;/span&gt;, make,
Mercurial, etc.  Download and &lt;a class="reference external" href="http://ftp.mozilla.org/pub/mozilla.org/mozilla/libraries/win32/MozillaBuildSetup-Latest.exe"&gt;install MozillaBuild&lt;/a&gt;, the latest should
work fine.&lt;/p&gt;
&lt;p&gt;Now, an unknown step: you might require the &lt;a class="reference external" href="http://www.microsoft.com/downloads/en/details.aspx?FamilyID=a5c84275-3b97-4ab7-a40d-3802b2af5fc2&amp;amp;displaylang=en"&gt;Microsoft Visual C++ 2008
&lt;span class="caps"&gt;SP1&lt;/span&gt; Redistributable Package&lt;/a&gt;.  I don’t know if you need this or not
since I &lt;em&gt;already&lt;/em&gt; had it, most likely from a previous program I’ve installed.&lt;/p&gt;
&lt;p&gt;We should be ready to build now pretty much.  For some more
information for this stuff you can check out the Mozilla Developer
Network pages I used to get this information: &lt;a class="reference external" href="https://developer.mozilla.org/En/Developer_Guide/Build_Instructions"&gt;Build Instructions&lt;/a&gt;,
&lt;a class="reference external" href="https://developer.mozilla.org/En/Developer_Guide/Build_Instructions/Windows_Prerequisites"&gt;Windows Build Prerequisites&lt;/a&gt; and &lt;a class="reference external" href="https://developer.mozilla.org/cn/VC8_Build_Instructions"&gt;&lt;span class="caps"&gt;MSVC8&lt;/span&gt; Build Instructions&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="checkout-the-code"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id7"&gt;Checkout the Code:&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We need to checkout the code.  I originally checked out the code with
TortoiseHg (which is what I normally use), but the version of Mercurial
included is significantly greater than the one included in MozillaBuild
and this caused me issues later on.  Thus, we’ll check out the code on
the command line.  Start by launching the bash shell, which is at
C:\mozilla-build\start-msvc8.bat (don’t use the x64 version).  There’s
a version here which corresponds to each version of &lt;span class="caps"&gt;VS&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Once this finishes loading you’ll be in the home directory (which is
in the root of your user’s documents and settings folder, i.e. for me:
C:\Users\clokep).  You’ll want to do the following:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
hg clone https://hg.instantbird.org/instantbird
&lt;/pre&gt;
&lt;p&gt;This might take a few minutes depending on how good your internet
connection is.  (The Instantbird source isn’t &lt;span class="caps"&gt;THAT&lt;/span&gt; big though, it
shouldn’t take too long.)&lt;/p&gt;
&lt;p&gt;Then we’ll need to change into the instantbird directory that was just
created and download the Mozilla source code:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
cd instantbird
python client.py checkout
&lt;/pre&gt;
&lt;p&gt;Now this step?  This one is gonna take a while.  It took me like a
couple of hours.  It pulls the Mozilla source code, which is large and
has many changesets.  Just let it go, it’ll give you progress
occasionally (changes, manifests, files, etc.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id8"&gt;Compiling Instantbird:&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We need to set up the options we want to build with.  These are
read from a .mozconfig (don’t miss the “.” in the front!).  The contents
of the .mozconfig that worked for me are:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
ac_add_options --enable-application=instantbird
mk_add_options MOZ_OBJDIR=@TOPSRCDIR@/objdir-ib-release
ac_add_options --disable-accessibility
&lt;/pre&gt;
&lt;p&gt;The first option says to build Instantbird, the second gives an output
directory and the third &lt;a class="reference external" href="https://developer.mozilla.org/en/atlbase.h"&gt;disables accessibility&lt;/a&gt; (not really sure why
we need to do this, but we’ll get that error at that link otherwise).&lt;/p&gt;
&lt;p&gt;Finally (back in the bash shell) type:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
make -f client.mk build
&lt;/pre&gt;
&lt;p&gt;Now sit back and relax.  My build took about an hour to finish, maybe
a bit less — I wasn’t fully paying attention.  Once it’s done you
should see something like:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Processed 1 file, writing output:

Output:
"c:\\Users\\clokep\\instantbird\\objdir-ib-release\\instantbird\\installer\\windows\\instgen\\helper.exe"
Install: 2 pages (128 bytes), 1 section (16416 bytes), 2579
instructions (72212 bytes), 369 strings (10198 bytes), 1 language table (230 bytes).
Uninstall: 5 pages (320 bytes),
1 section (16416 bytes), 2063 instructions (57764 bytes), 388 strings
(10828 bytes), 1 language table (314 bytes).
Datablock optimizer saved 123940 bytes (~17.6%).
Using zlib compression.
EXE header size:               63488 / 39424 bytes
Install code:                  99564 / 99560 bytes
Install data:                 118002 / 241950 bytes
Uninstall code+data:          398654 / 398646 bytes
CRC (0x062AF3F5):                  4 / 4 bytes
Total size:                   679712 / 779584 bytes (87.1%)
c:/Users/clokep/instantbird/objdir-ib-release/mozilla/config/nsinstall.exe -D ../../../mozilla/dist/bin/uninstall
cp instgen/helper.exe ../../../mozilla/dist/bin/uninstall
make[5]: Leaving directory `/c/Users/clokep/instantbird/objdir-ib-release/instantbird/installer/windows'
make[4]: Leaving directory `/c/Users/clokep/instantbird/objdir-ib-release/instantbird'
make[3]: Leaving directory `/c/Users/clokep/instantbird/objdir-ib-release'
make[2]: Leaving directory `/c/Users/clokep/instantbird/objdir-ib-release'
make[1]: Leaving directory `/c/Users/clokep/instantbird/objdir-ib-release'
&lt;/pre&gt;
&lt;p&gt;Now, to test that the build actually worked we can browse to the
compiled executable and run it:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
cd objdir-ib-release/mozilla/dist/bin/instantbird.exe -P dev -no-remote
&lt;/pre&gt;
&lt;p&gt;The -P option specifies a profile name (dev), the second option
(-no-remote) allows you to run a second Instantbird instance (since I
assume you use Instantbird to &lt;span class="caps"&gt;IM&lt;/span&gt;…you probably want to be able to run a
second one, if you don’t use it…shame on you. Try not to close the
wrong Instantbird when you’re working on stuff).&lt;/p&gt;
&lt;p&gt;Hopefully this will help someone else get started on hacking
Instantbird.  There’s other good ways you can hack too if your computer
can’t handle compiling, including unpacking omni.jar.&lt;/p&gt;
&lt;p&gt;One last tidbit is to possibly add the option to your .mozconfig:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
--enable-chrome-format=flat
&lt;/pre&gt;
&lt;p&gt;This will not package anything in JARs (which pretty much just get in
the way while developing).  See &lt;a class="reference external" href="https://developer.mozilla.org/en/JAR_Packaging"&gt;here&lt;/a&gt; for more info.&lt;/p&gt;
&lt;p&gt;Edit: Fixed the path to the executable thanks to Florian. And fixed a
spelling error in the title.&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Patrick Cloke</dc:creator><pubDate>Mon, 16 May 2011 21:30:00 -0400</pubDate><guid>tag:patrick.cloke.us,2011-05-16:posts/2011/05/16/compilling-instantbird/</guid><category>Instantbird</category><category>Mozilla</category><category>programming</category></item><item><title>Why rewrite the IRC protocol plugin? (Part 2)</title><link>http://patrick.cloke.us/posts/2011/04/30/why-rewrite-irc-protocol-plugin-part-2/</link><description>&lt;p&gt;I &lt;a class="reference external" href="http://patrick.cloke.us/posts/2010/12/08/why-rewrite-irc-into-javascript/"&gt;previously wrote about&lt;/a&gt; why I&amp;#8217;m rewriting the libpurple &lt;span class="caps"&gt;IRC&lt;/span&gt;
implementation into a JavaScript implementation for Instantbird.&amp;nbsp; This
is kind of a follow up, but more focused on what I hope to accomplish
feature wise for &lt;span class="caps"&gt;IRC&lt;/span&gt; in Instantbird.&amp;nbsp; A good overview to look at is the
&lt;a class="reference external" href="https://bugzilla.instantbird.org/showdependencygraph.cgi?id=507&amp;amp;display=web&amp;amp;rankdir=LR"&gt;dependencies of bug 507&lt;/a&gt; (implement &lt;span class="caps"&gt;IRC&lt;/span&gt; in JavaScript) &amp;#8212; you&amp;#8217;ll want
to look to the left of bug 507, these are the bugs that depend on 507
(as opposed to blocking&amp;nbsp;507).&lt;/p&gt;
&lt;p&gt;My overall hope is to make Instantbird the easiest and simplest &lt;span class="caps"&gt;IRC&lt;/span&gt;
client to use.&amp;nbsp; I&amp;#8217;ve found that most &lt;span class="caps"&gt;IRC&lt;/span&gt; clients tend to depend a great
deal on commands and essentially being a very thin &lt;span class="caps"&gt;GUI&lt;/span&gt; layer on top of
the protocol.&amp;nbsp; I don&amp;#8217;t really see the reason for this, we should attempt
to hide the protocol as much as possible from the users.&amp;nbsp; This means
fitting the &lt;span class="caps"&gt;IRC&lt;/span&gt; command responses into the &lt;span class="caps"&gt;GUI&lt;/span&gt; wherever possible and
possibly &amp;#8220;losing&amp;#8221; some features compared to other &lt;span class="caps"&gt;IRC&lt;/span&gt; clients, although
I think that&amp;#8217;s a matter of perspective.&amp;nbsp; (For example, there&amp;#8217;s often an
&lt;span class="caps"&gt;IRC&lt;/span&gt; command to list all the channels available, I &lt;em&gt;do not&lt;/em&gt; think this
should be implemented as a text command, but it should be available via
the join chat &lt;span class="caps"&gt;GUI&lt;/span&gt;).&lt;/p&gt;
&lt;p&gt;Now some more specific&amp;nbsp;plans:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Support for &lt;span class="caps"&gt;IRC&lt;/span&gt; services would be pretty awesome, I&amp;#8217;m not sure
whether this would be part of the main protocol or as an extension,
but it should be able to handle NickServ mostly autonomously
(possibly even automatically registering the nick, etc.).&amp;nbsp; MemoServ
could be implemented as a message service once there is &lt;span class="caps"&gt;UI&lt;/span&gt; for that
in Instantbird.&amp;nbsp; I&amp;#8217;m not sure how ChanServ could be handled in the
&lt;span class="caps"&gt;UI&lt;/span&gt;, but I&amp;#8217;ll think more about this.&amp;nbsp; See &lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=720"&gt;bug 720&lt;/a&gt; for more info.
(And yes, there are multiple versions of &lt;span class="caps"&gt;IRC&lt;/span&gt; services, but we can
attempt to support a subset and otherwise just leave it up to the
user.&amp;nbsp; Ideally servers would have supported this stuff&amp;#8230;but that&amp;#8217;s
not how &lt;span class="caps"&gt;IRC&lt;/span&gt;&amp;nbsp;works.)&lt;/li&gt;
&lt;li&gt;The &lt;span class="caps"&gt;UI&lt;/span&gt; should be more responsive to the modes of the user and to the
channel.&amp;nbsp; For example, if the user does not have permission to edit
the topic, it should not be editable in the &lt;span class="caps"&gt;UI&lt;/span&gt; (&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=318"&gt;bug 318&lt;/a&gt;).&amp;nbsp; Also,
if a user is a (half-)operator, there should be &lt;span class="caps"&gt;UI&lt;/span&gt; to have cause
other users to be given (h)op (&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=597"&gt;bug 597&lt;/a&gt;).&amp;nbsp; In terms of channel
modes, there could be &lt;span class="caps"&gt;UI&lt;/span&gt; to show the channel is invite only or that
it&amp;#8217;s a hidden&amp;nbsp;channel.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There&amp;#8217;s some not as user visible improvements I&amp;#8217;d like to&amp;nbsp;make:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Supporting more authentication methods in &lt;span class="caps"&gt;IRC&lt;/span&gt; (&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=719"&gt;bug 719&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There&amp;#8217;s also a few &amp;#8220;bugs&amp;#8221; in the libpurple implementation that this
will&amp;nbsp;fix:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The /msg command doesn&amp;#8217;t show outgoing messages (&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=188"&gt;bug 188&lt;/a&gt;).&amp;nbsp; I
believe this is actually already&amp;nbsp;fixed.&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;IRC&lt;/span&gt; channels should automatically rejoin on reconnect (&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=385"&gt;bug 385&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Chats with other users should show whether they are available or not
(&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=613"&gt;bug 613&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These are just some ideas and it&amp;#8217;s a long ways off for feature parity
with libpurple even.&amp;nbsp; (Although since Instantbird doesn&amp;#8217;t support all
the features of Pidgin, feature-parity in this case doesn&amp;#8217;t include
things like &lt;span class="caps"&gt;DCC&lt;/span&gt; transfer, etc. until Instantbird itself supports&amp;nbsp;those.)&lt;/p&gt;
&lt;p&gt;Right now, the code is mostly usable (and I&amp;#8217;m finally catching any
exceptions that are thrown so the code shouldn&amp;#8217;t crash anymore), and
works fine.&amp;nbsp; The one issue I&amp;#8217;m having is sometimes I&amp;#8217;m unable to
reconnect when the connection is lost, but I think I&amp;#8217;ve finally fixed
that issue and reconnection should happen&amp;nbsp;automatically!&lt;/p&gt;
&lt;p&gt;One last quick note, if you happen to have the &lt;a class="reference external" href="https://hg.instantbird.org/experiments"&gt;repository&lt;/a&gt; checked
out, you&amp;#8217;ll want to update on the default branch from now on as I&amp;#8217;ve
merged the separate branches together under&amp;nbsp;subfolders.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Patrick Cloke</dc:creator><pubDate>Sat, 30 Apr 2011 13:01:00 -0400</pubDate><guid>tag:patrick.cloke.us,2011-04-30:posts/2011/04/30/why-rewrite-irc-protocol-plugin-part-2/</guid><category>Instantbird</category><category>IRC</category></item><item><title>The so-called IRC “specifications”</title><link>http://patrick.cloke.us/posts/2011/03/08/so-called-irc-specifications/</link><description>
&lt;p&gt;In a &lt;a class="reference external" href="http://patrick.cloke.us/posts/2010/12/08/why-rewrite-irc-into-javascript/"&gt;previous post&lt;/a&gt; I had briefly gone over the “history of &lt;span class="caps"&gt;IRC&lt;/span&gt;” as
I know it.  I’m going to expand on this a bit as I’ve come to understand
it a bit more while reading through documentation.  (Hopefully it won’t
sound too much like a rant, as it is all driving me crazy!)&lt;/p&gt;
&lt;div class="section" id="irc-specifications"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id5"&gt;&lt;span class="caps"&gt;IRC&lt;/span&gt; Specifications&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So there’s the original specification (&lt;a class="reference external" href="http://tools.ietf.org/html/rfc1459"&gt;&lt;span class="caps"&gt;RFC&lt;/span&gt; 1459&lt;/a&gt;) in May 1993; this
was expanded and replaced by four different specifications (&lt;a class="reference external" href="http://tools.ietf.org/html/rfc2810"&gt;&lt;span class="caps"&gt;RFC&lt;/span&gt; 2810&lt;/a&gt;,
&lt;a class="reference external" href="http://tools.ietf.org/html/rfc2811"&gt;2811&lt;/a&gt;, &lt;a class="reference external" href="http://tools.ietf.org/html/rfc2812"&gt;2812&lt;/a&gt;, &lt;a class="reference external" href="http://tools.ietf.org/html/rfc2813"&gt;2813&lt;/a&gt;) in April 2000.  Seems pretty straightforward, right?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="dcc-ctcp"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id6"&gt;&lt;span class="caps"&gt;DCC&lt;/span&gt;/&lt;span class="caps"&gt;CTCP&lt;/span&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Well, kind of…there’s also the &lt;span class="caps"&gt;DCC&lt;/span&gt;/&lt;span class="caps"&gt;CTCP&lt;/span&gt; specifications, which is a
separate protocol embedded/hidden within the &lt;span class="caps"&gt;IRC&lt;/span&gt; protocol (e.g. they’re
sent as &lt;span class="caps"&gt;IRC&lt;/span&gt; messages and parsed specially by clients, the server sees
them as normal messages).  &lt;span class="caps"&gt;DCC&lt;/span&gt;/&lt;span class="caps"&gt;CTCP&lt;/span&gt; is used to send files as well as
other particular messages (&lt;span class="caps"&gt;ACTION&lt;/span&gt; commands for roleplaying, &lt;span class="caps"&gt;SED&lt;/span&gt; for
encrypting conversations, &lt;span class="caps"&gt;VERSION&lt;/span&gt; to get client information, etc.).
Anyway, this get’s a bit more complicated — it starts with the &lt;a class="reference external" href="http://www.irchelp.org/irchelp/rfc/dccspec.html"&gt;&lt;span class="caps"&gt;DCC&lt;/span&gt;
specification&lt;/a&gt;.  This was replaced/updated by the &lt;a class="reference external" href="http://www.irchelp.org/irchelp/rfc/ctcpspec.html"&gt;&lt;span class="caps"&gt;CTCP&lt;/span&gt; specification&lt;/a&gt;
(which fully includes the &lt;span class="caps"&gt;DCC&lt;/span&gt; specification) in 1994.  An &lt;a class="reference external" href="https://web.archive.org/web/20101129023108/http://www.invlogic.com/irc/ctcp.html"&gt;“updated”
&lt;span class="caps"&gt;CTCP&lt;/span&gt; specification&lt;/a&gt; was released in February 1997.  There’s also a
&lt;a class="reference external" href="https://web.archive.org/web/20080723170128/http://www.invlogic.com/irc/ctcp2_intro.html"&gt;&lt;span class="caps"&gt;CTCP&lt;/span&gt;/2 specification&lt;/a&gt; from October 1998, which was meant to
reformulate a lot of the previous three versions.  And &lt;em&gt;finally&lt;/em&gt;,
there’s the &lt;span class="caps"&gt;DCC2&lt;/span&gt; specification (two parts: &lt;a class="reference external" href="http://tools.ietf.org/html/draft-smith-irc-dcc2-negotiation-00"&gt;connection negotiation&lt;/a&gt; and
&lt;a class="reference external" href="http://www.dcc2.org/files/dcc2/draft-smith-irc-dcc2-files-00.txt"&gt;file transfers&lt;/a&gt;) from April 2004.&lt;/p&gt;
&lt;p&gt;But wait!  I lied…that’s not really the end of &lt;span class="caps"&gt;DCC&lt;/span&gt;/&lt;span class="caps"&gt;CTCP&lt;/span&gt;, there’s
also a bunch of extensions to it: &lt;a class="reference external" href="http://www.visualirc.net/tech-tdcc.php"&gt;Turbo &lt;span class="caps"&gt;DCC&lt;/span&gt;&lt;/a&gt;, &lt;a class="reference external" href="http://xa.bi/files/irc/xdcc.3.3.0b.irc"&gt;&lt;span class="caps"&gt;XDCC&lt;/span&gt; (eXtended &lt;span class="caps"&gt;DCC&lt;/span&gt;)&lt;/a&gt;
in 1993, &lt;a class="reference external" href="http://www.visualirc.net/tech-wboard.php"&gt;&lt;span class="caps"&gt;DCC&lt;/span&gt; Whiteboard&lt;/a&gt;, and a few other variations of this: &lt;span class="caps"&gt;RDCC&lt;/span&gt;
(Reverse &lt;span class="caps"&gt;DCC&lt;/span&gt;), &lt;span class="caps"&gt;SDD&lt;/span&gt; (Secure &lt;span class="caps"&gt;DCC&lt;/span&gt;), &lt;span class="caps"&gt;DCC&lt;/span&gt; Voice, etc.  Wikipedia has a &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Direct_Client-to-Client"&gt;good
summary&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Something else to note about the whole &lt;span class="caps"&gt;DCC&lt;/span&gt;/&lt;span class="caps"&gt;CTCP&lt;/span&gt; mess…parts of it
just &lt;em&gt;don’t&lt;/em&gt; have any documentation.  There’s &lt;em&gt;none&lt;/em&gt;at all for &lt;span class="caps"&gt;SED&lt;/span&gt; (at
least that I’ve found, I’d love to be proved wrong) and very little
(really just a mention) for &lt;span class="caps"&gt;DCC&lt;/span&gt; Voice.&lt;/p&gt;
&lt;p&gt;So, we’re about halfway through now.  There’s a bunch of extensions to
the &lt;span class="caps"&gt;IRC&lt;/span&gt; protocol specifications that add new commands to the actual protocol.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="authentication"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id7"&gt;Authentication&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Originally &lt;span class="caps"&gt;IRC&lt;/span&gt; had no authentication ability except the &lt;span class="caps"&gt;PASS&lt;/span&gt; command,
which very few servers seem to use, a variety of mechanisms have
replaced this, including &lt;a class="reference external" href="https://raw.githubusercontent.com/atheme/charybdis/master/doc/sasl.txt"&gt;&lt;span class="caps"&gt;SASL&lt;/span&gt; authentication&lt;/a&gt; (both &lt;span class="caps"&gt;PLAIN&lt;/span&gt; and &lt;span class="caps"&gt;BLOWFISH&lt;/span&gt;
methods, although &lt;span class="caps"&gt;BLOWFISH&lt;/span&gt; isn’t documented); and &lt;span class="caps"&gt;SASL&lt;/span&gt; itself is covered
by at least &lt;a class="reference external" href="http://tools.ietf.org/html/rfc2222"&gt;four&lt;/a&gt; &lt;a class="reference external" href="http://tools.ietf.org/html/rfc4422"&gt;RFCs&lt;/a&gt; &lt;a class="reference external" href="http://tools.ietf.org/html/rfc2595"&gt;in this&lt;/a&gt; &lt;a class="reference external" href="http://tools.ietf.org/html/rfc4616"&gt;situation&lt;/a&gt;.  There also seems
to be a method called “Auth” which I haven’t been able to pin down, as
well as Ident (which is a more general protocol authentication method I
haven’t looked into yet).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="extension-support"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id8"&gt;Extension Support&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This includes a few that generally add a way by which servers are able
to tell their clients exactly what a server supports.  The first of
these was RPL_ISUPPORT, which was defined as a &lt;a class="reference external" href="http://tools.ietf.org/html/draft-brocklesby-irc-isupport-03"&gt;draft specification&lt;/a&gt;
in January 2004, and &lt;a class="reference external" href="http://tools.ietf.org/html/draft-hardy-irc-isupport-00"&gt;updated&lt;/a&gt; in January of 2005.&lt;/p&gt;
&lt;p&gt;A similar concept was defined as &lt;a class="reference external" href="http://tools.ietf.org/html/draft-mitchell-irc-capabilities-01"&gt;&lt;span class="caps"&gt;IRC&lt;/span&gt; Capabilities&lt;/a&gt; in March 2005.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="protocol-extensions"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id9"&gt;Protocol Extensions&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span class="caps"&gt;IRCX&lt;/span&gt;, a Microsoft extension to &lt;span class="caps"&gt;IRC&lt;/span&gt; used (at one point) for some of
it’s instant messaging products &lt;a class="reference external" href="http://tools.ietf.org/html/draft-pfenning-irc-extensions-04"&gt;exists as a draft&lt;/a&gt; from June 1998.&lt;/p&gt;
&lt;p&gt;There’s also:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The &lt;a class="reference external" href="https://github.com/atheme/charybdis/raw/master/doc/monitor.txt"&gt;&lt;span class="caps"&gt;MONITOR&lt;/span&gt;&lt;/a&gt; command.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://raw.githubusercontent.com/atheme/charybdis/master/doc/modeg.txt"&gt;User mode +g&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://raw.githubusercontent.com/atheme/charybdis/master/doc/services.txt"&gt;Services compatibility modes&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://raw.githubusercontent.com/atheme/charybdis/master/doc/account-notify.txt"&gt;Account-notify client capability&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://raw.githubusercontent.com/atheme/charybdis/master/doc/tgchange.txt"&gt;Target change for messages&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="services"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id10"&gt;Services&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To fill in some of the missing features of &lt;span class="caps"&gt;IRC&lt;/span&gt;, services were created
(Wikipedia has a good &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Internet_Relay_Chat_services"&gt;summary&lt;/a&gt; again).  This commonly includes
ChanServ, NickServ, OperServ, and MemoServ.  Not too hard, but different
server packages include different services (or even the same services
that behave differently), one of more common ones is &lt;a class="reference external" href="http://www.anope.org/docgen/1.8/en_us/"&gt;Anope&lt;/a&gt;, however
(plus they have awesome documentation, so they get a link).&lt;/p&gt;
&lt;p&gt;There was an attempt to standardize how to interact with services
called &lt;span class="caps"&gt;IRC&lt;/span&gt;+, which included three specifications: &lt;a class="reference external" href="http://www.irc-plus.org/specs/confctrl-draft.html"&gt;conference control
protocol&lt;/a&gt;, &lt;a class="reference external" href="http://www.irc-plus.org/specs/identity-draft.html"&gt;identity protocol&lt;/a&gt; and &lt;a class="reference external" href="http://www.irc-plus.org/specs/subscriptions-draft.html"&gt;subscriptions protocol&lt;/a&gt;.  I don’t
believe this are supported widely (if at all).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="irc-url-scheme"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id11"&gt;&lt;span class="caps"&gt;IRC&lt;/span&gt; &lt;span class="caps"&gt;URL&lt;/span&gt; Scheme&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Finally this brings us to the &lt;span class="caps"&gt;IRC&lt;/span&gt; &lt;span class="caps"&gt;URL&lt;/span&gt; scheme of which there are a few
versions.  A draft from August 1996 defines the original &lt;a class="reference external" href="http://tools.ietf.org/html/draft-mirashi-url-irc-01"&gt;irc: &lt;span class="caps"&gt;URL&lt;/span&gt;
scheme&lt;/a&gt;.  This was updated/replaced by &lt;a class="reference external" href="http://tools.ietf.org/html/draft-butcher-irc-url-04"&gt;another draft&lt;/a&gt; which defines
irc: and ircs: &lt;span class="caps"&gt;URL&lt;/span&gt; schemes.&lt;/p&gt;
&lt;p&gt;As of right now that’s all that I’ve found…an awful lot.  Plus it’s
not all compatible with each other (and sometimes out right contradicts
each other).  Often newer specifications say not to support older
specifications, but who knows what servers/clients you’ll end up talking
to!  It’s difficult to know what’s used in practice, especially since
there’s an awful lot of &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Comparison_of_IRC_daemons"&gt;&lt;span class="caps"&gt;IRC&lt;/span&gt; servers&lt;/a&gt; out there.  Anyway, if someone
does know of another specification, etc. that I missed please let me know!&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;Updated [2014-12-20]&lt;/dt&gt;
&lt;dd&gt;Fixed some dead links. Unfortunately some links now point to the &lt;a class="reference external" href="https://archive.org/web/"&gt;Wayback
Machine&lt;/a&gt;. There are also copies of most, if not all, of these links in my
&lt;a class="reference external" href="https://bitbucket.org/clokep/irc-docs"&gt;irc-docs repository&lt;/a&gt;. Thanks Ultra Rocks for the heads up!&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Patrick Cloke</dc:creator><pubDate>Sat, 20 Dec 2014 15:55:00 -0500</pubDate><guid>tag:patrick.cloke.us,2011-03-08:posts/2011/03/08/so-called-irc-specifications/</guid><category>Instantbird</category><category>IRC</category><category>programming</category><category>specifications</category></item><item><title>Status Update - February 17, 2011</title><link>http://patrick.cloke.us/posts/2011/02/17/status-update-february-17-2011/</link><description>&lt;p&gt;Another month has gone by so it&amp;#8217;s time for another status update.
Unfortunately not as much got done this month as I was hoping, but
here&amp;#8217;s a quick update of what I&amp;#8217;ve worked&amp;nbsp;on:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=690"&gt;Bug 690&lt;/a&gt; - jsProtoHelper could help registering&amp;nbsp;commands&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=661"&gt;Bug 661&lt;/a&gt; - JavaScript accounts do not automatically set
containsNick field on&amp;nbsp;messages&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=686"&gt;Bug 686&lt;/a&gt; - Implement default chat name for
getChatRoomDefaultFieldValues for&amp;nbsp;js-proto&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Florian also implemented a few things that are really helpful for
JavaScript&amp;nbsp;protocols:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=649"&gt;Bug 649&lt;/a&gt; - purple proxies should not be in the way of JavaScript&amp;nbsp;protocols&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=118"&gt;Bug 118&lt;/a&gt; - Extensions should be able to register&amp;nbsp;commands.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In addition, Twitter support was added to nightly builds as a
JavaScript protocol (&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=598"&gt;bug 598&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Hopefully next I&amp;#8217;ll implement most of the commands for &lt;span class="caps"&gt;IRC&lt;/span&gt; (within the
next week) at which point I&amp;#8217;ll release a sample extension (which will
overwrite the libpurple &lt;span class="caps"&gt;IRC&lt;/span&gt; implementation), allowing people to test
without needing to make a new account,&amp;nbsp;etc.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Patrick Cloke</dc:creator><pubDate>Thu, 17 Feb 2011 19:21:00 -0500</pubDate><guid>tag:patrick.cloke.us,2011-02-17:posts/2011/02/17/status-update-february-17-2011/</guid><category>Instantbird</category><category>IRC</category><category>programming</category></item><item><title>Status Update - January 18, 2011</title><link>http://patrick.cloke.us/posts/2011/01/18/status-update-january-18-2011/</link><description>&lt;p&gt;I haven&amp;#8217;t had an update in a few weeks (since early December)
actually, so I thought I would post a bit about what I&amp;#8217;ve worked on.
I&amp;#8217;ve fixed a bunch of bugs in the backend of Instantbird that allow work
on JavaScript &lt;span class="caps"&gt;IRC&lt;/span&gt; protocol to&amp;nbsp;continue:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=519"&gt;Bug 519&lt;/a&gt; - Extend jsProtoHelper to implement purpleIConvChat
(&lt;a class="reference external" href="http://hg.instantbird.org/instantbird/rev/0166084ce2ae"&gt;check-in&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=495"&gt;Bug 495&lt;/a&gt; - purpleIAccount cannot access preferences via JavaScript
protocol (&lt;a class="reference external" href="http://hg.instantbird.org/instantbird/rev/a188a5cc3ff1"&gt;check-in&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=648"&gt;Bug 648&lt;/a&gt; -Provide a default &lt;span class="caps"&gt;JS&lt;/span&gt; implementation of
purpleIChatRoomField
(&lt;a class="reference external" href="http://hg.instantbird.org/instantbird/rev/61fc80a569d3"&gt;check-in&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;[Reviewed] &lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=647"&gt;Bug 647&lt;/a&gt; - Username split for JavaScript protocols
(&lt;a class="reference external" href="http://hg.instantbird.org/instantbird/rev/a6c8fbf77e10"&gt;check-in&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;[Reviewed] &amp;lt;no bug&amp;gt; -Share the nsIClassInfo implementation between
all the objects implemented in jsProtoHelper
(&lt;a class="reference external" href="http://hg.instantbird.org/instantbird/rev/035f7d8d7f78"&gt;check-in&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Also a few other random bugs I&amp;#8217;ve worked&amp;nbsp;on:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=625"&gt;Bug 625&lt;/a&gt; - Findbar broken on Windows in Conversation window
(&lt;a class="reference external" href="http://hg.instantbird.org/instantbird/rev/2e8af77af2f2"&gt;check-in&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=629"&gt;Bug 629&lt;/a&gt; - Remove workaround for bug 503048
(&lt;a class="reference external" href="http://hg.instantbird.org/instantbird/rev/ba4b9401791b"&gt;check-in&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=473"&gt;Bug 473&lt;/a&gt; - &lt;span class="caps"&gt;JS&lt;/span&gt; Logger line breaks don&amp;#8217;t play well on Windows
&lt;a class="reference external" href="http://hg.instantbird.org/instantbird/rev/6a600b8a32c9"&gt;(check-in&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=593"&gt;Bug 593&lt;/a&gt; - JavaScript component does not have a method named:
&amp;#8220;onBeforeLinkTraversal&amp;#8221;
(&lt;a class="reference external" href="http://hg.instantbird.org/instantbird/rev/1b75f9fa4859"&gt;check-in&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Although none of these are really things that weren&amp;#8217;t working a few
weeks ago, there are now real APIs for these for JavaScript protocols,
allowing other protocols to use them and to &lt;em&gt;&lt;span class="caps"&gt;FULLY&lt;/span&gt;&lt;/em&gt; implement them
instead of hard coding values.&amp;nbsp; In addition, a lot of the purplexpcom
layer is now hidden from JavaScript&amp;nbsp;protocols.&lt;/p&gt;
&lt;p&gt;There&amp;#8217;s a few things left to do for the JavaScript protocol&amp;nbsp;layer:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=118"&gt;Bug 118&lt;/a&gt; - Extensions should be able to register&amp;nbsp;commands.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=650"&gt;Bug 650&lt;/a&gt; - JavaScript accounts must be notified of status changes
(a sketchy patch that exists that will work, but a better patch to
core should be&amp;nbsp;done)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=623"&gt;Bug 623&lt;/a&gt; - Auto-Join option field is hard coded for certain
protocols (not &lt;em&gt;really&lt;/em&gt; necessary, since it&amp;#8217;s still &lt;span class="caps"&gt;IRC&lt;/span&gt;, but it
should be&amp;nbsp;fixed)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=649"&gt;Bug 649&lt;/a&gt; - Proxy should be available to JavaScript protocols
(hopefully being handled by&amp;nbsp;Florian)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A good summary of this is &lt;a class="reference external" href="https://bugzilla.instantbird.org/showdependencygraph.cgi?id=507&amp;amp;display=web&amp;amp;rankdir=LR"&gt;the dependency graph of bug 507&lt;/a&gt;
(Implement &lt;span class="caps"&gt;IRC&lt;/span&gt; in JavaScript).&amp;nbsp; Note that the &lt;span class="caps"&gt;IRC&lt;/span&gt; JavaScript work blocks
&lt;em&gt;a&amp;nbsp; lot&lt;/em&gt; of &lt;span class="caps"&gt;UI&lt;/span&gt; work done for &lt;span class="caps"&gt;IRC&lt;/span&gt;.&amp;nbsp; In particular Mook has been working
on implementing notifications (i.e. Invites, and perhaps a few other
commands), see &lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=628"&gt;Bug 628&lt;/a&gt;.&amp;nbsp; For other bugs, see the link above &amp;#8212; and if
there&amp;#8217;s a strange &lt;span class="caps"&gt;UI&lt;/span&gt; feature that you think should be added, please file
a bug and let us know about&amp;nbsp;it!&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve also worked a bit on sending outgoing text with rich formatting
(bold, italics, underline, text size, etc.), this work is being tracked
in &lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=634"&gt;Bug 634&lt;/a&gt;. There&amp;#8217;s a proof on concept, but a lot of work needs to be
done for it, but it&amp;#8217;s sort of working right&amp;nbsp;now.&lt;/p&gt;
&lt;p&gt;As I alluded to in my last blog post, the JavaScript protocols would
be used to implement Twitter. Work for this is occurring in &lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=598"&gt;Bug 598&lt;/a&gt;,
where Florian has implemented (very) basic Twitter&amp;nbsp;support.&lt;/p&gt;
&lt;p&gt;My plans for the next&amp;nbsp;bit:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;I&amp;#8217;m hoping to finish up some of the work blocking JavaScript
protocols so &lt;span class="caps"&gt;IRC&lt;/span&gt; can be put into a state that needs alpha/beta
testers (if you&amp;#8217;re interested in testing/hacking please drop me a
line here, on &lt;span class="caps"&gt;IRC&lt;/span&gt; or via&amp;nbsp;email).&lt;/li&gt;
&lt;li&gt;Move into my new&amp;nbsp;apartment&lt;/li&gt;
&lt;li&gt;Start my new&amp;nbsp;job&lt;/li&gt;
&lt;li&gt;Work on richtext messages a bit&amp;nbsp;more&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Patrick Cloke</dc:creator><pubDate>Tue, 18 Jan 2011 23:17:00 -0500</pubDate><guid>tag:patrick.cloke.us,2011-01-18:posts/2011/01/18/status-update-january-18-2011/</guid><category>Instantbird</category><category>IRC</category><category>Mozilla</category><category>programming</category></item><item><title>Blogger RSS Feeds for a Label</title><link>http://patrick.cloke.us/posts/2010/12/08/blogger-rss-feeds-for-label/</link><description>&lt;p&gt;Blogger has crappy support for &lt;span class="caps"&gt;RSS&lt;/span&gt; apparently.&amp;nbsp; I figured if I clicked
on a label, then found the &lt;span class="caps"&gt;RSS&lt;/span&gt; embedded in the page&amp;#8230;it would give me
the &lt;span class="caps"&gt;RSS&lt;/span&gt; feed for that label,&amp;nbsp;right?&lt;/p&gt;
&lt;p&gt;Wrong.&lt;/p&gt;
&lt;p&gt;Of course there&amp;#8217;s an&amp;nbsp;&lt;a class="reference external" href="http://www.google.com/support/blogger/bin/answer.py?hl=en&amp;amp;answer=97933"&gt;&lt;span class="caps"&gt;FAQ&lt;/span&gt;&lt;/a&gt; page about this, but the syntax it gives
is broken.&amp;nbsp; For a specific label (I&amp;#8217;m using the label&amp;nbsp;&amp;#8220;Instantbird&amp;#8221;):&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;span class="caps"&gt;RSS&lt;/span&gt;:
&lt;a class="reference external" href="http://clokep.blogspot.com/feeds/posts/default/-/Instantbird?alt=rss"&gt;http://clokep.blogspot.com/feeds/posts/default/-/Instantbird?alt=rss&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Atom: &lt;a class="reference external" href="http://clokep.blogspot.com/feeds/posts/default/-/Instantbird"&gt;http://clokep.blogspot.com/feeds/posts/default/-/Instantbird&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Who knows what versions of &lt;span class="caps"&gt;RSS&lt;/span&gt;/Atom these are.&amp;nbsp; But the feeds do&amp;nbsp;exist.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Patrick Cloke</dc:creator><pubDate>Wed, 08 Dec 2010 15:25:00 -0500</pubDate><guid>tag:patrick.cloke.us,2010-12-08:posts/2010/12/08/blogger-rss-feeds-for-label/</guid><category>bugs</category><category>Google</category><category>RSS</category></item><item><title>Why Rewrite IRC into JavaScript? (vs. libpurple’s vs. ChatZilla’s)</title><link>http://patrick.cloke.us/posts/2010/12/08/why-rewrite-irc-into-javascript/</link><description>
&lt;p&gt;I had a request on &lt;span class="caps"&gt;IRC&lt;/span&gt; (from Mic) to write an in-depth blog post
about &lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=507"&gt;&lt;span class="caps"&gt;IRC&lt;/span&gt; in JavaScript&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
“Maybe we could ask clokep if he’d like to write something about
js-irc? Why it is done, what the advantages are once it’s done, how
he is working on it (going through the specs), putting the
jsProtocol code to test and adding missing pieces?” — &lt;a class="reference external" href="http://log.bezut.info/instantbird/101208/#m54"&gt;Mic&lt;/a&gt;&lt;/blockquote&gt;
&lt;div class="section" id="wait-a-second-what-is-irc"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;Wait a second, what is &lt;span class="caps"&gt;IRC&lt;/span&gt;?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I guess this is a good first question, I’ll steal from &lt;a class="reference external" href="http://en.wikipedia.org/wiki/IRC"&gt;Wikipedia&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
Internet Relay Chat (&lt;span class="caps"&gt;IRC&lt;/span&gt;) is a form of real-time […] chat […] It
is mainly designed for group communication […] but also allows
[…for…] private message as well as chat and data transfers.&lt;/blockquote&gt;
&lt;p&gt;Awesome, what’s that really mean?  It’s an instant messaging protocol
with an actual specification (i.e. it’s not owned by some large, unnamed
company), with open-source libraries for clients and servers.  It’s
usually used by more computer-oriented types of people and centers
around group conversation.  Personally most of what I use it for is
open-source software I use (I’m almost always in &lt;a class="reference external" href="irc://irc.mozilla.org/#instantbird"&gt;#instantbird&lt;/a&gt;,
&lt;a class="reference external" href="irc://irc.mozilla.org/#maildev"&gt;#maildev&lt;/a&gt;, and &lt;a class="reference external" href="irc://irc.mozilla.org/#songbird"&gt;#songbird&lt;/a&gt; on &lt;a class="reference external" href="http://irc.mozilla.org/"&gt;Mozilla’s &lt;span class="caps"&gt;IRC&lt;/span&gt; servers&lt;/a&gt;.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="why-it-is-done-what-advantages-are-there-once-this-is-done"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4"&gt;Why it is done?  What advantages are there once this is done?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I touched upon this a little in my &lt;a class="reference external" href="http://patrick.cloke.us/posts/2010/12/04/javascript-irc-in-instantbird/"&gt;last post&lt;/a&gt;.  In terms of
Instantbird: there’s an idea of switching some / all of the protocols
(eventually) to be JavaScript protocols instead of the libpurple
versions (libpurple is written mostly in C and is cross-platform, but
recent gains in speed in JavaScript allow this advantage of libpurple to
not matter as much).  This would unfortunately mean we need to maintain
a lot more code, but it would allow us to integrate protocols in any way
that we see fit, instead of only using APIs / methods provided by
libpurple.  Hopefully this would allow us to &lt;a class="reference external" href="https://bugzilla.instantbird.org/showdependencytree.cgi?id=507&amp;amp;maxdepth=2&amp;amp;hide_resolved=1"&gt;enhance our &lt;span class="caps"&gt;IRC&lt;/span&gt;
implementation&lt;/a&gt; a bit.&lt;/p&gt;
&lt;p&gt;Also, Instantbird (nightlies) currently have limited support for
generating a protocol plug-in in JavaScript.  A couple of “test”
protocols have be done, but nothing in “real” (in particular, none that
used a multi-user chat).  This would allow us to iron out &lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=519"&gt;some&lt;/a&gt;
&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=118"&gt;bugs&lt;/a&gt; in the implementation of JavaScript protocols.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;[Edit: Florian suggested another question that wasn’t originally
covered, which some people more familiar with Mozilla code might be wondering.]&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="why-aren-t-you-using-the-code-from-chatzilla"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id5"&gt;Why aren’t you using the code from ChatZilla?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This was a tough one.  Honestly when I first wanted a parsing
algorithm, I looked at the ChatZilla code, I used it.  Then rewrote it
in a fourth as many lines (&lt;a class="reference external" href="http://hg.mozilla.org/chatzilla/file/tip/js/lib/irc.js#l1250"&gt;93&lt;/a&gt; vs. &lt;a class="reference external" href="https://hg.instantbird.org/experiments/file/IRC-JavaScript/components/ircProtocol.js#l208"&gt;20&lt;/a&gt;).  Simply said, the code in
ChatZilla is &lt;em&gt;old&lt;/em&gt;, it doesn’t use many of the features available only
in newer versions of JavaScript.  To that point, the ChatZilla code
hasn’t been updated in over a year!  The last check-in was: 2009-10-03,
below is a &lt;a class="reference external" href="http://hg.mozilla.org/chatzilla/log/tip/js/lib/irc.js"&gt;quick summary&lt;/a&gt; of the number of check-ins per year:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;2010: 0&lt;/li&gt;
&lt;li&gt;2009: 5&lt;/li&gt;
&lt;li&gt;2008: 15&lt;/li&gt;
&lt;li&gt;2007: 11&lt;/li&gt;
&lt;li&gt;2006: 18&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There’s been a pretty steady decline in check-ins.  I could take this
code and attempt to whip it into shape and make huge sweeping changes
and commit them back to ChatZilla, but honestly it was easier to start
over for me.  Regardless of ease, I’m not sure it would work any:
especially since the ChatZilla code seems overly complicated and overly
specific (since it wasn’t really built as a library as far as I can
see), especially since all the code is meant to deal only with &lt;span class="caps"&gt;IRC&lt;/span&gt;.  The
Instantbird code needs to be protocol agnostic to a degree, while is why
it interfaces to purplexpcom.&lt;/p&gt;
&lt;p&gt;A quick example of this is: ChatZilla uses a CIRCUser object, but for
Instantbird I need to create either an imIContact or a
purpleIAccountBuddy (depending on the situation).  It’s possible that’s
can be abstracted and code shared — but I’m not sure it would be worth
the effort.  After all this, I should probably look more into the
ChatZilla code, perhaps more of it could be used.&lt;/p&gt;
&lt;p&gt;(If someone familiar with the ChatZilla code base — I don’t know
who/if there’s a maintainer — is interested in talking with me, please
get in contact here or on #instantbird.  It’s possible we could align
some of what I’ve been working on, but I’m not sure how much could be
shared besides the parsing algorithm).&lt;/p&gt;
&lt;p&gt;&lt;em&gt;[End edit]&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-are-the-specific-advantages-for-an-end-user"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id6"&gt;What are the specific advantages for an end-user?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In terms of the &lt;span class="caps"&gt;IRC&lt;/span&gt; protocol itself, there shouldn’t be any, my goal
is for it to be a drop in replacement for the libpurple implementation
with automatic account migration, etc. For end-users we can hopefully
solve &lt;a class="reference external" href="https://bugzilla.instantbird.org/showdependencytree.cgi?id=574&amp;amp;maxdepth=1&amp;amp;hide_resolved=1"&gt;a few annoying &lt;span class="caps"&gt;IRC&lt;/span&gt; &lt;span class="caps"&gt;UI&lt;/span&gt; issues&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-about-for-developers-anything-cool-there"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id7"&gt;What about for developers?  Anything cool there?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Well, I’m hoping to be able to test this replacement via an extension
that replaces the libpurple &lt;span class="caps"&gt;IRC&lt;/span&gt; to dogfood it before eventual inclusion
in Instantbird.  I’m not sure if that counts as “cool.” though.  If
nothing else there will be an example of how to write a protocol in
JavaScript (using sockets).  So hopefully other people can make some
other cool protocols off of that example.  You might wonder what else we
have planned for JavaScript protocols; there are plans to make at least
a Twitter protocol.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-is-this-being-done"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id8"&gt;How is this being done?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Well I said up above &lt;span class="caps"&gt;IRC&lt;/span&gt; has a specification, right?  Well, yes.
There’s the &lt;a class="reference external" href="http://tools.ietf.org/html/rfc1459"&gt;original specification&lt;/a&gt;, this was superseded by &lt;a class="reference external" href="http://tools.ietf.org/html/rfc2810"&gt;four&lt;/a&gt;
&lt;a class="reference external" href="http://tools.ietf.org/html/rfc2811"&gt;different&lt;/a&gt; &lt;a class="reference external" href="http://tools.ietf.org/html/rfc2812"&gt;specification&lt;/a&gt; &lt;a class="reference external" href="http://tools.ietf.org/html/rfc2813"&gt;documents&lt;/a&gt;.  Of which we only really
care about one: &lt;a class="reference external" href="http://tools.ietf.org/html/rfc2812"&gt;the client protocol&lt;/a&gt;.  So we have this updated
specification (try reading it, it’s rather painful), which is good.
It’s relatively straightforward set of commands and responses/errors.
It’s a bit more confusing than that though since there are a couple of
extensions, etc.  This is summarized below:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;span class="strike"&gt;&lt;span class="caps"&gt;RFC&lt;/span&gt; 1459&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;Extended with &lt;a class="reference external" href="http://www.irchelp.org/irchelp/rfc/dccspec.html"&gt;&lt;span class="strike"&gt;&lt;span class="caps"&gt;DCC&lt;/span&gt; specification (“direct client-to-client”)&lt;/span&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Replaced with &lt;a class="reference external" href="http://www.irchelp.org/irchelp/rfc/dccspec.html"&gt;&lt;span class="strike"&gt;&lt;span class="caps"&gt;CTCP&lt;/span&gt; (“client-to-client protocol”)&lt;/span&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.invlogic.com/irc/ctcp.html"&gt;Draft for a formalized &lt;span class="caps"&gt;CTCP&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;(Apparently some people are working on a &lt;a class="reference external" href="http://www.dcc2.org/"&gt;&lt;span class="caps"&gt;DCC2&lt;/span&gt;&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Officially replaced with RFCs 2810, 2811, 2812, 2813&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A lot of this is being done by reading the specifications and finding
the proper responses, etc.  I’ve also used &lt;a class="reference external" href="http://www.wireshark.org/download.html"&gt;Wireshark&lt;/a&gt; a bit to see how
libpurple sends &lt;span class="caps"&gt;IRC&lt;/span&gt; commands (in particular, in what order it sends them
in).  A lot of my development is happening on live &lt;span class="caps"&gt;IRC&lt;/span&gt; servers, which
isn’t really best practice, but I’m mostly sending commands by hand to
see the responses since a bunch of non-standard responses and extensions
have developed beyond the above.  I have been using &lt;a class="reference external" href="http://ircd.bircd.org/"&gt;beware irc&lt;/a&gt; to run
a daemon on my own machine, however.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="so-how-far-along-are-you"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id9"&gt;So how far along are you?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I’ve started implementing &lt;span class="caps"&gt;RFC&lt;/span&gt; 2812 and have a variety of commands done
(the login sequence occurs automatically, the server connection is kept
alive, messages can be sent to a channel and are parsed when received, a
lot of the initial server information is displayed but unparsed).  But
there’s a lot more to do!  As my last post outlined, I recently was able
to successfully get a chat to work in Instantbird from a silly bug I had
been having.&lt;/p&gt;
&lt;p&gt;It’s rather slow going since I’ll start to implement something from
the &lt;span class="caps"&gt;IRC&lt;/span&gt; side, and then realize the &lt;a class="reference external" href="http://hg.instantbird.org/instantbird/file/tip/purple/purplexpcom/src/jsProtoHelper.jsm"&gt;Instantbird layer&lt;/a&gt; (the jsProtocol
module) is missing a component I need.  One of the major parts of
working on this is extending the Instantbird layer to contain the proper
functions and objects needed to implement chats via JavaScript.  This is
usually the slowest going part of my code, since it involves interfacing
with Instantbird / &lt;a class="reference external" href="http://hg.instantbird.org/instantbird/file/tip/purple/purplexpcom/public/"&gt;purplexpcom&lt;/a&gt;.  Luckily Florian, the main developer
of Instantbird, has been a big help with this (as have other
participants of #instantbird — in particular I know Mic helped track
down a few syntax type bugs).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-s-next"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id10"&gt;What’s next?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Now that have the basics of chat working, I need to start handling the
&lt;span class="caps"&gt;QUIT&lt;/span&gt;, &lt;span class="caps"&gt;PART&lt;/span&gt; and &lt;span class="caps"&gt;JOIN&lt;/span&gt; commands for when other users enter &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; leave chat
rooms.  Once these are complete it should be quite usable, although the
entire preference system still doesn’t exist, including notifying the &lt;span class="caps"&gt;UI&lt;/span&gt;
of what options are available.  In addition, I need to look into doing
&lt;span class="caps"&gt;SSL&lt;/span&gt; sockets.&lt;/p&gt;
&lt;p&gt;Once the protocol plug-in is done, we plan to abstract sections of it
that will be useful for other protocols (in particular the socket
connection aspects).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="where-can-i-see-this-stuff"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id11"&gt;Where can I see this stuff…?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;My work is kept in the “&lt;a class="reference external" href="https://hg.instantbird.org/experiments/file/IRC-JavaScript/"&gt;experiments&lt;/a&gt;” repository on Instantbird’s
&lt;a class="reference external" href="http://mercurial.selenic.com/"&gt;Mercurial&lt;/a&gt; repository.  There’s also a variety of bugs open (they’re
listed above, I’m not going to re-list them), although not a ton is
happening in them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-can-i-help"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id12"&gt;How can I help?!&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Well you can of course feel free to download the code and hack on it,
let me know (via &lt;span class="caps"&gt;IRC&lt;/span&gt; or any of the bugs most likely) if you have a patch
you’d like me to apply.  Or if you just found something that doesn’t
work you can feel free to let me know, although I probably just haven’t
gotten around to fixing it yet.&lt;/p&gt;
&lt;p&gt;Also, if you’ve ever found something annoying / broken in the &lt;span class="caps"&gt;IRC&lt;/span&gt;
implementation in Instantbird / libpurple please let us know (through
any of the above contact sources).&lt;/p&gt;
&lt;p&gt;Hopefully that’s a bit of a better explanation of why we’re spending
time to rewrite the &lt;span class="caps"&gt;IRC&lt;/span&gt; protocol implementation into JavaScript — we
definitely think it’s worth it and can lead to a bunch of new unique
protocol plug-ins for Instantbird.&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Patrick Cloke</dc:creator><pubDate>Wed, 08 Dec 2010 14:29:00 -0500</pubDate><guid>tag:patrick.cloke.us,2010-12-08:posts/2010/12/08/why-rewrite-irc-into-javascript/</guid><category>Instantbird</category><category>IRC</category><category>Mozilla</category><category>programming</category></item><item><title>JavaScript IRC in Instantbird</title><link>http://patrick.cloke.us/posts/2010/12/04/javascript-irc-in-instantbird/</link><description>&lt;p&gt;I&amp;#8217;ve been working on rewriting the &lt;span class="caps"&gt;IRC&lt;/span&gt; plugin for &lt;a class="reference external" href="http://www.instantbird.com/"&gt;Instantbird&lt;/a&gt; since
the summer (sometime in August, I can&amp;#8217;t seem to find the exact date &amp;#8212;
at least since Sept. 10th&amp;nbsp;though).&lt;/p&gt;
&lt;p&gt;Since &lt;a class="reference external" href="http://developer.pidgin.im/wiki/WhatIsLibpurple"&gt;libpurple&lt;/a&gt; (used in Pidgin, Adium, etc.) provides the &lt;span class="caps"&gt;IRC&lt;/span&gt;
protocol that we currently use, why do this?&amp;nbsp; One reason is to iron out
(and find) some of the bugs left in implementing protocols in JavaScript
and part of it is so I can learn to code better.&amp;nbsp; Unfortunately during
this semester I was not able to get as much done as I had hoped and
almost everything that had been done was finished in&amp;nbsp;August/September&lt;/p&gt;
&lt;p&gt;Some big milestones I&amp;#8217;ve completed (with dates if I have&amp;nbsp;them):&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Connected to server via sockets in&amp;nbsp;JavaScript&lt;/li&gt;
&lt;li&gt;Generate a conversation that works as a raw connection to the server
(i.e. as if you had opened a telnet connection to the&amp;nbsp;server)&lt;/li&gt;
&lt;li&gt;Parsing messages and automatic ponging when the server&amp;nbsp;pings&lt;/li&gt;
&lt;li&gt;Joining a channel (2010/12/04, i.e.&amp;nbsp;today!)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There had been a bunch of small bugs I had been having in getting this
to work: one error, (which I found quickly) one of the other developers
(&lt;a class="reference external" href="http://queze.net/"&gt;Florian&lt;/a&gt;) was able to help me out with, was that I was not initiating
a &lt;strong&gt;new&lt;/strong&gt; object.&amp;nbsp; And after learning a bit above observers I was able
to get the &lt;span class="caps"&gt;UI&lt;/span&gt; to respond.&amp;nbsp; I even threw in support for op/half-op/voice
After today&amp;#8217;s work I was able to generate the following&amp;nbsp;screenshot:&lt;/p&gt;
&lt;!--  --&gt;
&lt;blockquote class="center"&gt;
&lt;a class="reference external image-reference" href="http://patrick.cloke.us/images/IRCworking2.png"&gt;&lt;img alt="Example conversation using JavaScript IRC." class="center" src="http://patrick.cloke.us/images/IRCworking2.png" style="height: 297px;" /&gt;&lt;/a&gt;
&lt;p&gt;An initial example of Instantbird communicating using JavaScript &lt;span class="caps"&gt;IRC&lt;/span&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This build would be almost fully usable by those who do very little on
&lt;span class="caps"&gt;IRC&lt;/span&gt; (i.e. if you just want to go and chat, it&amp;#8217;d work well), but there&amp;#8217;s
a lot more work to be done.&amp;nbsp; The code can be viewed in the &lt;a class="reference external" href="https://hg.instantbird.org/experiments/file/IRC-JavaScript/"&gt;Experiments
repository&lt;/a&gt;.&amp;nbsp; (Check it out, there&amp;#8217;s a 600+ line switch&amp;nbsp;statement.)&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Patrick Cloke</dc:creator><pubDate>Sat, 04 Dec 2010 17:24:00 -0500</pubDate><guid>tag:patrick.cloke.us,2010-12-04:posts/2010/12/04/javascript-irc-in-instantbird/</guid><category>Instantbird</category><category>IRC</category><category>Mozilla</category><category>programming</category></item><item><title>Yahoo &amp; Thunderbird Can Finally Play Nice?</title><link>http://patrick.cloke.us/posts/2010/11/22/yahoo-thunderbird/</link><description>&lt;p&gt;For years I&amp;#8217;ve been dealing with Yahoo&amp;#8217;s lack of support for any sort
of decent (free) &lt;span class="caps"&gt;POP3&lt;/span&gt;/&lt;span class="caps"&gt;IMAP&lt;/span&gt;/&lt;span class="caps"&gt;SMTP&lt;/span&gt; protocol support.&amp;nbsp; Why do I need this?
So I can check my &lt;a class="reference external" href="http://mail.yahoo.com/"&gt;Yahoo mail&lt;/a&gt; in &lt;a class="reference external" href="http://www.mozillamessaging.com/en-US/thunderbird/"&gt;Mozilla Thunderbird&lt;/a&gt; of&amp;nbsp;course!&lt;/p&gt;
&lt;p&gt;At first I used &lt;a class="reference external" href="http://ypopsemail.com/"&gt;&lt;span class="caps"&gt;YPOPS&lt;/span&gt;!&lt;/a&gt;, a program that read the &lt;span class="caps"&gt;HTML&lt;/span&gt; pages provided
by the Yahoo webmail client and served the emails on a local &lt;span class="caps"&gt;POP&lt;/span&gt;
server.&amp;nbsp; Cool, right?&amp;nbsp; Except it always broke whenever Yahoo changed
their pages&amp;nbsp;around.&lt;/p&gt;
&lt;p&gt;After a bit I moved onto using the &lt;a class="reference external" href="http://www.blogger.com/"&gt;WebMail extension&lt;/a&gt; for
Thunderbird.&amp;nbsp; It essentially works the same way, but runs in the
Thunderbird process as an extension instead of as a separate service.
It&amp;#8217;s a little complicated to set up and requires two extensions.&amp;nbsp; The
general WebMail extension and a Yahoo specific one (there&amp;#8217;s also ones
available for Hotmail, Gmail, Libero and &lt;span class="caps"&gt;AOL&lt;/span&gt;).&amp;nbsp; You might wonder why
this exists for some services that have always had &lt;span class="caps"&gt;POP&lt;/span&gt;/&lt;span class="caps"&gt;IMAP&lt;/span&gt; access
(Gmail)?&amp;nbsp; I was too, apparently some people cannot check those ports
because of firewall issues so this essentially allows them to check it
via port 80, over an &lt;span class="caps"&gt;HTTP&lt;/span&gt;&amp;nbsp;connection.&lt;/p&gt;
&lt;p&gt;A few months ago I came across &lt;a class="reference external" href="http://www.emaildiscussions.com/showthread.php?t=59575"&gt;post&lt;/a&gt; describing how a &lt;a class="reference external" href="http://en.wikipedia.org/w/index.php?title=Yahoo%21_Mail&amp;amp;oldid=396914770#Free_IMAP_and_SMTPs_access"&gt;simple
(nonstandard) command&lt;/a&gt; could allow access to the Yahoo &lt;span class="caps"&gt;IMAP&lt;/span&gt; server, but
it required &lt;a class="reference external" href="http://www.crasseux.com/linux/"&gt;patching the Thunderbird source&lt;/a&gt; &amp;#8212; not an option for me
since I&amp;#8217;ve been running nightlies of either Thunderbird 3.1 or 3.2/3.3
for a while now. (I mean sure, I could do it&amp;#8230;but WebMail extension was
working fine.)&amp;nbsp; There was &lt;a class="reference external" href="http://groups.google.com/group/mozilla.dev.apps.thunderbird/browse_thread/thread/546356554c73f8ca"&gt;some discussion&lt;/a&gt; about it and a &lt;a class="reference external" href="https://bugzilla.mozilla.org/show_bug.cgi?id=493064"&gt;bug&lt;/a&gt; was
filed for&amp;nbsp;Thunderbird.&lt;/p&gt;
&lt;p&gt;So how did this lead to free &lt;span class="caps"&gt;IMAP&lt;/span&gt; support?&amp;nbsp; I noticed in the &lt;a class="reference external" href="https://wiki.mozilla.org/Thunderbird/StatusMeetings/2010-11-16#Web_Update"&gt;Weekly
Status Meeting Notes (2010-11-16)&lt;/a&gt; for Thunderbird a mention of &lt;a class="reference external" href="http://trunk.mozillamessaging.com/en-US/thunderbird/features/email_providers.html"&gt;Free
Email Providers&lt;/a&gt; page.&amp;nbsp; Checking it out it said &amp;#8220;Y! Mail is a free
email service provided by Yahoo! It offers webmail supported by targeted
advertising as well as &lt;span class="caps"&gt;IMAP&lt;/span&gt; access.&amp;#8221;&amp;nbsp; Hmm&amp;#8230;but I just said they don&amp;#8217;t
have support this for free! A quick Bing search brought up a &lt;a class="reference external" href="http://www.theanimail.com/imap_server_settings.html"&gt;page with
&lt;span class="caps"&gt;IMAP&lt;/span&gt; server settings&lt;/a&gt;.&amp;nbsp; I figured I&amp;#8217;d check if they work, and sure
enough they did!&amp;nbsp; The settings are copied&amp;nbsp;below:&lt;/p&gt;
&lt;blockquote&gt;
&lt;table class="docutils field-list" frame="void" rules="none"&gt;
&lt;col class="field-name" /&gt;
&lt;col class="field-body" /&gt;
&lt;tbody valign="top"&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;User name:&lt;/th&gt;&lt;td class="field-body"&gt;&lt;span class="strike"&gt;user&amp;#64;yahoo.com&lt;/span&gt; user&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;&lt;span class="caps"&gt;IMAP&lt;/span&gt; server:&lt;/th&gt;&lt;td class="field-body"&gt;&lt;span class="strike"&gt;imap-ssl.mail.yahoo.com&lt;/span&gt; imap.mail.yahoo.com&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;Port:&lt;/th&gt;&lt;td class="field-body"&gt;993&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;Password:&lt;/th&gt;&lt;td class="field-body"&gt;Cleartext/Normal&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;&lt;span class="caps"&gt;SSL&lt;/span&gt;:&lt;/th&gt;&lt;td class="field-body"&gt;yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;&lt;span class="caps"&gt;SMTP&lt;/span&gt; server:&lt;/th&gt;&lt;td class="field-body"&gt;smtp.mail.yahoo.com&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;Port:&lt;/th&gt;&lt;td class="field-body"&gt;465&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;Password:&lt;/th&gt;&lt;td class="field-body"&gt;Cleartext/Normal&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;&lt;span class="caps"&gt;SSL&lt;/span&gt;:&lt;/th&gt;&lt;td class="field-body"&gt;yes&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/blockquote&gt;
&lt;p&gt;Awesome!&amp;nbsp; Anyway, I replied with this info in the aforementioned bug
and &lt;a class="reference external" href="https://bugzilla.mozilla.org/attachment.cgi?id=492550&amp;amp;action=diff"&gt;a patch&lt;/a&gt; was quickly added by Mozilla&amp;#8217;s &lt;a class="reference external" href="http://www.bucksch.org/1/projects/mozilla/"&gt;Ben Bucksch&lt;/a&gt; to support
this in Thunderbird, hopefully it&amp;#8217;ll make it into the next version!&amp;nbsp; It
was also brought to my attention that imap-ssl.mail.yahoo.com provides
an &lt;span class="caps"&gt;SSL&lt;/span&gt; certificate that is valid for imap.mail.yahoo.com only, I&amp;#8217;d
suggest using that&amp;nbsp;former.&lt;/p&gt;
&lt;p&gt;Note that I&amp;#8217;m currently suffering from &lt;a class="reference external" href="https://bugzilla.mozilla.org/show_bug.cgi?id=610264"&gt;another bug&lt;/a&gt; while using
Yahoo &lt;span class="caps"&gt;IMAP&lt;/span&gt;.&amp;nbsp; Everything works, there&amp;#8217;s just an annoying pop-up
occasionally about the error.&amp;nbsp; Hopefully it will be fixed&amp;nbsp;soon.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Patrick Cloke</dc:creator><pubDate>Mon, 22 Nov 2010 23:03:00 -0500</pubDate><guid>tag:patrick.cloke.us,2010-11-22:posts/2010/11/22/yahoo-thunderbird/</guid><category>bugs</category><category>email</category><category>IMAP</category><category>Mozilla</category><category>POP3</category><category>programming</category><category>SMTP</category><category>Thunderbird</category><category>Yahoo</category></item></channel></rss>