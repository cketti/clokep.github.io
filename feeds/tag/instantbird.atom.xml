<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Like bricks in the sky - Instantbird</title><link href="https://patrick.cloke.us/" rel="alternate"></link><link href="https://patrick.cloke.us/feeds/tag/instantbird.atom.xml" rel="self"></link><id>https://patrick.cloke.us/</id><updated>2017-05-05T11:20:00-04:00</updated><entry><title>Google Summer of Code 2017: Matrix protocol for Instantbird and Thunderbird</title><link href="https://patrick.cloke.us/posts/2017/05/05/google-summer-of-code-2017-matrix-protocol/" rel="alternate"></link><published>2017-05-05T11:20:00-04:00</published><updated>2017-05-05T11:20:00-04:00</updated><author><name>Patrick Cloke</name></author><id>tag:patrick.cloke.us,2017-05-05:/posts/2017/05/05/google-summer-of-code-2017-matrix-protocol/</id><summary type="html">&lt;p&gt;I&amp;#8217;ll be mentoring Pavan Karthik on his &lt;a class="reference external" href="https://summerofcode.withgoogle.com/projects/#6473832528347136"&gt;project for Google Summer of Code 2017&lt;/a&gt;
entitled &amp;#8220;Matrix Protocol Support for Instantbird&amp;#8221;. &lt;a class="reference external" href="http://matrix.org/"&gt;Matrix&lt;/a&gt; is a new(er)
protocol that is an open, decentralized network with some unique features.
Initial support for this landed in &lt;a class="reference external" href="https://bugzilla.mozilla.org/show_bug.cgi?id=1315926"&gt;bug 1315926&lt;/a&gt;, but it is not feature …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I&amp;#8217;ll be mentoring Pavan Karthik on his &lt;a class="reference external" href="https://summerofcode.withgoogle.com/projects/#6473832528347136"&gt;project for Google Summer of Code 2017&lt;/a&gt;
entitled &amp;#8220;Matrix Protocol Support for Instantbird&amp;#8221;. &lt;a class="reference external" href="http://matrix.org/"&gt;Matrix&lt;/a&gt; is a new(er)
protocol that is an open, decentralized network with some unique features.
Initial support for this landed in &lt;a class="reference external" href="https://bugzilla.mozilla.org/show_bug.cgi?id=1315926"&gt;bug 1315926&lt;/a&gt;, but it is not feature
rich-enough to turn on for users. Pavan will work to finish Matrix support so we
can enable it for all users! The brief description of his proposal is&amp;nbsp;below:&lt;/p&gt;
&lt;blockquote&gt;
Matrix is an open, decentralized protocol for instant messaging (and more!)
It has bridges to many other networks and protocol, e.g. &lt;span class="caps"&gt;IRC&lt;/span&gt;, Slack, and
more. Initial support for Matrix was added in bug 1199855, but there&amp;#8217;s a lot
to do still : Support more features from the Matrix &lt;span class="caps"&gt;SDK&lt;/span&gt; (video/audio calls,
room topics, typing notifications, read receipts and a lot more.) Support
one-on-one conversations. Add tests specific to Matrix. Improve the Matrix
&lt;span class="caps"&gt;JS&lt;/span&gt;-&lt;span class="caps"&gt;SDK&lt;/span&gt; that Instantbird and Thunderbird depend on. Improving and expanding
shared code and APIs used by all JavaScript protocol plugins (&lt;span class="caps"&gt;IRC&lt;/span&gt;, &lt;span class="caps"&gt;XMPP&lt;/span&gt;,
Yahoo and Twitter). Improving documentation of the process for adding a
protocol to Instantbird/Thunderbird. Using the Matrix protocol on a
day-to-day basis to dog-food the code.&lt;/blockquote&gt;
&lt;p&gt;I&amp;#8217;m super excited to finalize support for Matrix in both Instantbird and
Thunderbird! You can also checkout the full 25 projects that
&lt;a class="reference external" href="https://summerofcode.withgoogle.com/organizations/6421332469219328/"&gt;Mozilla accepted&lt;/a&gt;.&lt;/p&gt;
</content><category term="chat"></category><category term="GSoC"></category><category term="instant messaging"></category><category term="Instantbird"></category><category term="Matrix"></category></entry><entry><title>IRC Client Usage Share on moznet</title><link href="https://patrick.cloke.us/posts/2015/09/23/irc-client-usage-share-on-moznet/" rel="alternate"></link><published>2015-09-23T17:07:00-04:00</published><updated>2015-09-24T07:18:00-04:00</updated><author><name>Patrick Cloke</name></author><id>tag:patrick.cloke.us,2015-09-23:/posts/2015/09/23/irc-client-usage-share-on-moznet/</id><summary type="html">
&lt;div class="section" id="background"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id13"&gt;Background&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The usage share of &lt;span class="caps"&gt;IRC&lt;/span&gt; clients has always been something I’m interested in. This
is partially to see how many people are using &lt;a class="reference external" href="http://instantbird.com/"&gt;Instantbird&lt;/a&gt; or &lt;a class="reference external" href="https://www.mozilla.org/en-US/thunderbird/"&gt;Mozilla
Thunderbird&lt;/a&gt; for &lt;span class="caps"&gt;IRC&lt;/span&gt; (as I’ve written much of the &lt;span class="caps"&gt;IRC&lt;/span&gt; code for those clients).
&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Usage_share_of_web_browsers"&gt;Usage share of browsers&lt;/a&gt; is quite a …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">
&lt;div class="section" id="background"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id13"&gt;Background&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The usage share of &lt;span class="caps"&gt;IRC&lt;/span&gt; clients has always been something I’m interested in. This
is partially to see how many people are using &lt;a class="reference external" href="http://instantbird.com/"&gt;Instantbird&lt;/a&gt; or &lt;a class="reference external" href="https://www.mozilla.org/en-US/thunderbird/"&gt;Mozilla
Thunderbird&lt;/a&gt; for &lt;span class="caps"&gt;IRC&lt;/span&gt; (as I’ve written much of the &lt;span class="caps"&gt;IRC&lt;/span&gt; code for those clients).
&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Usage_share_of_web_browsers"&gt;Usage share of browsers&lt;/a&gt; is quite a researched topic, but I’ve never come
across this data for &lt;span class="caps"&gt;IRC&lt;/span&gt;. Most &lt;a class="footnote-reference" href="#id7" id="id1"&gt;[1]&lt;/a&gt; &lt;span class="caps"&gt;IRC&lt;/span&gt; clients implement a part of the &lt;a class="reference external" href="http://www.irchelp.org/irchelp/rfc/ctcpspec.html"&gt;&lt;span class="caps"&gt;CTCP&lt;/span&gt;&lt;/a&gt;
protocol which allows a client to query another client for their version.
Thinking of this as a &lt;a class="reference external" href="http://en.wikipedia.org/wiki/User_agent"&gt;user agent&lt;/a&gt; is probably a good analogue. I don’t think
this would imply that there is much of an issue with &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Usage_share_of_web_browsers#User_agent_spoofing"&gt;user agent spoofing&lt;/a&gt;, as
there would be for web browser statistics since (as far as I know), no one uses
the version response to do capability negotiation. It also is not used by servers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="technical-bits"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id14"&gt;Technical Bits&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So how’d we do this? I wrote an &lt;a class="reference external" href="https://bitbucket.org/clokep/irc-extras/src/tip/stats/"&gt;extension&lt;/a&gt; for Instantbird which handled both
the backend and the display of the results. I think that this really showcases
the extensibility of Instantbird and the effort we’ve put into ensuring their
are generic APIs available for developers. In particular this uses the &lt;a class="reference external" href="http://dxr.mozilla.org/comm-central/source/chat/protocols/irc/ircHandlers.jsm"&gt;&lt;span class="caps"&gt;IRC&lt;/span&gt;
handler &lt;span class="caps"&gt;API&lt;/span&gt;&lt;/a&gt; and the &lt;a class="reference external" href="http://hg.mozilla.org/comm-central/file/dbab5a531594/im/content/tabbrowser.xml#l432"&gt;add panel &lt;span class="caps"&gt;API&lt;/span&gt;&lt;/a&gt; (added by &lt;a class="reference external" href="http://blog.nhnt11.com/"&gt;one of our GSoC students&lt;/a&gt; a
couple of years ago.)&lt;/p&gt;
&lt;p&gt;Anyway, at the actual protocol level, I simply send a &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;CTCP&lt;/span&gt; &lt;span class="caps"&gt;VERSION&lt;/span&gt;&lt;/tt&gt; query to
each user I know of on the &lt;span class="caps"&gt;IRC&lt;/span&gt; network (based on who is in the same channels as
me) and then record the responses. I tried to be nice to the network here and
rate-limited myself to 1 query per second. No one complained after ~100 queries
and I didn’t seem to have any &lt;tt class="docutils literal"&gt;fakelag&lt;/tt&gt; issues. I then dumped the results and
made a pretty(-ish) plot of this. (If you’re a network administrator reading
this and think this is insane, I’d be very curious to hear a better way to do this!)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="results"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id15"&gt;Results&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In order to get some results I hooked my client up to &lt;a class="reference external" href="https://wiki.mozilla.org/IRC"&gt;moznet&lt;/a&gt; on July 23rd,
2015 and let it run on many channels (pretty much anything with more than 20
users) for a few hours &lt;a class="footnote-reference" href="#id8" id="id2"&gt;[2]&lt;/a&gt;. I was in Europe and started early in the morning
and let it run through the evening, so it should encompass some “normal” usage
by Mozillians. I would expect a bit of skew in these results toward
Mozilla-esque &lt;span class="caps"&gt;IRC&lt;/span&gt; clients (Instantbird, Thunderbird and &lt;a class="reference external" href="http://chatzilla.hacksrus.com/"&gt;ChatZilla&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Of course these numbers are just a single sampling and I have no idea how much
variance there is day-to-day or over time, but I found the (un-scientific)
results to be interesting!&lt;/p&gt;
&lt;div class="section" id="responses"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id16"&gt;Responses&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The first thing I noticed is the large amount of information some version
responses gave (in no particular order):&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;KVIrc 4.3.1 &lt;span class="pre"&gt;svn-6313&lt;/span&gt; 'Aria' 20120701 - build &lt;span class="pre"&gt;2013-02-14&lt;/span&gt; 17:47:33 &lt;span class="caps"&gt;UTC&lt;/span&gt; - Windows 7 Ultimate (x64) Service Pack 1 (Build 7601)&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;xchat 2.8.8 Linux &lt;span class="pre"&gt;3.17.4-1-&lt;span class="caps"&gt;ARCH&lt;/span&gt;&lt;/span&gt; [x86_64/2.90GHz/&lt;span class="caps"&gt;SMP&lt;/span&gt;]&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;HexChat 2.10.1 [x64] / Windows 7 &lt;span class="caps"&gt;SP1&lt;/span&gt; [4.09GHz]&lt;/tt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I don’t understand the rationale behind sharing a user’s operating system and
&lt;span class="caps"&gt;CPU&lt;/span&gt; speed. Most clients responded with a simple &lt;tt class="docutils literal"&gt;&amp;lt;software&amp;gt; &amp;lt;version number&amp;gt;&lt;/tt&gt;,
although quite a few also include a &lt;span class="caps"&gt;URL&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Additionally, some bouncers respond in weird ways which might skew the results:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;span class="caps"&gt;ZNC&lt;/span&gt; responds only if there are no clients connected &lt;span class="caps"&gt;OR&lt;/span&gt;, depending on the
version, it appends itself to the client response. &lt;a class="footnote-reference" href="#id9" id="id3"&gt;[3]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;bip responds with it’s own version if no one is connected &lt;span class="caps"&gt;OR&lt;/span&gt; the version of
all connected clients. &lt;a class="footnote-reference" href="#id10" id="id4"&gt;[4]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Lastly, some clients just don’t respond (or respond with an empty string). The
results below aren’t really a count of “users”, but a count of “clients” where
some users might be counted multiple times.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="client-summary"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id17"&gt;Client Summary&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Initially I visualized the data by plotting it two serparate ways: first by
showing the count of each version response and then grouping by “client family”.
The first plot had too many columns to reasonably show in this post: thus I’ve
only included a plot of the client families &lt;a class="footnote-reference" href="#id11" id="id5"&gt;[5]&lt;/a&gt;. There are two plots, the first
shows a subset of the data by cutting the tail (arbitrarily including families
with at least 10 users).&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;A “client family” is counting all versions of the same client together. This
was calculated by taking the text up to the first whitespace or digit and
converting to lowercase:&lt;/p&gt;
&lt;div class="last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;family&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;version&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/[\s\d]/&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;style type="text/css"&gt;
    #family-all-count, #family-count {
      width: 100%;
      height: 300px;
    }
&lt;/style&gt;
&lt;script src="/js/flotr2.min.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script type="text/javascript"&gt;
    function createPlot(aId, aTitle, aData) {
      // Put the data in order from biggest to smallest.
      var data = []
      for (var d of aData.entries())
        data.push(d);
      data.sort(function(a, b) { return a[1] &lt; b[1]; });

      // Re-arrange the data to be plotted into two arrays: one is a set of points
      // of x-index to value, the other is x-index to label.
      var labels = [];
      for (var i = 0; i &lt; data.length; i++) {
        // Sometimes the labels are stupid long.
        labels[i] = [i, (data[i][0] || "undefined").slice(0, 25)];
        data[i] = [i, data[i][1]];
      }

      var options = {
        title: aTitle,
        HtmlText: false,
        bars: {
          show: true,
          shadowSize: 0,
          barWidth: 0.5
        },
        mouse: {
          track: true,
          relative: true
        },
        xaxis: {
          ticks: labels,
          labelsAngle: 90
        },
        yaxis: {
          min: 0,
          autoscaleMargin: 1,
          title: "Count",
          titleAngle: 90
        }
      };

      var plot = document.getElementById(aId);
      Flotr.draw(plot, [data], options);
    }

    document.addEventListener("DOMContentLoaded", function() {
        var raw_data = [["instantbird", 21], ["thunderbird", 39], ["xchat", 77], ["colloquy", 33], ["limechat", 61], ["irssi", 204], ["irccloud", 520], ["znc", 161], ["icedove", 3], ["chatzilla", 59], ["bip-", 11], ["hexchat", 61], ["mozbot", 3], ["miranda", 6], ["mirc", 31], ["textual", 44], ["weechat", 76], ["kvirc", 6], ["purple", 70], ["x-chat", 8], ["xchat-wdk", 1], ["dircproxy", 1], ["konversation", 12], ["quassel", 69], ["linkinus", 3], ["\x02erc\x02", 6], ["leroooooy", 1], ["elitebnc", 1], ["fu,", 1], ["anope-", 1], ["&gt;", 2], ["telepathy-idle", 3], ["rcirc", 3], ["mrgiggles:", 1], ["ircii", 1], ["http://www.mibbit.com", 4], ["shout", 7], ["yaaic", 2], ["karen", 1], ["", 3], ["sceners", 1], ["uberscript", 1], ["tiarra:", 3], ["snak", 1], ["wuunyan", 1], ["adiirc", 1], ["n/a", 1], ["pircbotx", 3], ["none", 1], ["yes", 1], ["nettalk", 1], ["riece/", 1], ["unknown", 1], ["version", 1], ["circ", 3], ["request", 1], ["forrest,", 1], ["trillian", 1], ["\x03", 2], ["smuxi-frontend-gnome", 1], ["some", 1], ["\x02\x03", 1], ["oh", 1], ["\u201Cnever", 1], ["this", 1], ["nochat", 1], ["wee", 1], ["foadirc", 1], ["smuxi-server", 1], ["aperture", 1], ["internet", 1], ["supybot", 1], ["ejabberd", 2], ["dxirc", 1], ["ircle", 1], ["infobot", 1], ["exovenom", 1], ["nsa-irc", 1]];
        var families = new Map();
        for (var data of raw_data)
            families.set(data[0], data[1]);

        // Count the totals, used in reporting not actually displayed.
        var total = 0;
        for (var family of families.entries())
            total += family[1];

        // Update the plots.
        createPlot("family-all-count",
                   "All Families (Total: " + total + ")", families);

        // Remove all families that have less than 10 hits.
        for (var family of families.entries()) {
            if (family[1] &lt; 10) {
                families.delete(family[0])
                total -= family[1];
            }
        }

        createPlot("family-count",
                   "Families with at Least 10 Users (Total: " + total + ")",
                   families);
    });
&lt;/script&gt;
&lt;div id="family-count"&gt;&lt;/div&gt;
&lt;div id="family-all-count"&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="section" id="points-of-note"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id18"&gt;Points of Note&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I have to admit that I was fairly shocked by the number of IRCCloud users as I
found it pretty unusable when messing with it &lt;a class="footnote-reference" href="#id12" id="id6"&gt;[6]&lt;/a&gt;. I suspect it being an 'easy'
bouncer draws many people to it. The bouncer-like software (IRCCloud, &lt;span class="caps"&gt;ZNC&lt;/span&gt;, bip)
represents almost half of the users surveyed (692 / 1549 ≈ 45%)!&lt;/p&gt;
&lt;p&gt;I'm surprised so many people are using &lt;tt class="docutils literal"&gt;purple&lt;/tt&gt; as their &lt;span class="caps"&gt;IRC&lt;/span&gt; client, as the
support there is really barebones. (It makes sense if you're already using
Pidgin and don't want another client.) I think we've made a significant amount
of improvements in Instantbird's &lt;span class="caps"&gt;IRC&lt;/span&gt; support to make it simpler for a user to
get started (give it a try if you haven't!).&lt;/p&gt;
&lt;p&gt;The last thing I'll note is that, when taken together, Instantbird, Thunderbird,
and Icedove, come in as part of the top 10 (63 users, right before ChatZilla)!
There's a lot of great clients out there and I'm happy to say I've helped to
create one of the more popular ones (on moznet, at least!).&lt;/p&gt;
&lt;p&gt;Let me know if I missed a great insight!&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id7" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"/&gt;&lt;col/&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;"Most" is a wild accusation here. But...from the numbers I've seen, it
seems like a reasonable statement.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id8" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"/&gt;&lt;col/&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;While running this I had a few users question what I was doing over
private messages or in a channel. I'm &lt;em&gt;shocked&lt;/em&gt; that clients bother
their users by showing them they received a &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;VERSION&lt;/span&gt;&lt;/tt&gt; request. (Most)
users just won't care! Why show that low-level of the protocol?!&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id9" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"/&gt;&lt;col/&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id3"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;As corrected by DarthGandalf on &lt;span class="caps"&gt;IRC&lt;/span&gt;: "Before 1.6, &lt;span class="caps"&gt;ZNC&lt;/span&gt; version is
returned iff no clients are connected. After 1.6, it's also appended to
the client's response (but still one line per connected client)"&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id10" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"/&gt;&lt;col/&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id4"&gt;[4]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="https://twitter.com/dioxmat/status/646815252898803712"&gt;Source&lt;/a&gt;, have
I mentioned yet in this article that I hate bouncers?&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id11" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"/&gt;&lt;col/&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id5"&gt;[5]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;I stole the code to plot this from the &lt;a class="reference external" href="https://bitbucket.org/clokep/irc-extras/src/41a9572caf957ab8ae3969a145834bcd5be74abe/stats/content/ircStats.js?at=default#cl-55"&gt;plotting code&lt;/a&gt; in the extension
I wrote for this. When actually using that extension, something similar
to this appears as a tab and refreshes as results come in. It uses
&lt;a class="reference external" href="http://humblesoftware.com/flotr2/"&gt;Flotr2&lt;/a&gt; to do the plotting in JavaScript, I've been pretty happy with
it.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id12" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"/&gt;&lt;col/&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id6"&gt;[6]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Although in retrospect I shouldn't be since Mozilla runs their own
&lt;a class="reference external" href="https://irccloud.mozilla.com/"&gt;IRCCloud instance&lt;/a&gt;.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="Mozilla"></category><category term="Thunderbird"></category><category term="Instantbird"></category><category term="IRC"></category></entry><entry><title>Thunderbird Summit 2014</title><link href="https://patrick.cloke.us/posts/2014/11/14/thunderbird-summit-2014/" rel="alternate"></link><published>2014-11-14T18:37:00-05:00</published><updated>2014-11-14T18:37:00-05:00</updated><author><name>Patrick Cloke</name></author><id>tag:patrick.cloke.us,2014-11-14:/posts/2014/11/14/thunderbird-summit-2014/</id><summary type="html">&lt;p&gt;Last month (Oct. 15th to Oct. 18th, to be precise), &lt;a class="reference external" href="https://wiki.mozilla.org/Thunderbird:Summit_2014#Invited_Attendees"&gt;twenty volunteers&lt;/a&gt;
descended on Mozilla&amp;#8217;s Toronto office to discuss &lt;a class="reference external" href="https://www.mozilla.org/en-US/thunderbird/"&gt;Mozilla Thunderbird&lt;/a&gt;. This
included Mozilla employees, Thunderbird contributors of all sorts (developers,
user interface designers, add-on reviewers), Lightning contributors, and
chat/&lt;a class="reference external" href="http://instantbird.com/"&gt;Instantbird&lt;/a&gt;&amp;nbsp;contributors.&lt;/p&gt;
&lt;blockquote class="text-center"&gt;
&lt;a class="reference external image-reference" href="https://patrick.cloke.us/images/chat-tb-summit/IMG_6516.jpg"&gt;&lt;img alt="The entire group of volunteers." src="/thumbnails/chat-tb-summit/IMG_6516_small.jpg" /&gt;&lt;/a&gt;
&lt;/blockquote&gt;
&lt;p&gt;It was great to spend some quality …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Last month (Oct. 15th to Oct. 18th, to be precise), &lt;a class="reference external" href="https://wiki.mozilla.org/Thunderbird:Summit_2014#Invited_Attendees"&gt;twenty volunteers&lt;/a&gt;
descended on Mozilla&amp;#8217;s Toronto office to discuss &lt;a class="reference external" href="https://www.mozilla.org/en-US/thunderbird/"&gt;Mozilla Thunderbird&lt;/a&gt;. This
included Mozilla employees, Thunderbird contributors of all sorts (developers,
user interface designers, add-on reviewers), Lightning contributors, and
chat/&lt;a class="reference external" href="http://instantbird.com/"&gt;Instantbird&lt;/a&gt;&amp;nbsp;contributors.&lt;/p&gt;
&lt;blockquote class="text-center"&gt;
&lt;a class="reference external image-reference" href="https://patrick.cloke.us/images/chat-tb-summit/IMG_6516.jpg"&gt;&lt;img alt="The entire group of volunteers." src="/thumbnails/chat-tb-summit/IMG_6516_small.jpg" /&gt;&lt;/a&gt;
&lt;/blockquote&gt;
&lt;p&gt;It was great to spend some quality hacking time with &lt;a class="reference external" href="http://blog.queze.net/"&gt;Florian&lt;/a&gt; and to meet
&lt;a class="reference external" href="http://blog.nhnt11.com/"&gt;Nihanth&lt;/a&gt;, both Instantbird guys who I talk to most days on &lt;span class="caps"&gt;IRC&lt;/span&gt;! I also had the
pleasure of re-meeting a few people from the Mozilla Summit last year (I
attended in Toronto) and to meet some brand new&amp;nbsp;people!&lt;/p&gt;
&lt;blockquote class="text-center"&gt;
&lt;a class="reference external image-reference" href="https://patrick.cloke.us/images/chat-tb-summit/IMG_6408.jpg"&gt;&lt;img alt="Nihanth hacking." src="/thumbnails/chat-tb-summit/IMG_6408_small.jpg" /&gt;&lt;/a&gt;
&lt;a class="reference external image-reference" href="https://patrick.cloke.us/images/chat-tb-summit/IMG_6426.jpg"&gt;&lt;img alt="The chat contributors: me, Florian and Nihanth." src="/thumbnails/chat-tb-summit/IMG_6426_small.jpg" /&gt;&lt;/a&gt;
&lt;a class="reference external image-reference" href="https://patrick.cloke.us/images/chat-tb-summit/IMG_6508.jpg"&gt;&lt;img alt="Daniel joining us over Vidyo." src="/thumbnails/chat-tb-summit/IMG_6508_small.jpg" /&gt;&lt;/a&gt;
&lt;p&gt;A few pictures of the chat contributors: Nihanth; me, Florian and Nihanth;
and Daniel (dialing&amp;nbsp;in!)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It was really nice to actually sit down for a few days and work on
Instantbird/Thunderbird without the distractions of &amp;#8220;real life&amp;#8221;. I,
unfortunately, spent the first day fixing an Instantbird &lt;a class="reference external" href="http://hg.mozilla.org/comm-central/rev/05bb70d5b231"&gt;bustage&lt;/a&gt; (from a
mozilla-central change that removed some &lt;span class="caps"&gt;NSS&lt;/span&gt; symbols&amp;#8230;why, I have no idea). But
after that, we got some really exciting work done! We started cleaning up and
finalizing some patches from Google Summer of Code 2014 to add &lt;a class="reference external" href="http://www.webrtc.org/"&gt;WebRTC&lt;/a&gt; support
to &lt;a class="reference external" href="http://xmpp.org/"&gt;&lt;span class="caps"&gt;XMPP&lt;/span&gt;&lt;/a&gt;! You can check out the progress in &lt;a class="reference external" href="https://bugzilla.mozilla.org/show_bug.cgi?id=1018060"&gt;bug 1018060&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote class="text-center"&gt;
&lt;a class="reference external image-reference" href="https://patrick.cloke.us/images/chat-tb-summit/IMG_6394.jpg"&gt;&lt;img alt="First working call over Instantbird WebRTC." src="/thumbnails/chat-tb-summit/IMG_6394_small.jpg" /&gt;&lt;/a&gt;
&lt;a class="reference external image-reference" href="https://patrick.cloke.us/images/chat-tb-summit/webrtc_preview.jpg"&gt;&lt;img alt="Screenshot of first working call over Instantbird WebRTC." src="/thumbnails/chat-tb-summit/webrtc_preview_small.jpg" /&gt;&lt;/a&gt;
&lt;p&gt;First working call over Instantbird&amp;nbsp;WebRTC.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote class="text-center"&gt;
&lt;a class="reference external image-reference" href="https://patrick.cloke.us/images/chat-tb-summit/IMG_6594.jpg"&gt;&lt;img alt="Eating some poutine!" src="/thumbnails/chat-tb-summit/IMG_6594_small.jpg" /&gt;&lt;/a&gt;
&lt;p&gt;Other highlights of the trip include eating the &amp;#8220;Canadian delicacy&amp;#8221; of
poutine (with pulled pork on&amp;nbsp;it)!&lt;/p&gt;
&lt;/blockquote&gt;
</content><category term="Mozilla"></category><category term="Thunderbird"></category><category term="community"></category><category term="Instantbird"></category></entry><entry><title>Extending JavaScript Maps (or other built-in objects)</title><link href="https://patrick.cloke.us/posts/2014/04/27/extending-javascript-maps-or-other/" rel="alternate"></link><published>2014-04-27T13:46:00-04:00</published><updated>2014-04-27T13:46:00-04:00</updated><author><name>Patrick Cloke</name></author><id>tag:patrick.cloke.us,2014-04-27:/posts/2014/04/27/extending-javascript-maps-or-other/</id><summary type="html">
&lt;p&gt;Finally another technical post, this one is about my adventures in
attempting to extend the built-in &lt;a class="reference external" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map"&gt;Map&lt;/a&gt; object in JavaScript to extend
the functionality. As background, there are two reasons we’d want this:&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;In the chat backend we currently use JavaScript &lt;a class="reference external" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object"&gt;objects&lt;/a&gt; (&lt;tt class="docutils literal"&gt;{}&lt;/tt&gt;) as
hashes/maps to keep track of …&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">
&lt;p&gt;Finally another technical post, this one is about my adventures in
attempting to extend the built-in &lt;a class="reference external" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map"&gt;Map&lt;/a&gt; object in JavaScript to extend
the functionality. As background, there are two reasons we’d want this:&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;In the chat backend we currently use JavaScript &lt;a class="reference external" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object"&gt;objects&lt;/a&gt; (&lt;tt class="docutils literal"&gt;{}&lt;/tt&gt;) as
hashes/maps to keep track of various things (i.e. there’s a &lt;a class="reference external" href="https://mxr.mozilla.org/comm-central/source/chat/protocols/irc/irc.js#789"&gt;hash of
conversations&lt;/a&gt; which map from conversation name to prplIConversation
objects in the &lt;span class="caps"&gt;IRC&lt;/span&gt; code). Whenever checking to see if something is in
this map we have to use &lt;a class="reference external" href="https://mxr.mozilla.org/comm-central/source/chat/protocols/irc/irc.js#1509"&gt;hasOwnProperty&lt;/a&gt;. This has to be the
&lt;a class="reference external" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty"&gt;version from Object.prototype&lt;/a&gt; in case the map has a conversation
named hasOwnProperty. This is &lt;a class="reference external" href="https://mxr.mozilla.org/comm-central/source/chat/modules/imXPCOMUtils.jsm#166"&gt;super simple code&lt;/a&gt;, but annoying:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// Similar to Object.hasOwnProperty, but doesn't fail if the object&lt;/span&gt;
&lt;span class="c1"&gt;// has a hasOwnProperty property set.&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;hasOwnProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aObject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;aPropertyName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hasOwnProperty&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aObject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;aPropertyName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a class="reference external" href="https://bugzilla.mozilla.org/show_bug.cgi?id=955366"&gt;Replacing these custom objects with a Map&lt;/a&gt; would alleviate this
funky dance.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Frequently in the chat backend we have to “normalize” &lt;a class="footnote-reference" href="#id4" id="id1"&gt;[1]&lt;/a&gt; strings
(e.g. #INsTanTBIrd and #instantbird are the same on &lt;span class="caps"&gt;IRC&lt;/span&gt; &lt;a class="footnote-reference" href="#id5" id="id2"&gt;[2]&lt;/a&gt;). This is
almost always done for sane storage of data received from the network
(or from the user). I figured it’d be great if, instead of having to
&lt;a class="reference external" href="https://mxr.mozilla.org/comm-central/source/chat/protocols/irc/irc.js#1510"&gt;manually&lt;/a&gt; &lt;a class="reference external" href="https://mxr.mozilla.org/comm-central/source/chat/protocols/irc/irc.js#1514"&gt;handle&lt;/a&gt; &lt;a class="reference external" href="https://mxr.mozilla.org/comm-central/source/chat/protocols/irc/irc.js#1528"&gt;this&lt;/a&gt; normalization each time we tried to
access data, the keys were magically normalized when accessing the
data.
(Note that although normalization is generally more complicated, just
consider to be &lt;a class="reference external" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase"&gt;String.prototype.toLowerCase()&lt;/a&gt; for the rest of this post!)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This has been explored before by &lt;a class="reference external" href="http://perfectionkills.com/how-ecmascript-5-still-does-not-allow-to-subclass-an-array/"&gt;others&lt;/a&gt;, but generally in the
context of web sites / cross browser compatibility. Which are concerns
that don’t really limit us for backend code.&lt;/p&gt;
&lt;div class="section" id="goals"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id7"&gt;Goals&lt;/a&gt;&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Replace objects with Maps for safe access. This is pretty easily
fixed by switching all &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;obj["foo"]&lt;/span&gt;&lt;/tt&gt; calls to &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;obj.get("foo")&lt;/span&gt;&lt;/tt&gt; (or the
appropriate other method: set, delete, etc.)&lt;/li&gt;
&lt;li&gt;Automatically “normalize” keys in the some user defined way, e.g.
such that &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;obj.get("foo")&lt;/span&gt;&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;obj.get("FoO")&lt;/span&gt;&lt;/tt&gt; return the same value.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="first-approach-setting-proto-to-map-prototype"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id8"&gt;First Approach (setting __proto__ to Map.prototype)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;My first naive approach was to create an object with &lt;tt class="docutils literal"&gt;__proto__&lt;/tt&gt; set
to Map.prototype and overwrite anything that uses keys to appropriately
call a normalization function.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;NormalizedMap&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;NormalizedMap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;__proto__&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;_normalize&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aStr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;aStr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;

    &lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aStr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_normalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aStr&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
    &lt;span class="nx"&gt;set&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aStr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;aVal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;set&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_normalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aStr&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;aVal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;NormalizedMap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"foo"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Throws TypeError: set method called on incompatible Object&lt;/span&gt;
&lt;span class="nx"&gt;m&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="nx"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// true . . . wat . . .&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This throws an error and does not work. Apparently there are plans to
&lt;a class="reference external" href="https://bugzilla.mozilla.org/show_bug.cgi?id=838540"&gt;support something like this&lt;/a&gt;. The totally fun thing, in my opinion, is
that m is an instance of a Map!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="second-approach-modifying-proto-after-instance-creation"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id9"&gt;Second Approach (modifying __proto__ after instance creation)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;My second approach was to generate a real Map and then override the
&lt;tt class="docutils literal"&gt;__proto__&lt;/tt&gt; to give it the properties I wanted:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;NormalizedMap&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;  &lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;__proto__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;NormalizedMap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;NormalizedMap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;__proto__&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;_normalize&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aStr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;aStr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aStr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_normalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aStr&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
    &lt;span class="nx"&gt;set&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aStr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;aVal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;set&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_normalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aStr&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;aVal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;NormalizedMap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"foo"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"FOO"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 1&lt;/span&gt;
&lt;span class="nx"&gt;m&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="nx"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This actually works! But will &lt;a class="reference external" href="https://bugzilla.mozilla.org/show_bug.cgi?id=963519"&gt;throw a warning&lt;/a&gt; each time it is
created since changing an objects &lt;tt class="docutils literal"&gt;__proto__&lt;/tt&gt; is generally a bad idea.
I also thought of overriding individual methods, but this seemed
cumbersome and would increase the time in the constructor calls. (Which
occur during the start up of each account and is generally a resource
constrained time. No, I didn’t profile this, it just seemed like bad design.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="solution-wrapping-a-map"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id10"&gt;Solution (wrapping a Map)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Finally I settled on the simple solution of just wrapping the Map in a
custom object. Initially I thought this would be frustrating to
re-declare every function (and prone to breakage in the future if new
methods are added), but there’s a nice magic method
&lt;a class="reference external" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/noSuchMethod"&gt;__noSuchMethod__&lt;/a&gt; that fixes this! (Note that this is a
non-standard feature of SpiderMonkey.) &lt;tt class="docutils literal"&gt;__noSuchMethod__&lt;/tt&gt; allows an
object to intercept a call to a non-existent method (and in this case
call that same method on the internal Map object).&lt;/p&gt;
&lt;p&gt;Below is the final version that seems to act magically like a Map when
necessary (e.g. iterating the map works, all functions and properties
exist, the constructor works &lt;a class="footnote-reference" href="#id6" id="id3"&gt;[3]&lt;/a&gt;). I need to thank aleth (another chat
developer) who helped out quite a bit with this (and will ultimately be
reviewing this code)!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// A Map that automatically normalizes keys before accessing the values.&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;NormalizedMap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aNormalizeFunction&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;aIt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aNormalizeFunction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s2"&gt;"function"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="s2"&gt;"NormalizedMap must have a normalize function!"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_normalize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;aNormalizeFunction&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_map&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;([[&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_normalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;aIt&lt;/span&gt;&lt;span class="p"&gt;)]);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;NormalizedMap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;_map&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="c1"&gt;// The function to apply to all keys.&lt;/span&gt;
  &lt;span class="nx"&gt;_normalize&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

  &lt;span class="c1"&gt;// Anything that accepts a key as an input needs to be manually overridden.&lt;/span&gt;
  &lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aKey&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_normalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aKey&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
  &lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aKey&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_normalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aKey&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
  &lt;span class="nx"&gt;has&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aKey&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;has&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_normalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aKey&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
  &lt;span class="nx"&gt;set&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;aValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_normalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aKey&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;aValue&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;

  &lt;span class="c1"&gt;// Properties must be manually forwarded.&lt;/span&gt;
  &lt;span class="nx"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

  &lt;span class="c1"&gt;// Here's where the magic happens. If a method is called that isn't defined&lt;/span&gt;
  &lt;span class="c1"&gt;// here, just pass it to the internal _map object.&lt;/span&gt;
  &lt;span class="nx"&gt;__noSuchMethod__&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;aArgs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;aId&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_map&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;aArgs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The one downside of see of this is that properties must be declared
manually to forward to the internal &lt;tt class="docutils literal"&gt;_map&lt;/tt&gt; object. Maybe there is a
matching &lt;tt class="docutils literal"&gt;__noSuchProperty__&lt;/tt&gt; method I’m missing? Overall, I’m happy
with this solution, but please leave a comment if you can think of an
easier / better way to do this! (Or see a glaring way this will break!)&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id4" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"/&gt;&lt;col/&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;This is always a little bit of a sore subject in &lt;a class="reference external" href="irc://irc.mozilla.org/#instantbird"&gt;#instantbird&lt;/a&gt;
since we’ve had a variety of issues with this over the years. I think
we’ve fixed most of them at this point though!&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id5" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"/&gt;&lt;col/&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;As I’ve &lt;a class="reference external" href="https://patrick.cloke.us/posts/2011/03/08/so-called-irc-specifications/"&gt;written before&lt;/a&gt;, &lt;span class="caps"&gt;IRC&lt;/span&gt; tends to have crazy specifications.
In &lt;span class="caps"&gt;IRC&lt;/span&gt;, &lt;a class="reference external" href="https://tools.ietf.org/html/rfc2812#section-2.2"&gt;the characters of A-Z[]\~ are considered the upper case of a-z{}|^&lt;/a&gt;
(“because of &lt;span class="caps"&gt;IRC&lt;/span&gt;’s Scandinavian origin”). Oh, also this can
change based on an &lt;a class="reference external" href="http://tools.ietf.org/html/draft-brocklesby-irc-isupport-03#section-3.1"&gt;&lt;span class="caps"&gt;ISUPPORT&lt;/span&gt; response&lt;/a&gt; from the server to pure &lt;span class="caps"&gt;ASCII&lt;/span&gt; or
&lt;span class="caps"&gt;RFC&lt;/span&gt; 1459 casemapping (A-Z[]\ map to a-z{}|). It seems like this could
theoretically change at any point on a live server too, although that
would be &lt;span class="caps"&gt;INSANE&lt;/span&gt; and I hope no one ever does that.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id6" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"/&gt;&lt;col/&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id3"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;I wrote some xpcshell tests to ensure these properties work as
expected, but they’re uhh…not up anywhere yet though. Oops.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</content><category term="Instantbird"></category><category term="programming"></category><category term="specifications"></category><category term="Thunderbird"></category><category term="Wat"></category></entry><entry><title>Yahoo Protocol Google Summer of Code Round-up</title><link href="https://patrick.cloke.us/posts/2013/10/06/yahoo-protocol-google-summer-of-code/" rel="alternate"></link><published>2013-10-06T09:18:00-04:00</published><updated>2013-10-06T09:18:00-04:00</updated><author><name>Patrick Cloke</name></author><id>tag:patrick.cloke.us,2013-10-06:/posts/2013/10/06/yahoo-protocol-google-summer-of-code/</id><summary type="html">&lt;p&gt;I have to apologize to my student, &lt;a class="reference external" href="http://phaseshiftsoftware.com/blog/"&gt;Quentin&lt;/a&gt; (aka qheaden on &lt;span class="caps"&gt;IRC&lt;/span&gt;),
for taking so long to write this&amp;#8230;but anyway: Google Summer of Code
2013 is over!&amp;nbsp; Quentin has done a great job working at implementing the
Yahoo Protocol for Instantbird (and Thunderbird) in JavaScript
(henceforth called &amp;#8220;&lt;span class="caps"&gt;JS&lt;/span&gt;-Yahoo …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I have to apologize to my student, &lt;a class="reference external" href="http://phaseshiftsoftware.com/blog/"&gt;Quentin&lt;/a&gt; (aka qheaden on &lt;span class="caps"&gt;IRC&lt;/span&gt;),
for taking so long to write this&amp;#8230;but anyway: Google Summer of Code
2013 is over!&amp;nbsp; Quentin has done a great job working at implementing the
Yahoo Protocol for Instantbird (and Thunderbird) in JavaScript
(henceforth called &amp;#8220;&lt;span class="caps"&gt;JS&lt;/span&gt;-Yahoo&amp;#8221;).&amp;nbsp; It&amp;#8217;s at the point where it has mostly
reached feature-parity with the libpurple plug-in.&amp;nbsp; Before &lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=2135"&gt;turning this
on as default&lt;/a&gt; there are a few minor bugs that still need to be fixed,
but most of them have patches that just need another couple&amp;nbsp;iterations.&lt;/p&gt;
&lt;div class="section" id="where-do-we-go-from-here"&gt;
&lt;h2&gt;Where do we go from&amp;nbsp;here?&lt;/h2&gt;
&lt;p&gt;Once the last few bugs are fixed we&amp;#8217;ll enable Yahoo by default in the nightly
builds and, assuming we have no issues, it will be enabled by default in the
upcoming Instantbird 1.5. If there are no major issues in 1.5, we&amp;#8217;ll remove the
libpurple Yahoo implementation for Instantbird&amp;nbsp;1.next.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-do-i-try-this-now"&gt;
&lt;h2&gt;How do I try this&amp;nbsp;now?!&lt;/h2&gt;
&lt;p&gt;You can already easily enable &lt;span class="caps"&gt;JS&lt;/span&gt;-Yahoo in &lt;a class="reference external" href="http://nightly.instantbird.im/"&gt;Instantbird nightly builds&lt;/a&gt;:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Type /about config in a conversation tab&amp;#8217;s&amp;nbsp;textbox&lt;/li&gt;
&lt;li&gt;Type &amp;#8220;forcePurple&amp;#8221; in the search&amp;nbsp;box&lt;/li&gt;
&lt;li&gt;Remove &amp;#8220;prpl-yahoo&amp;#8221; and &amp;#8220;prpl-yahoojp&amp;#8221; from this comma separated list
of values (you can also remove prpl-jabber if you want to always use
the &lt;span class="caps"&gt;JS&lt;/span&gt;-&lt;span class="caps"&gt;XMPP&lt;/span&gt; implementation from GSoC 2011! Note that this doesn&amp;#8217;t
support &lt;a class="reference external" href="https://bugzilla.mozilla.org/show_bug.cgi?id=14328"&gt;&lt;span class="caps"&gt;DNS&lt;/span&gt; &lt;span class="caps"&gt;SRV&lt;/span&gt;&lt;/a&gt;,&amp;nbsp;however.)&lt;/li&gt;
&lt;li&gt;Restart&amp;nbsp;Instantbird!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You should now be using the &lt;span class="caps"&gt;JS&lt;/span&gt;-Yahoo protocol.&amp;nbsp; Hopefully you don&amp;#8217;t
notice anything different, but &lt;a class="reference external" href="https://bugzilla.instantbird.org/"&gt;&lt;span class="caps"&gt;PLEASE&lt;/span&gt; file bugs&lt;/a&gt; if you see any&amp;nbsp;issues.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-come-i-can-t-use-this-in-thunderbird"&gt;
&lt;h2&gt;How come I can&amp;#8217;t use this in&amp;nbsp;Thunderbird?!&lt;/h2&gt;
&lt;p&gt;Because Instantbird and comm-central development don&amp;#8217;t happen in the same
Mercurial repository.&amp;nbsp; I&amp;#8217;m working on &lt;a class="reference external" href="https://bugzilla.mozilla.org/show_bug.cgi?id=920801"&gt;syncing the chat/ folder of these
repositories&lt;/a&gt; currently and &lt;span class="caps"&gt;JS&lt;/span&gt;-Yahoo should be in Daily soon to be
included in the next Thunderbird release (i.e. Thunderbird&amp;nbsp;31).&lt;/p&gt;
&lt;p&gt;The whole Instantbird community has been super happy with the progress
Quentin made and we hope that Quentin has learned a lot! Thanks for a
great summer qheaden and hopefully we&amp;#8217;ll see you around&amp;nbsp;still!&lt;/p&gt;
&lt;/div&gt;
</content><category term="chat"></category><category term="GSoC"></category><category term="instant messaging"></category><category term="Instantbird"></category><category term="Yahoo"></category></entry><entry><title>Mentoring Google Summer of Code 2013</title><link href="https://patrick.cloke.us/posts/2013/06/28/mentoring-google-summer-of-code-2013/" rel="alternate"></link><published>2013-06-28T18:05:00-04:00</published><updated>2013-06-28T18:05:00-04:00</updated><author><name>Patrick Cloke</name></author><id>tag:patrick.cloke.us,2013-06-28:/posts/2013/06/28/mentoring-google-summer-of-code-2013/</id><summary type="html">&lt;p&gt;I&amp;#8217;m officially a mentor this year for &lt;a class="reference external" href="http://www.google-melange.com/gsoc/homepage/google/gsoc2013"&gt;2013&amp;#8217;s Google Summer of Code&lt;/a&gt;.
I&amp;#8217;m a bit late on posting this, but oh well! My student this year is
&lt;a class="reference external" href="http://phaseshiftsoftware.com/"&gt;Quentin Headen&lt;/a&gt; who is &lt;a class="reference external" href="http://www.google-melange.com/gsoc/project/google/gsoc2013/qheaden/26001"&gt;working on&lt;/a&gt; a &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Yahoo!_Messenger_Protocol"&gt;Yahoo! Messenger protocol&lt;/a&gt;
for the Instantbird chat/ backend (so it&amp;#8217;ll also be …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I&amp;#8217;m officially a mentor this year for &lt;a class="reference external" href="http://www.google-melange.com/gsoc/homepage/google/gsoc2013"&gt;2013&amp;#8217;s Google Summer of Code&lt;/a&gt;.
I&amp;#8217;m a bit late on posting this, but oh well! My student this year is
&lt;a class="reference external" href="http://phaseshiftsoftware.com/"&gt;Quentin Headen&lt;/a&gt; who is &lt;a class="reference external" href="http://www.google-melange.com/gsoc/project/google/gsoc2013/qheaden/26001"&gt;working on&lt;/a&gt; a &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Yahoo!_Messenger_Protocol"&gt;Yahoo! Messenger protocol&lt;/a&gt;
for the Instantbird chat/ backend (so it&amp;#8217;ll also be usable via
Thunderbird). You can see &lt;a class="reference external" href="http://phaseshiftsoftware.com/blog/category/gsoc-2013-logs/"&gt;an account of his trials, successes and
trepidations&lt;/a&gt; (&lt;a class="reference external" href="http://phaseshiftsoftware.com/blog/category/gsoc-2013-logs/feed/"&gt;&lt;span class="caps"&gt;RSS&lt;/span&gt;&lt;/a&gt;) or follow his &lt;a class="reference external" href="https://bitbucket.org/qheaden/instantbird-gsoc-2013"&gt;code repository&lt;/a&gt;. He&amp;#8217;s made
great progress so far and is able to connect, download all the buddies
and start private conversations! Not too bad for a few weeks of work!
We&amp;#8217;ve been keeping a &lt;a class="reference external" href="https://etherpad.mozilla.org/ELTNA6O44F"&gt;&lt;span class="caps"&gt;TODO&lt;/span&gt; list&lt;/a&gt; of things to be supported, please
don&amp;#8217;t edit it without discussing it with us&amp;nbsp;first.&lt;/p&gt;
&lt;p&gt;Our hope is to get this checked into Instantbird by the end of summer
and run it in parallel (behind an &lt;a class="reference external" href="about:config"&gt;about:config&lt;/a&gt; preference) with the
current libpurple Yahoo implementation. Once we&amp;#8217;re satisified that it
has feature parity we&amp;#8217;ll remove the libpurple version and enable this by&amp;nbsp;default!&lt;/p&gt;
&lt;p&gt;Instantbird is also supporting two other&amp;nbsp;projects:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The &lt;a class="reference external" href="http://www.google-melange.com/gsoc/project/google/gsoc2013/nhnt11/7001"&gt;&amp;#8220;Awesometab&amp;#8221;&lt;/a&gt; is being done by &lt;a class="reference external" href="http://awesometab.blogspot.com/"&gt;Nihanth Subramanya&lt;/a&gt;
(&lt;a class="reference external" href="http://awesometab.blogspot.com/feeds/posts/default?alt=rss"&gt;&lt;span class="caps"&gt;RSS&lt;/span&gt;&lt;/a&gt;)
and being mentored by Benedikt Pfeifer, his code is &lt;a class="reference external" href="https://bitbucket.org/nhnt11/instantbird-addons"&gt;available&lt;/a&gt; and
some has already been &lt;a class="reference external" href="http://hg.instantbird.org/instantbird/rev/55009d68c4ec"&gt;checked&lt;/a&gt; &lt;a class="reference external" href="http://hg.instantbird.org/instantbird/rev/46ee5c836e48"&gt;into&lt;/a&gt; &lt;a class="reference external" href="http://hg.instantbird.org/instantbird/rev/52401d522970"&gt;Instantbird&lt;/a&gt; &lt;a class="reference external" href="http://hg.instantbird.org/instantbird/rev/ea36babac4be"&gt;nightlies&lt;/a&gt;!&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.google-melange.com/gsoc/project/google/gsoc2013/atuljangra/68001"&gt;FileLinks in &lt;span class="caps"&gt;IM&lt;/span&gt;&lt;/a&gt; is being worked on by &lt;a class="reference external" href="http://atuljangra.tumblr.com/"&gt;Atul Jangra&lt;/a&gt; (or &lt;a class="reference external" href="http://gsoc-mozilla.tumblr.com/"&gt;maybe&lt;/a&gt;)
(&lt;a class="reference external" href="http://atuljangra.tumblr.com/rss"&gt;&lt;span class="caps"&gt;RSS&lt;/span&gt;&lt;/a&gt; /
&lt;a class="reference external" href="http://gsoc-mozilla.tumblr.com/rss"&gt;&lt;span class="caps"&gt;RSS&lt;/span&gt;&lt;/a&gt;) and being mentored by
Florian Quèze, check out the &lt;a class="reference external" href="https://bitbucket.org/atuljangra/instantbird-gsoc-2013"&gt;repository&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can find any of us in #instantbird on irc.mozilla.org, my nick is
clokep, Quentin&amp;#8217;s is qheaden, Nihanth&amp;#8217;s: nhnt11, Atul&amp;#8217;s: atuljangra,
Benedikt goes by Mic and Florian goes by something starting with&amp;nbsp;&amp;#8220;flo&amp;#8221;.&lt;/p&gt;
&lt;p&gt;Thanks also go out to Mozilla for letting us participate in Google
Summer of Code with them again! You can see all of the accepted projects
in &lt;a class="reference external" href="http://blog.gerv.net/2013/06/gsoc-2013-project-list/"&gt;Gerv&amp;#8217;s blogpost&lt;/a&gt;.&lt;/p&gt;
</content><category term="chat"></category><category term="GSoC"></category><category term="instant messaging"></category><category term="Instantbird"></category><category term="Yahoo"></category></entry><entry><title>Instantbird 1.4 Released!</title><link href="https://patrick.cloke.us/posts/2013/05/20/instantbird-14-released/" rel="alternate"></link><published>2013-05-20T16:45:00-04:00</published><updated>2013-05-20T16:45:00-04:00</updated><author><name>Patrick Cloke</name></author><id>tag:patrick.cloke.us,2013-05-20:/posts/2013/05/20/instantbird-14-released/</id><summary type="html">&lt;p&gt;After a bunch of l10n build problems, we&amp;#8217;ve finally released
Instantbird 1.4, which includes updates to libpurple 2.10.7 and Mozilla
20.&amp;nbsp; In particular this&amp;nbsp;includes:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Updated Twitter code that uses v1.1 of their &lt;span class="caps"&gt;API&lt;/span&gt; (v1.0 will be
disabled on June 11th,&amp;nbsp;2013).&lt;/li&gt;
&lt;li&gt;Better character …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;After a bunch of l10n build problems, we&amp;#8217;ve finally released
Instantbird 1.4, which includes updates to libpurple 2.10.7 and Mozilla
20.&amp;nbsp; In particular this&amp;nbsp;includes:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Updated Twitter code that uses v1.1 of their &lt;span class="caps"&gt;API&lt;/span&gt; (v1.0 will be
disabled on June 11th,&amp;nbsp;2013).&lt;/li&gt;
&lt;li&gt;Better character counter for Twitter (it now takes into account if
URLs are&amp;nbsp;embedded).&lt;/li&gt;
&lt;li&gt;Updated log viewer which organizes logs by date (and nests them by
week, month,&amp;nbsp;etc.)&lt;/li&gt;
&lt;li&gt;Better support for &lt;span class="caps"&gt;IRC&lt;/span&gt;&amp;nbsp;bouncers.&lt;/li&gt;
&lt;li&gt;Support for overriding self-signed/invalid/out-of-date certificates
for &lt;span class="caps"&gt;IRC&lt;/span&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you&amp;#8217;ve been using some other instant messaging client (e.g. Pidgin
or Adium); I&amp;#8217;d highly suggest giving Instantbird a try, especially if
you also go on &lt;span class="caps"&gt;IRC&lt;/span&gt;. Instantbird has great &lt;span class="caps"&gt;IRC&lt;/span&gt; support! (And&amp;#8230;if you do
have issues, feel free to ping me in #instantbird on irc.mozilla.org and
let me know what your issue&amp;nbsp;is.)&lt;/p&gt;
&lt;p&gt;You can download it &lt;a class="reference external" href="http://www.instantbird.com/download-all.html"&gt;here&lt;/a&gt;, or view the full &lt;a class="reference external" href="http://www.instantbird.com/release-notes.html"&gt;release notes&lt;/a&gt;.&lt;/p&gt;
</content><category term="Instantbird"></category></entry><entry><title>JavaScript typed arrays pain</title><link href="https://patrick.cloke.us/posts/2012/11/28/javascript-typed-arrays-pain/" rel="alternate"></link><published>2012-11-28T23:11:00-05:00</published><updated>2012-11-28T23:11:00-05:00</updated><author><name>Patrick Cloke</name></author><id>tag:patrick.cloke.us,2012-11-28:/posts/2012/11/28/javascript-typed-arrays-pain/</id><summary type="html">&lt;p&gt;If you&amp;#8217;ve ever tried to deal with binary data in JavaScript you know
it isn&amp;#8217;t much fun and you usually resort to using strings lots of
charCodeAt and related functions.&amp;nbsp; &lt;a class="reference external" href="https://developer.mozilla.org/en-US/docs/JavaScript_typed_arrays"&gt;Typed arrays&lt;/a&gt; are supposed to solve
this though!&amp;nbsp; The typed array &lt;span class="caps"&gt;API&lt;/span&gt; consists of creating a buffer of …&lt;/p&gt;</summary><content type="html">&lt;p&gt;If you&amp;#8217;ve ever tried to deal with binary data in JavaScript you know
it isn&amp;#8217;t much fun and you usually resort to using strings lots of
charCodeAt and related functions.&amp;nbsp; &lt;a class="reference external" href="https://developer.mozilla.org/en-US/docs/JavaScript_typed_arrays"&gt;Typed arrays&lt;/a&gt; are supposed to solve
this though!&amp;nbsp; The typed array &lt;span class="caps"&gt;API&lt;/span&gt; consists of creating a buffer of bytes
(called an &lt;a class="reference external" href="https://developer.mozilla.org/en-US/docs/JavaScript_typed_arrays/ArrayBuffer"&gt;ArrayBuffer&lt;/a&gt;) and then manipulating those bytes via
different views (&lt;a class="reference external" href="https://developer.mozilla.org/en-US/docs/JavaScript_typed_arrays/ArrayBufferView"&gt;ArrayBufferView&lt;/a&gt;s).&amp;nbsp; You can have multiple views of
the same buffer, starting at different offsets, of different lengths and
types&amp;#8230;which is all neat from a technical point of view, but is it
really useful?&amp;nbsp; It is kind of nice working with the views as if they
were normal arrays&amp;nbsp;though.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve been playing with these ArrayBuffers quite a bit as I&amp;#8217;m working
on an implementation of the &lt;a class="reference external" href="http://en.wikipedia.org/wiki/OSCAR_protocol"&gt;&lt;span class="caps"&gt;OSCAR&lt;/span&gt; protocol&lt;/a&gt; (used for &lt;a class="reference external" href="http://en.wikipedia.org/wiki/AOL_Instant_Messenger"&gt;&lt;span class="caps"&gt;AOL&lt;/span&gt; Instant
Messenger&lt;/a&gt; and &lt;a class="reference external" href="http://en.wikipedia.org/wiki/ICQ"&gt;&lt;span class="caps"&gt;ICQ&lt;/span&gt;&lt;/a&gt;) in the chat backend (for Instantbird /
Thunderbird).&amp;nbsp; (As an aside, the &lt;span class="caps"&gt;OSCAR&lt;/span&gt; protocol Wikipedia page has
surprisingly good documentation of some of the underlying data
structures of the protocol&amp;#8230;)&amp;nbsp; I started by writing some test code
using ArrayBuffers and views, which have been around a while: since
Gecko 2.0 in fact!&amp;nbsp; I quickly ran into some tedious issues with
repetitive code such&amp;nbsp;as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt; * A TLV (Type, Length and Value) data structure:&lt;/span&gt;
&lt;span class="cm"&gt; *  Unsigned Short  type    Describes what the value represents.&lt;/span&gt;
&lt;span class="cm"&gt; *  Unsigned Short  length  The length of the data block.&lt;/span&gt;
&lt;span class="cm"&gt; *  Bytes           value   The raw payload.&lt;/span&gt;
&lt;span class="cm"&gt; *&lt;/span&gt;
&lt;span class="cm"&gt; * The overall length of a TlvBlock is length + 4.&lt;/span&gt;
&lt;span class="cm"&gt; *&lt;/span&gt;
&lt;span class="cm"&gt; * The inputs to this are:&lt;/span&gt;
&lt;span class="cm"&gt; *  aType    The type of the TLV Block.&lt;/span&gt;
&lt;span class="cm"&gt; *  aValue   An ArrayBuffer containing the data.&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;TlvBlock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;aValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ArrayBuffer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aValue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;byteLength&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;// The first two bytes are unsigned shorts.&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;view&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Uint16Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;view&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;aType&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;view&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;aValue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;byteLength&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// The rest just gets the data copied into it.&lt;/span&gt;
  &lt;span class="nx"&gt;view&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Uint8Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;view&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Uint8Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aValue&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This actually illustrates two annoying issues I&amp;nbsp;have:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;I end up with extra lines of code defining a new view every time I
switch data&amp;nbsp;types.&lt;/li&gt;
&lt;li&gt;There&amp;#8217;s no simple way to copy an ArrayBuffer into a part of an
ArrayBuffer. In the above example I create a Uint8Array view of the
target location, a Uint8Array view of the source location and then
set the source to the target. Seems simple once you figure it out,
but it took a while to figure&amp;nbsp;out.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;(As an aside, some of you might find the following function helpful,
it is essentially a &lt;a class="reference external" href="http://en.cppreference.com/w/cpp/string/byte/memcpy"&gt;memcpy&lt;/a&gt; for ArrayBuffers&amp;#8230;this isn&amp;#8217;t really
tested heavily at all,&amp;nbsp;however.)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt; * aTarget / aSource are ArrayBuffers&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;copyBytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aTarget&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;aSource&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;aTargetOffset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;aSourceOffset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;aLength&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;aSource&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;byteLength&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// The rest just gets the data copied into it.&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;view&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Uint8Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aTarget&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;aTargetOffset&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;view&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Uint8Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aSource&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;aSourceOffset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;aLength&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class="caps"&gt;OK&lt;/span&gt;, so typed arrays seem good, but kind of annoying, right?
Wrong&amp;#8230;the &lt;span class="caps"&gt;OSCAR&lt;/span&gt; protocol is a &amp;#8220;network order&amp;#8221; protocol (aka it is big
endian). At this point you&amp;#8217;re probably thinking &amp;#8220;&lt;span class="caps"&gt;OK&lt;/span&gt;, so the ArrayBuffer
constructor must take an endianess flag!&amp;#8221;&amp;nbsp; Wrong, it does no such
thing.&amp;nbsp; &amp;#8220;Hmmm&amp;#8230;Well do the ArrayBufferViews take an endianess flag?&amp;#8221;
Nope, wrong again.&amp;nbsp; The only way to specify the endianess of the data is
to use a &lt;a class="reference external" href="https://developer.mozilla.org/en-US/docs/JavaScript_typed_arrays/DataView"&gt;DataView&lt;/a&gt;, a slightly different interface to the underlying
bytes.&amp;nbsp; It offers an &lt;span class="caps"&gt;API&lt;/span&gt; to individually set different data elements via
their offset and endianess.&amp;nbsp; (If you&amp;#8217;re too lazy to read the
documentation all the way through, DataView assumes big endian: makes my
life&amp;nbsp;easier!)&lt;/p&gt;
&lt;p&gt;For the curious, JavaScript typed arrays use the system endianess,
which in my opinion is pretty much useless (at least if you plan on
sharing data) since you can never guarantee the endianess to be either
big or little endian.&amp;nbsp; (The fun part is that this isn&amp;#8217;t even documented,
I found it on &lt;a class="reference external" href="http://stackoverflow.com/questions/7869752/javascript-typed-arrays-and-endianness"&gt;Stack Overflow&lt;/a&gt; and&amp;nbsp;verified.)&lt;/p&gt;
&lt;p&gt;So, in summary&amp;#8230;if you plan on networking at all with ArrayBuffers,
don&amp;#8217;t use ArrayBufferViews, use DataViews.&amp;nbsp; (Although Uint8Arrays and
Int8Arrays should work&amp;nbsp;fine!)&lt;/p&gt;
&lt;p&gt;And to not rant the &lt;em&gt;entire&lt;/em&gt; time, working with typed arrays certainly
does beat strings +&amp;nbsp;charCodeAt!&lt;/p&gt;
</content><category term="Instantbird"></category><category term="Mozilla"></category><category term="OSCAR"></category><category term="Thunderbird"></category><category term="Wat"></category></entry><entry><title>Instantbird 1.3 Released!!!</title><link href="https://patrick.cloke.us/posts/2012/11/16/instantbird-13-released/" rel="alternate"></link><published>2012-11-16T06:42:00-05:00</published><updated>2012-11-16T06:42:00-05:00</updated><author><name>Patrick Cloke</name></author><id>tag:patrick.cloke.us,2012-11-16:/posts/2012/11/16/instantbird-13-released/</id><summary type="html">&lt;p&gt;Well we finally got our release process down a bit better and were
able to do a quicker release (from 1.2 to 1.3, compared to our previous
few releases). This is great news, as it gives incremental changes to
our users faster!&amp;nbsp; There&amp;#8217;s some new features available …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Well we finally got our release process down a bit better and were
able to do a quicker release (from 1.2 to 1.3, compared to our previous
few releases). This is great news, as it gives incremental changes to
our users faster!&amp;nbsp; There&amp;#8217;s some new features available, which are mostly
covered on the &lt;a class="reference external" href="http://blog.instantbird.org/2012/11/instantbird-1-3-released/"&gt;Instantbird blog&lt;/a&gt;, but&amp;nbsp;quickly:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;span class="caps"&gt;IRC&lt;/span&gt; now supports &lt;span class="caps"&gt;SASL&lt;/span&gt; authentication, which is required by Freenode
when connecting from Tor or certain &lt;span class="caps"&gt;IP&lt;/span&gt;&amp;nbsp;ranges.&lt;/li&gt;
&lt;li&gt;Long messages over &lt;span class="caps"&gt;IRC&lt;/span&gt; are now smartly chopped and sent as multiple
messages (instead of being&amp;nbsp;truncated).&lt;/li&gt;
&lt;li&gt;The &amp;#8220;Show Nick&amp;#8221; add-on was integrated: this allows styling of a
mentioned nick in a conversation (and is extremely useful for
following multiple&amp;nbsp;conversations).&lt;/li&gt;
&lt;li&gt;Various other minor&amp;nbsp;improvements&amp;#8230;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Instantbird 1.3 is based off of Mozilla 16.0.2, but I believe we&amp;#8217;re
hoping to update to mozilla-central soon in order to benefit from cool
new technologies, like WebRTC!&amp;nbsp; You should &lt;a class="reference external" href="http://www.instantbird.com/download-all.html"&gt;check out Instantbird&lt;/a&gt;&amp;nbsp;now!&lt;/p&gt;
</content><category term="Instantbird"></category></entry><entry><title>On Status</title><link href="https://patrick.cloke.us/posts/2012/10/16/on-status/" rel="alternate"></link><published>2012-10-16T21:33:00-04:00</published><updated>2012-10-16T21:33:00-04:00</updated><author><name>Patrick Cloke</name></author><id>tag:patrick.cloke.us,2012-10-16:/posts/2012/10/16/on-status/</id><summary type="html">&lt;p&gt;Something that comes up often about Instantbird is why we only support
three statuses: Available, Unavailable and Offline.&amp;nbsp; (We do actually
support a fourth one too, Idle, but that is set automatically, not
chosen by the user.)&amp;nbsp; Frequently this discussion is in the context of
wanting an &amp;#8220;Invisible&amp;#8221; status, but …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Something that comes up often about Instantbird is why we only support
three statuses: Available, Unavailable and Offline.&amp;nbsp; (We do actually
support a fourth one too, Idle, but that is set automatically, not
chosen by the user.)&amp;nbsp; Frequently this discussion is in the context of
wanting an &amp;#8220;Invisible&amp;#8221; status, but I&amp;#8217;ll get to that&amp;nbsp;later&amp;#8230;&lt;/p&gt;
&lt;p&gt;Many users have talked to us on &lt;span class="caps"&gt;IRC&lt;/span&gt;, email or via bugs and complained
about wanting an &amp;#8220;Away&amp;#8221; status or a &amp;#8220;Do Not Disturb&amp;#8221; status.&amp;nbsp; There&amp;#8217;s a
few issues with&amp;nbsp;this:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;What&amp;#8217;s really the difference between &amp;#8220;Unavailable&amp;#8221;, &amp;#8220;Away&amp;#8221; and &amp;#8220;Do
Not Disturb&amp;#8221;?&amp;nbsp; Do you really need to choose them individually?
(Other things that fit into here: &amp;#8220;Not at my desk&amp;#8221;, &amp;#8220;on the phone&amp;#8221;,
&amp;#8220;busy&amp;#8221;, &amp;#8220;stepped out&amp;#8221;.&amp;nbsp; It is amazing how some protocols have so many
ways to describe being&amp;nbsp;unavailable!)&lt;/li&gt;
&lt;li&gt;A technical issue that we often run into is trying to shoehorn
different protocol implementations into our abstract protocol
interface.&amp;nbsp; (We already have some fairly complicated interfaces
around joining chat rooms, creating different account, etc. because
of&amp;nbsp;this.)&lt;/li&gt;
&lt;li&gt;Setting yourself as &amp;#8220;Away&amp;#8221; or &amp;#8220;Invisible&amp;#8221; is a lie.&amp;nbsp; Perhaps this is
me being overly idealistic, but why would you set yourself as
&amp;#8220;Away&amp;#8221;?&amp;nbsp; It seems that this is something that should be done
automatically (when you lock your display, perhaps?).&amp;nbsp; You can&amp;#8217;t be
&amp;#8220;Away&amp;#8221; and using your computer at the same time!
Again, perhaps being idealistic, but what is the point of the
&amp;#8220;Invisible&amp;#8221; status?&amp;nbsp; If you wish to be hidden from someone
(everyone?) why not just block those users.&amp;nbsp; Or ignore them when they
send you a message.&amp;nbsp; If you are busy, set yourself to &amp;#8220;Unavailable&amp;#8221;
and people should understand that they should not talk to you&amp;#8230;if
they don&amp;#8217;t, well&amp;#8230;do you really want them talking to you ever?&amp;nbsp; (Are
they really your friend?&amp;nbsp; I guess you don&amp;#8217;t get to choose your
co-workers, but still.)&amp;nbsp; Now, perhaps this is just my opinion as
being someone who never really hard an &amp;#8220;Invisible&amp;#8221; status (I actually
remember it being added to the &lt;span class="caps"&gt;AIM&lt;/span&gt; client at some&amp;nbsp;point).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;At this point you probably don&amp;#8217;t believe me that there&amp;#8217;s really &lt;em&gt;that&lt;/em&gt;
many different protocol statuses out there, so I figured I&amp;#8217;d illustrate
a few protocols in a matrix.&amp;nbsp; Note that this isn&amp;#8217;t meant to be
exhaustive, just to show how complicated of a situation this really is.
All protocols can obviously be &amp;#8220;offline&amp;#8221; as well, but that&amp;#8217;s not shown
in the&amp;nbsp;table.&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="30%" /&gt;
&lt;col width="13%" /&gt;
&lt;col width="21%" /&gt;
&lt;col width="17%" /&gt;
&lt;col width="19%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;&amp;nbsp;&lt;/th&gt;
&lt;th class="head"&gt;Available&lt;/th&gt;
&lt;th class="head"&gt;Unavailable&lt;/th&gt;
&lt;th class="head"&gt;Phone&lt;/th&gt;
&lt;th class="head"&gt;Invisible&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;Oscar (&lt;span class="caps"&gt;AIM&lt;/span&gt;/&lt;span class="caps"&gt;ICQ&lt;/span&gt;)&lt;/td&gt;
&lt;td&gt;Online&lt;/td&gt;
&lt;td&gt;Away&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;Invisible&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;span class="caps"&gt;IRC&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Online&lt;/td&gt;
&lt;td&gt;Away&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Microsoft Lync&lt;/td&gt;
&lt;td&gt;Online&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Busy&lt;/li&gt;
&lt;li&gt;Away&lt;/li&gt;
&lt;li&gt;In a&amp;nbsp;meeting&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;In a call&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Yahoo! Messenger&lt;/td&gt;
&lt;td&gt;Available&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Busy&lt;/li&gt;
&lt;li&gt;Stepped&amp;nbsp;out&lt;/li&gt;
&lt;li&gt;Be right&amp;nbsp;back&lt;/li&gt;
&lt;li&gt;Not at my&amp;nbsp;desk&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;On the phone&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Windows Live Messenger&lt;/td&gt;
&lt;td&gt;Online&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Busy&lt;/li&gt;
&lt;li&gt;Away&lt;/li&gt;
&lt;li&gt;Be Right&amp;nbsp;Back&lt;/li&gt;
&lt;li&gt;Out to&amp;nbsp;lunch&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;On the phone&lt;/td&gt;
&lt;td&gt;Appear offline&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;span class="caps"&gt;XMPP&lt;/span&gt; (e.g. Google Talk)&lt;/td&gt;
&lt;td&gt;Available&lt;/td&gt;
&lt;td&gt;Busy&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</content><category term="chat"></category><category term="instant messaging"></category><category term="Instantbird"></category><category term="messaging"></category><category term="status"></category><category term="Thunderbird"></category></entry><entry><title>Instantbird 1.2 Released (with awesome new IRC features)!</title><link href="https://patrick.cloke.us/posts/2012/08/08/instantbird-12-released-with-awesome/" rel="alternate"></link><published>2012-08-08T13:08:00-04:00</published><updated>2012-08-08T13:08:00-04:00</updated><author><name>Patrick Cloke</name></author><id>tag:patrick.cloke.us,2012-08-08:/posts/2012/08/08/instantbird-12-released-with-awesome/</id><summary type="html">&lt;p&gt;If you haven&amp;#8217;t seen the announcement&amp;#8230;&lt;a class="reference external" href="http://blog.instantbird.org/2012/08/instantbird-1-2-released/"&gt;Instantbird 1.2 has been
released&lt;/a&gt;!&amp;nbsp; It&amp;#8217;s got a ton of great new features that I&amp;#8217;m excited for:
&lt;a class="reference external" href="http://blog.instantbird.org/2012/08/tab-completion-in-instantbird-1-2/"&gt;better tab complete&lt;/a&gt;, a marker showing the last viewed messages,
support for Bonjour and more.&amp;nbsp; But the most exciting bits to me are …&lt;/p&gt;</summary><content type="html">&lt;p&gt;If you haven&amp;#8217;t seen the announcement&amp;#8230;&lt;a class="reference external" href="http://blog.instantbird.org/2012/08/instantbird-1-2-released/"&gt;Instantbird 1.2 has been
released&lt;/a&gt;!&amp;nbsp; It&amp;#8217;s got a ton of great new features that I&amp;#8217;m excited for:
&lt;a class="reference external" href="http://blog.instantbird.org/2012/08/tab-completion-in-instantbird-1-2/"&gt;better tab complete&lt;/a&gt;, a marker showing the last viewed messages,
support for Bonjour and more.&amp;nbsp; But the most exciting bits to me are our
JavaScript implementations of &lt;a class="reference external" href="http://lxr.instantbird.org/instantbird/source/chat/protocols/xmpp/"&gt;&lt;span class="caps"&gt;XMPP&lt;/span&gt;&lt;/a&gt; (used for &lt;a class="reference external" href="http://lxr.instantbird.org/instantbird/source/chat/protocols/facebook/"&gt;Facebook Chat&lt;/a&gt; and
&lt;a class="reference external" href="http://lxr.instantbird.org/instantbird/source/chat/protocols/gtalk/"&gt;GTalk&lt;/a&gt;, so far) and &lt;a class="reference external" href="http://lxr.instantbird.org/instantbird/source/chat/protocols/irc/"&gt;&lt;span class="caps"&gt;IRC&lt;/span&gt;&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;Why am I so excited for them? Mostly because they&amp;#8217;re extendable!
(Well&amp;#8230;and I guess because I wrote most of the &lt;span class="caps"&gt;IRC&lt;/span&gt; code.) I&amp;#8217;ve
&lt;a class="reference external" href="https://patrick.cloke.us/posts/2012/06/11/irc-auto-performs/"&gt;written&lt;/a&gt; a bit about this before for &lt;span class="caps"&gt;IRC&lt;/span&gt;&amp;#8230;but it will let add-ons do
whatever they want to the &lt;span class="caps"&gt;IRC&lt;/span&gt; protocol.&amp;nbsp; You should check out the
implementations (links above), they&amp;#8217;re very hackable.&amp;nbsp; Hopefully we can
remove libpurple &lt;span class="caps"&gt;XMPP&lt;/span&gt; and fully switch to Instantbird&amp;#8217;s &lt;span class="caps"&gt;XMPP&lt;/span&gt; for the
next release, once a few &lt;a class="reference external" href="https://bugzilla.mozilla.org/show_bug.cgi?id=14328"&gt;Mozilla bugs&lt;/a&gt; are&amp;nbsp;fixed.&lt;/p&gt;
&lt;p&gt;Did I also mention that these implementations (including the raw &lt;span class="caps"&gt;XMPP&lt;/span&gt;
and Twitter, which Instantbird has supported since 1.0) are going to be
included in &lt;a class="reference external" href="http://www.mozilla.org/en-US/thunderbird/"&gt;Thunderbird&lt;/a&gt;15, as part of it&amp;#8217;s new &lt;a class="reference external" href="https://wiki.mozilla.org/Modules/Chat"&gt;chat feature&lt;/a&gt;?
Florian has done a great job of integrating our chat code there and it
gives quite a different user experience than Instantbird, so don&amp;#8217;t be
worried about Instantbird going&amp;nbsp;away!&lt;/p&gt;
&lt;p&gt;Now of course, we always think of the future here (after all,
releasing itself isn&amp;#8217;t really exciting when most of the features have
been in nightly builds&amp;#8230;forever), so we started making a list of some
of the stuff we&amp;#8217;d like to implement in future Instantbirds, you can
check it out &lt;a class="reference external" href="https://etherpad.mozilla.org/ib-1-3"&gt;here&lt;/a&gt;. Some of them are very exciting, feel free to grab
one and work on&amp;nbsp;it.&lt;/p&gt;
</content><category term="Instantbird"></category><category term="IRC"></category></entry><entry><title>IRC Auto-Performs</title><link href="https://patrick.cloke.us/posts/2012/06/11/irc-auto-performs/" rel="alternate"></link><published>2012-06-11T22:25:00-04:00</published><updated>2012-06-11T22:25:00-04:00</updated><author><name>Patrick Cloke</name></author><id>tag:patrick.cloke.us,2012-06-11:/posts/2012/06/11/irc-auto-performs/</id><summary type="html">
&lt;p&gt;There have been a &lt;a class="reference external" href="https://bugzilla.mozilla.org/show_bug.cgi?id=742675"&gt;few&lt;/a&gt; &lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=1101"&gt;requests&lt;/a&gt; to support “auto-performs”
(sending commands to the &lt;span class="caps"&gt;IRC&lt;/span&gt; server after connection that the user types
into a box or whatever). Personally I find this to be:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;A fairly awful user experience.&lt;/li&gt;
&lt;li&gt;Confusing to new users.&lt;/li&gt;
&lt;li&gt;Unnecessary.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I additionally don’t like this idea since …&lt;/p&gt;</summary><content type="html">
&lt;p&gt;There have been a &lt;a class="reference external" href="https://bugzilla.mozilla.org/show_bug.cgi?id=742675"&gt;few&lt;/a&gt; &lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=1101"&gt;requests&lt;/a&gt; to support “auto-performs”
(sending commands to the &lt;span class="caps"&gt;IRC&lt;/span&gt; server after connection that the user types
into a box or whatever). Personally I find this to be:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;A fairly awful user experience.&lt;/li&gt;
&lt;li&gt;Confusing to new users.&lt;/li&gt;
&lt;li&gt;Unnecessary.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I additionally don’t like this idea since it requires us to have
commands for all the common tasks you’d want to do in an auto-perform
(or support sending absolutely raw messages to the server, which we
actually do already in the /quote command). Essentially what I just
described is writing our own scripting language…that seems pointless
(and frankly, I have better things to do). I’m hoping to convince you
with this post (and maybe a series of posts) that auto-performs aren’t
necessary and a trivial restartless extension can replace them.&lt;/p&gt;
&lt;div class="section" id="design"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id1"&gt;Design&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Part of the desire to &lt;a class="reference external" href="https://patrick.cloke.us/posts/2011/04/30/why-rewrite-irc-protocol-plugin-part-2/"&gt;replace the libpurple &lt;span class="caps"&gt;IRC&lt;/span&gt; protocol plugin&lt;/a&gt;
with a new JavaScript one built specifically for Instantbird (which is
also now used in Thunderbird!) was to make the protocol fully
extensible. There are &lt;a class="reference external" href="https://patrick.cloke.us/posts/2011/03/08/so-called-irc-specifications/"&gt;many revisions and unofficial extensions to &lt;span class="caps"&gt;IRC&lt;/span&gt;&lt;/a&gt;
and we might not necessarily want to support them all (especially if
they only apply to a single network). Allowing all parts of the protocol
implementation to be touched and extended seemed like a great way to
handle this.&lt;/p&gt;
&lt;p&gt;Initially I tried to do this by making the &lt;span class="caps"&gt;IRC&lt;/span&gt; account into an &lt;span class="caps"&gt;XPCOM&lt;/span&gt;
component (well it is one already, it’s an prplIAccount, but I meant an
&lt;span class="caps"&gt;IRC&lt;/span&gt; specific one: implementing ircIAccount, if you will). Unfortunately,
this seemed to have a lot of overhead and got complicated extremely
quickly. Anything I’d want to touch from a message handler (wait,
wait…what’s a handler?! I’ll get back to that) would need to have
methods written and exposed to access internal data of the
account…does that sound very extensible to you? Well, it doesn’t to me…&lt;/p&gt;
&lt;p&gt;Onto design two! (Well actually my first design…) Lots of JavaScript
objects! The entire protocol is implemented as a set of JavaScript
objects and the handlers directly touch and modify the account’s data
(of course there’s methods for abstraction, etc.). This means that an
extension has absolutely &lt;span class="caps"&gt;FULL&lt;/span&gt; access to every about an account…this
also means an extension could seriously mess with and cause the protocol
to stop working or do really crazy things, etc. Unfortunately there
isn’t really a way to avoid that. Hopefully people write good code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="messages"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id2"&gt;Messages&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I’m going to go into an aside about messages right now, even though it
doesn’t quite seem relevent yet. It will. &lt;span class="caps"&gt;IRC&lt;/span&gt; has a bunch of
sub-protocols embedded within the &lt;span class="caps"&gt;IRC&lt;/span&gt; protocol (see the link above about
unofficial extensions). We attempt to parse all the string messages and
make pretty JavaScript objects out of them. I’ve actually identified
five (yes, count that: five) different sub-“protocols” within &lt;span class="caps"&gt;IRC&lt;/span&gt; that
we deal:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;span class="caps"&gt;IRC&lt;/span&gt; itself (i.e. &lt;a class="reference external" href="http://tools.ietf.org/html/rfc1459"&gt;&lt;span class="caps"&gt;RFC&lt;/span&gt; 1459&lt;/a&gt; / &lt;a class="reference external" href="http://tools.ietf.org/html/rfc2812"&gt;&lt;span class="caps"&gt;RFC&lt;/span&gt; 2812&lt;/a&gt; / various numeric extensions)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.irchelp.org/irchelp/rfc/ctcpspec.html"&gt;&lt;span class="caps"&gt;CTCP&lt;/span&gt; (the Client-to-Client Protocol)&lt;/a&gt;,embedded in &lt;span class="caps"&gt;PRIVMSG&lt;/span&gt; commands
of &lt;span class="caps"&gt;IRC&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;DCC&lt;/span&gt; (Direct Client-to-Client), a subprotocol of &lt;span class="caps"&gt;CTCP&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://tools.ietf.org/html/draft-brocklesby-irc-isupport-03"&gt;&lt;span class="caps"&gt;ISUPPORT&lt;/span&gt;&lt;/a&gt; (also known as Numeric 005), a method of negotiating
capabilities between a client and server&lt;/li&gt;
&lt;li&gt;And finally, handling of &lt;span class="caps"&gt;IRC&lt;/span&gt; Services (there’s a lot of them and no
specification, but we treat them specially)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Briefly what happens when we receive a raw message over the wire, we
create an &lt;a class="reference external" href="http://hg.instantbird.org/instantbird/file/b8d8b6e60aef/chat/protocols/irc/irc.js#l14"&gt;ircMessage object out of it using a variety of regular
expressions&lt;/a&gt;. This object has a variety of fields (see the link for
details), including the command, who sent the message and the parameters.&lt;/p&gt;
&lt;p&gt;If the message is identified as a &lt;span class="caps"&gt;CTCP&lt;/span&gt; message, we then morph the
ircMessage into a &lt;a class="reference external" href="http://hg.instantbird.org/instantbird/file/b8d8b6e60aef/chat/protocols/irc/ircCTCP.jsm#l44"&gt;CTCPMessage&lt;/a&gt;, which can be morphed into a
&lt;a class="reference external" href="http://hg.instantbird.org/instantbird/file/b8d8b6e60aef/chat/protocols/irc/ircDCC.jsm#l20"&gt;DCCMessage&lt;/a&gt;. Additionally, a 005 reply can be parsed into a
&lt;a class="reference external" href="http://hg.instantbird.org/instantbird/file/b8d8b6e60aef/chat/protocols/irc/ircISUPPORT.jsm#l22"&gt;isupportMessage&lt;/a&gt;. And last, but not least, a received &lt;span class="caps"&gt;PRIVMSG&lt;/span&gt; can also
be parsed into a &lt;a class="reference external" href="http://hg.instantbird.org/instantbird/file/b8d8b6e60aef/chat/protocols/irc/ircServices.jsm#l19"&gt;ServiceMessage&lt;/a&gt;. Each of these extends the &lt;span class="caps"&gt;IRC&lt;/span&gt;
message without destroying information. (Yes, I’m realizing now that my
choice of whether to use capitals is all messed up…)&lt;/p&gt;
&lt;p&gt;Well, why do we care…? By preparsing the strings into objects (as
defined by any “specifications” that exist), we keep extensions from
having to parse messages over and over again from strings.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="handlers"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;Handlers&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A handler is simply what I call the object that contains the methods
to deal with an incoming message. Pretty much, you get to say “Only send
me &lt;span class="caps"&gt;ISUPPORT&lt;/span&gt; messages!” or “Only send me &lt;span class="caps"&gt;CTCP&lt;/span&gt; messages!” and voila, you
only get that type of message. Each message type has a field that is
used to choose the method to run (for the &lt;span class="caps"&gt;IRC&lt;/span&gt; messages, the “command”,
for &lt;span class="caps"&gt;CTCP&lt;/span&gt; the “&lt;span class="caps"&gt;CTCP&lt;/span&gt; command”, &lt;span class="caps"&gt;ISUPPORT&lt;/span&gt; the “parameter”, etc.) This sounds
a lot more complicated than it is, I think a brief &lt;a class="reference external" href="https://bitbucket.org/clokep/irc-extras/src/6f778f17172a/example/bootstrap.js"&gt;example&lt;/a&gt; is in order:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;ircSimpleExample&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// The name here is really only used in error messages.&lt;/span&gt;
  &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"IRC Simple Example"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="c1"&gt;// Slightly above the default priority so we run before the main IRC handler.&lt;/span&gt;
  &lt;span class="nx"&gt;priority&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ircHandlers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DEFAULT_PRIORITY&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="c1"&gt;// Run this for all accounts (note that the 'this' object in this method is&lt;/span&gt;
  &lt;span class="c1"&gt;// the JavaScript account object.&lt;/span&gt;
  &lt;span class="nx"&gt;isEnabled&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

  &lt;span class="c1"&gt;// The commands we want to handle. For each of these, the account object is&lt;/span&gt;
  &lt;span class="c1"&gt;// bound to 'this' and the single parameter is of the type that you've&lt;/span&gt;
  &lt;span class="c1"&gt;// registered your handle.&lt;/span&gt;
  &lt;span class="nx"&gt;commands&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"001"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aMessage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// At the 001 response we've successfully connected to the server.&lt;/span&gt;
      &lt;span class="c1"&gt;// Send an IDENTIFY command to NickServ.&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"PRIVMSG"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"NickServ"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"IDENTIFY &amp;lt;your password&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

      &lt;span class="c1"&gt;// Return false so the default handler still runs.&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Just like that we’ve designed a handler! Whenever the 001 method is
received from the server, this function will run and attempt to identify
with the NickServ (of course this could use a bit more security on it,
but it’s to demonstrate the possibilities). (The sendMessage function
takes the command to send and an array of parameters to send.)&lt;/p&gt;
&lt;p&gt;As this is already a long post, I think I’ll cut this off now and
continue this at another time, but I hope I’m beginning to convince you
that allowing directy access to the account and protocol implementation
is a more powerful (and even simpler in many ways, in my opinion)
alternative to “auto-performs”. The one major downside I see to this, is
that it requires a bit more understanding of the actual protocol level
implementation, I don’t feel that knowing you need to use “&lt;span class="caps"&gt;PRIVMSG&lt;/span&gt;” as a
command instead of /msg is a huge issue, however.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Instantbird"></category><category term="IRC"></category><category term="Mozilla"></category></entry><entry><title>Instantbird Contact List Hack #2</title><link href="https://patrick.cloke.us/posts/2012/01/15/instantbird-contact-list-hack-2/" rel="alternate"></link><published>2012-01-15T10:00:00-05:00</published><updated>2012-01-15T10:00:00-05:00</updated><author><name>Patrick Cloke</name></author><id>tag:patrick.cloke.us,2012-01-15:/posts/2012/01/15/instantbird-contact-list-hack-2/</id><summary type="html">&lt;p&gt;There was a &lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=987"&gt;request&lt;/a&gt; on the Instantbird Bugzilla to always show
contacts in the contact list as the &amp;#8220;big&amp;#8221; contact (as shown when a
contact is selected).&amp;nbsp; Similarly to my &lt;a class="reference external" href="https://patrick.cloke.us/posts/2011/10/31/instantbird-contact-list-hack/"&gt;last post&lt;/a&gt;, this can easily be
done with userChrome.css.&amp;nbsp; See the post if you don&amp;#8217;t know what
userChrome …&lt;/p&gt;</summary><content type="html">&lt;p&gt;There was a &lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=987"&gt;request&lt;/a&gt; on the Instantbird Bugzilla to always show
contacts in the contact list as the &amp;#8220;big&amp;#8221; contact (as shown when a
contact is selected).&amp;nbsp; Similarly to my &lt;a class="reference external" href="https://patrick.cloke.us/posts/2011/10/31/instantbird-contact-list-hack/"&gt;last post&lt;/a&gt;, this can easily be
done with userChrome.css.&amp;nbsp; See the post if you don&amp;#8217;t know what
userChrome.css&amp;nbsp;is.&lt;/p&gt;
&lt;p&gt;Again, we&amp;#8217;re simply going to always apply a specific &lt;span class="caps"&gt;CSS&lt;/span&gt; style to the
contacts, namely we&amp;#8217;ll be modifying the behavior of &lt;a class="reference external" href="http://lxr.instantbird.org/instantbird/source/instantbird/content/blist.css#38"&gt;blist.css&lt;/a&gt;.&amp;nbsp; I&amp;#8217;m
sure you don&amp;#8217;t really care about that and just want the code, well I&amp;#8217;ll&amp;nbsp;oblige:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/* Expand all contacts to the big contact. */&lt;/span&gt;
&lt;span class="nx"&gt;contact&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;moz&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;binding&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;chrome://instantbird/content/contact.xml#contact-big&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;moz&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;box&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;orient&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;vertical&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;moz&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;box&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;align&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;stretch&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And that&amp;#8217;s it!&amp;nbsp; Restart Instantbird and you should always have big
contacts.&amp;nbsp; I haven&amp;#8217;t seen any issues of using this (missing or wrong
behavior), but of course your mileage might vary.&amp;nbsp; Have&amp;nbsp;fun!&lt;/p&gt;
</content><category term="customizing"></category><category term="Instantbird"></category><category term="programming"></category></entry><entry><title>Instantbird Contact List Hack</title><link href="https://patrick.cloke.us/posts/2011/10/31/instantbird-contact-list-hack/" rel="alternate"></link><published>2011-10-31T20:20:00-04:00</published><updated>2011-10-31T20:20:00-04:00</updated><author><name>Patrick Cloke</name></author><id>tag:patrick.cloke.us,2011-10-31:/posts/2011/10/31/instantbird-contact-list-hack/</id><summary type="html">&lt;p&gt;A friend of mine asked me if there was a way to have selected contacts
in the contact list &lt;span class="caps"&gt;NOT&lt;/span&gt; expand to two lines (where the status goes onto
the second line) in&amp;nbsp;Instantbird.&lt;/p&gt;
&lt;p&gt;There&amp;#8217;s actually no option to do this in Instantbird, but with a
little &lt;a class="reference external" href="http://www-archive.mozilla.org/unix/customizing.html"&gt;userChrome&lt;/a&gt; tweak …&lt;/p&gt;</summary><content type="html">&lt;p&gt;A friend of mine asked me if there was a way to have selected contacts
in the contact list &lt;span class="caps"&gt;NOT&lt;/span&gt; expand to two lines (where the status goes onto
the second line) in&amp;nbsp;Instantbird.&lt;/p&gt;
&lt;p&gt;There&amp;#8217;s actually no option to do this in Instantbird, but with a
little &lt;a class="reference external" href="http://www-archive.mozilla.org/unix/customizing.html"&gt;userChrome&lt;/a&gt; tweak, we can easily get this behavior (although
with a couple caveats).&amp;nbsp; You should be able to add a new folder &lt;a class="reference external" href="http://instantbird.com/faq.html#profilefolder"&gt;inside
your profile&lt;/a&gt; called chrome.&amp;nbsp; Inside of this make a new file called
userChrome.css and place the&amp;nbsp;following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="nn"&gt;buddylistbox&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;focus&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;contact&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;selected&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kp"&gt;-moz-&lt;/span&gt;&lt;span class="n"&gt;binding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;chrome://instantbird/content/contact.xml#contact&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kp"&gt;-moz-&lt;/span&gt;&lt;span class="n"&gt;box-orient&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;horizontal&lt;/span&gt; &lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Save the file and restart&amp;#8230;and that&amp;#8217;s it! Now your selected contacts
should be on one line, just like your unselected&amp;nbsp;contacts.&lt;/p&gt;
&lt;p&gt;I did mention there was a caveat though! If you want to expand a
contact (to see all the protocols, etc. that you&amp;#8217;ve merged together)
you&amp;#8217;ll need to use the arrow keys: right arrow expands a contact, left
arrow collapses a contact.&amp;nbsp; (You need to do this since the chevron icon
that lets you expand/collapse isn&amp;#8217;t shown on a non-selected&amp;nbsp;contact.)&lt;/p&gt;
&lt;p&gt;(Some more technical details: we&amp;#8217;re forcing the standard contact
template to be used instead of the contact-big template, even when the
contact is expanded; i.e. we&amp;#8217;re overwriting the command given
&lt;a class="reference external" href="http://lxr.instantbird.org/instantbird/source/instantbird/content/blist.css#44"&gt;blist.css&lt;/a&gt;.)&lt;/p&gt;
</content><category term="customizing"></category><category term="Instantbird"></category><category term="programming"></category></entry><entry><title>Adding a protocol to Instantbird (Part 2)</title><link href="https://patrick.cloke.us/posts/2011/09/03/adding-protocol-to-instantbird-part-2/" rel="alternate"></link><published>2011-09-03T10:31:00-04:00</published><updated>2011-09-03T10:31:00-04:00</updated><author><name>Patrick Cloke</name></author><id>tag:patrick.cloke.us,2011-09-03:/posts/2011/09/03/adding-protocol-to-instantbird-part-2/</id><summary type="html">
&lt;p&gt;I had &lt;a class="reference external" href="https://patrick.cloke.us/posts/2011/06/18/adding-new-protocol-sipeoffice/"&gt;previously talked about adding a protocol to Instantbird&lt;/a&gt;,
that focused on adding &lt;span class="caps"&gt;SIPE&lt;/span&gt; (Microsoft Office Communicator support).
Since then I’ve been slowly working on defeating &lt;span class="caps"&gt;SIPE&lt;/span&gt;.  Fortunately I
found a few flags that help us compile it easily in Instantbird: we can
declare that we do &lt;em&gt;not …&lt;/em&gt;&lt;/p&gt;</summary><content type="html">
&lt;p&gt;I had &lt;a class="reference external" href="https://patrick.cloke.us/posts/2011/06/18/adding-new-protocol-sipeoffice/"&gt;previously talked about adding a protocol to Instantbird&lt;/a&gt;,
that focused on adding &lt;span class="caps"&gt;SIPE&lt;/span&gt; (Microsoft Office Communicator support).
Since then I’ve been slowly working on defeating &lt;span class="caps"&gt;SIPE&lt;/span&gt;.  Fortunately I
found a few flags that help us compile it easily in Instantbird: we can
declare that we do &lt;em&gt;not&lt;/em&gt; have gmime and the standard libpurple &lt;span class="caps"&gt;MIME&lt;/span&gt;
functions will be used (they might not be as good, but it keeps from
adding &amp;gt;10 &lt;span class="caps"&gt;MB&lt;/span&gt; of source to Instantbird).&lt;/p&gt;
&lt;p&gt;Some modifications to the &lt;span class="caps"&gt;SIPE&lt;/span&gt; source were made to compile it in
Instantbird (note that most of the changes were probably more based on
using &lt;span class="caps"&gt;MSVC&lt;/span&gt;, than having to do with Instantbird).  The code is also
broken up into a few different sections the core, api, and purple are
ones we care about (they’re working on making a general Office
Communicator protocol library, so the purple folder contains the
libpurple bindings that use the api, while the core is private).&lt;/p&gt;
&lt;div class="section" id="purple"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id1"&gt;Purple&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Changes to purple consisted mostly of ifdefs that remove some header
files not supported on Windows.  For example, I encountered a few of:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Luckily there was already a define &lt;tt class="docutils literal"&gt;HAVE_UNISTD_H&lt;/tt&gt;, so I just needed
to add:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#ifdef HAVE_UNISTD_H&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Easy!  There were also a couple other issues, but those were rather trivial.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="core"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id2"&gt;Core&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There isn’t a specific issue in the core I’d like to highlight, it did
use a few glib functions which we didn’t have (we removed the files, as
they were unused), they were all reimplemented in libpurple though, so
we were able to just define the function calls to the libpurple variants.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="api"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;&lt;span class="caps"&gt;API&lt;/span&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This had similar issues the core (in particular, there was a function
which used &lt;tt class="docutils literal"&gt;g_usleep&lt;/tt&gt;, which is blocking and a definite no-no for a
protocol plug-in, I’ve removed that…hopefully it doesn’t break
anything!)  In addition to that, we needed to use the libpurple l10n
system instead of glib’s gi18n.h, this was easily copied from
libpurple’s internal &lt;span class="caps"&gt;API&lt;/span&gt; though.&lt;/p&gt;
&lt;p&gt;So at this point…I have a copy of &lt;span class="caps"&gt;SIPE&lt;/span&gt; compiled!  Unfortunately
since I’m using Visual Studio Express I cannot compile on my computer
and deploy to other computers for testing (a Mozilla issue with how it
uses some of the header files, etc., I believe).  I’m looking into
trying to get this to work though, apparently using the exact same copy
of &lt;span class="caps"&gt;MSVC&lt;/span&gt; Redistributable might help.  Once this is tested, hopefully
it’ll land in Instantbird for use!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="sametime-support"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4"&gt;Sametime support&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Unrelated to &lt;span class="caps"&gt;SIPE&lt;/span&gt;, but recently I landed a patch in Instantbird to add
back Sametime support (Sametime is Lotus Notes’ equivalent to Office
Communicator).  You can see the gory details in &lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=102"&gt;bug 102&lt;/a&gt;, but in
general it’s similar to what I’ve (not gone into great detail about)
here. Most of getting Sametime to work was rewriting some C code
that doesn’t compile in &lt;span class="caps"&gt;MSVC&lt;/span&gt;.  There’s also a &lt;a class="reference external" href="https://bugzilla.instantbird.org/attachment.cgi?id=797&amp;amp;action=diff"&gt;diff&lt;/a&gt; of all the
changes I made to the libpurple Sametime plugin and the external library
(called &lt;a class="reference external" href="http://meanwhile.sourceforge.net/"&gt;Meanwhile&lt;/a&gt;) to get it to work.  Once I get Monotone (a version
control system) set up I’ll look into getting these changes pushed back
to libpurple to avoid diverging code bases.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Instantbird"></category><category term="programming"></category><category term="SIPE"></category></entry><entry><title>Adding a new protocol (SIPE/Office Communicator) to Instantbird (part 1)</title><link href="https://patrick.cloke.us/posts/2011/06/18/adding-new-protocol-sipeoffice/" rel="alternate"></link><published>2011-06-18T21:53:00-04:00</published><updated>2011-06-18T21:53:00-04:00</updated><author><name>Patrick Cloke</name></author><id>tag:patrick.cloke.us,2011-06-18:/posts/2011/06/18/adding-new-protocol-sipeoffice/</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Office_Communicator"&gt;Microsoft Office Communicator&lt;/a&gt; is an instant messaging client that
integrates into the &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Microsoft_Exchange_Server"&gt;Exchange Messaging Server&lt;/a&gt; (the protocol behind it
is an extended version of &lt;span class="caps"&gt;SIP&lt;/span&gt;/&lt;span class="caps"&gt;SIMPLE&lt;/span&gt;).&amp;nbsp; Anyway, there&amp;#8217;s a &lt;a class="reference external" href="http://developer.pidgin.im/wiki/WhatIsLibpurple"&gt;libpurple&lt;/a&gt;
(i.e. the backend of &lt;a class="reference external" href="http://instantbird.com/"&gt;Instantbird&lt;/a&gt; and &lt;a class="reference external" href="http://pidgin.im/"&gt;Pidgin&lt;/a&gt;) protocol plug-in for
&lt;span class="caps"&gt;OCS&lt;/span&gt; (Office Communicator Server) called &lt;a class="reference external" href="http://sipe.sourceforge.net/"&gt;&lt;span class="caps"&gt;SIPE&lt;/span&gt;&lt;/a&gt;.&amp;nbsp; (It&amp;#8217;s …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Office_Communicator"&gt;Microsoft Office Communicator&lt;/a&gt; is an instant messaging client that
integrates into the &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Microsoft_Exchange_Server"&gt;Exchange Messaging Server&lt;/a&gt; (the protocol behind it
is an extended version of &lt;span class="caps"&gt;SIP&lt;/span&gt;/&lt;span class="caps"&gt;SIMPLE&lt;/span&gt;).&amp;nbsp; Anyway, there&amp;#8217;s a &lt;a class="reference external" href="http://developer.pidgin.im/wiki/WhatIsLibpurple"&gt;libpurple&lt;/a&gt;
(i.e. the backend of &lt;a class="reference external" href="http://instantbird.com/"&gt;Instantbird&lt;/a&gt; and &lt;a class="reference external" href="http://pidgin.im/"&gt;Pidgin&lt;/a&gt;) protocol plug-in for
&lt;span class="caps"&gt;OCS&lt;/span&gt; (Office Communicator Server) called &lt;a class="reference external" href="http://sipe.sourceforge.net/"&gt;&lt;span class="caps"&gt;SIPE&lt;/span&gt;&lt;/a&gt;.&amp;nbsp; (It&amp;#8217;s also striving
for a generic library to connect to &lt;span class="caps"&gt;OCS&lt;/span&gt;, but that&amp;#8217;s not quite there&amp;nbsp;yet.)&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve been interested in getting this to compile in the Instantbird
framework for a while now, adding a new protocol to Instantbird.&amp;nbsp; First
of course I need the &lt;span class="caps"&gt;SIPE&lt;/span&gt; source, I chose to grab a release &lt;a class="reference external" href="http://sourceforge.net/projects/sipe/files/sipe/pidgin-sipe-1.11.2/"&gt;source
bundle&lt;/a&gt; instead of using the &lt;a class="reference external" href="http://sourceforge.net/apps/mediawiki/sipe/index.php?title=Windows_Build"&gt;git repository&lt;/a&gt;, just for ease moving
files around, etc.&amp;nbsp; There&amp;#8217;s a rather vague &lt;a class="reference external" href="http://sourceforge.net/apps/mediawiki/sipe/index.php?title=Windows_Build"&gt;Windows build&lt;/a&gt; page on the
wiki that I started with, says I&amp;nbsp;need:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;libpurple &amp;gt;2.4.0 (we have&amp;nbsp;2.7.11)&lt;/li&gt;
&lt;li&gt;libglib &amp;gt;2.12.0 (we have&amp;nbsp;2.28.6)&lt;/li&gt;
&lt;li&gt;libxml2 (we have&amp;nbsp;this)&lt;/li&gt;
&lt;li&gt;gmime &amp;gt;2.4 (not currently&amp;nbsp;used)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So great, &lt;a class="reference external" href="https://wiki.instantbird.org/Instantbird:Third_party_code"&gt;we have most of the dependencies&lt;/a&gt;! We just need one more.
So I go grab, &lt;a class="reference external" href="http://developer.gnome.org/gmime/"&gt;gmime&lt;/a&gt;from the &lt;span class="caps"&gt;GNOME&lt;/span&gt; website (2.5.7, which is the
newest stable, currently), again as a source bundle and put the
necessary files in purple/libraries/gmime and edit the makefile so it
will (attempt) to compile.&amp;nbsp; But great &amp;#8212; it requires &lt;a class="reference external" href="http://www.gnu.org/software/libiconv/"&gt;libiconv&lt;/a&gt;, which
apparently is very difficult to compile, especially on Windows.&amp;nbsp; Luckily
for me there&amp;#8217;s a Windows version (not a port, but one that uses the
native Win32 APIs with the same interface): &lt;a class="reference external" href="http://code.google.com/p/win-iconv/"&gt;win-iconv&lt;/a&gt;.&amp;nbsp; This compiled
like a champ when added as&amp;nbsp;purple/libraries/iconv.&lt;/p&gt;
&lt;p&gt;Unfortunately when I went back to compiling gmime, it attempts to
access parts of glib we&amp;#8217;re not using (gio, in particular) and thus is
not in our source code.&amp;nbsp; I can grab the &lt;a class="reference external" href="http://developer.gnome.org/glib/"&gt;glib&lt;/a&gt; source (2.28.6 to match,
of course) and add the gio subfolder, but first we should check if this
part of gmime is even used by &lt;span class="caps"&gt;SIPE&lt;/span&gt;! (My guess is that it is &lt;em&gt;not&lt;/em&gt;, but
that&amp;#8217;s where I&amp;#8217;m at now.&amp;nbsp; I&amp;#8217;ll post back when I get&amp;nbsp;further.&lt;/p&gt;
</content><category term="Instantbird"></category><category term="programming"></category><category term="SIPE"></category></entry><entry><title>Compiling Instantbird</title><link href="https://patrick.cloke.us/posts/2011/05/16/compilling-instantbird/" rel="alternate"></link><published>2011-05-16T21:30:00-04:00</published><updated>2011-05-16T21:30:00-04:00</updated><author><name>Patrick Cloke</name></author><id>tag:patrick.cloke.us,2011-05-16:/posts/2011/05/16/compilling-instantbird/</id><summary type="html">
&lt;p&gt;In the past I’ve tried to compile a few different programs that use
the Mozilla toolkit to various levels of success.  I’ve tried to compile
Thunderbird, Songbird and Instantbird at various points.  I got
Thunderbird to compile, but it only worked sporadically (although I
think that was Firefox …&lt;/p&gt;</summary><content type="html">
&lt;p&gt;In the past I’ve tried to compile a few different programs that use
the Mozilla toolkit to various levels of success.  I’ve tried to compile
Thunderbird, Songbird and Instantbird at various points.  I got
Thunderbird to compile, but it only worked sporadically (although I
think that was Firefox moving so fast that Thunderbird couldn’t keep
up), Songbird I gave up on rather quickly and Instantbird I’ve tried a
few times.&lt;/p&gt;
&lt;p&gt;Last summer I had Instantbird compiling on my old laptop (a Lenovo
T60), which is &amp;gt;5 years old at this point and has had the heatsink / fan
replaced twice — a known issue with that model laptop.  Needless to
say, that laptop didn’t like compiling something on Windows that took
approximately an hour with a large number of reads and writes to the
hard drive.  This mixed with it being an old dual core + a 5400 &lt;span class="caps"&gt;RPM&lt;/span&gt;
meant I’d be waiting a &lt;span class="caps"&gt;LONG&lt;/span&gt; time for my code to compile.  I got a
Thinkpad X201 this past summer, so I finally got around to setting up a
development environment on it and was able to get Instantbird to compile
fully today.  I’ve outlined the steps I’ve followed: kind of to mirror
the &lt;a class="reference external" href="https://developer.mozilla.org/En/Simple_Thunderbird_build"&gt;Simple Thunderbird Build&lt;/a&gt; page on &lt;span class="caps"&gt;MDC&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;I’ve done this using Microsoft Windows 7 Professional (64-bit) with
Service Pack 1. (4.00 &lt;span class="caps"&gt;GB&lt;/span&gt; of &lt;span class="caps"&gt;RAM&lt;/span&gt;, Intel Core i7 M620 2.67 GHz).
Throughout these steps, the defaults locations and options are used in
the installers.&lt;/p&gt;
&lt;div class="section" id="build-requirements"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id2"&gt;Build Requirements:&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="visual-studio-express"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id3"&gt;Visual Studio Express:&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;We need to install Visual Studio Express, specifically &lt;span class="caps"&gt;VC8&lt;/span&gt; (2005) with
Service Pack 1.  (Mozilla compiles with &lt;span class="caps"&gt;VC9&lt;/span&gt; and &lt;span class="caps"&gt;VC10&lt;/span&gt; to various degrees,
but it seems libpurple only compiles with &lt;span class="caps"&gt;VC8&lt;/span&gt;, also this is what’s on
the Instantbird buildbot, so I like having the same version.)  I
couldn’t find this on Microsoft’s website but I found it on &lt;a class="reference external" href="http://www.softpedia.com/get/Programming/Other-Programming-Files/Microsoft-Visual-C-Toolkit.shtml"&gt;Softpedia&lt;/a&gt;
(which is a legitimate site).  Anyway, download the installer and
install it (which will download the actual compiler from Microsoft),
ensure that you also install the &lt;span class="caps"&gt;IDE&lt;/span&gt; (which is checked by default).&lt;/p&gt;
&lt;p&gt;This will only install &lt;span class="caps"&gt;VC8&lt;/span&gt;, the initial release.  We also need to
install &lt;a class="reference external" href="http://www.microsoft.com/downloads/en/details.aspx?FamilyID=7b0b0339-613a-46e6-ab4d-080d4d4a8c4e"&gt;Service Pack 1&lt;/a&gt;.  I personally did this using Windows Update,
but one of the installers from there should also work.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="microsoft-windows-sdk"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id4"&gt;Microsoft Windows &lt;span class="caps"&gt;SDK&lt;/span&gt;:&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Specifically we need the &lt;a class="reference external" href="http://www.microsoft.com/downloads/en/details.aspx?FamilyID=c17ba869-9671-4330-a63e-1fd44e0e2505&amp;amp;displaylang=en"&gt;Windows 7 &lt;span class="caps"&gt;SDK&lt;/span&gt;&lt;/a&gt; (for Jumplist, Aero, etc.
support).  Download and install the &lt;span class="caps"&gt;SDK&lt;/span&gt;, this one took a while for me to
install.  I ate dinner while it was installing (pasta, if you’re curious
— I already had sauce made).&lt;/p&gt;
&lt;p&gt;There’s a linker error when using &lt;span class="caps"&gt;VC8&lt;/span&gt; and the Windows 7 &lt;span class="caps"&gt;SDK&lt;/span&gt;, so we’ll
need to install a &lt;a class="reference external" href="http://support.microsoft.com/kb/949009/"&gt;hotfix&lt;/a&gt;for that (I tried without it and I ran into
the issue).  I had to download the “VS80sp1-&lt;span class="caps"&gt;KB949009&lt;/span&gt;-&lt;span class="caps"&gt;IA64&lt;/span&gt;-&lt;span class="caps"&gt;INTL&lt;/span&gt;.exe”
version (there’s also an X86 and an X64 version).  Choose the one that works.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="microsoft-macro-assembler"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id5"&gt;Microsoft Macro Assembler:&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In order to properly assemble the code we need to &lt;a class="reference external" href="http://www.microsoft.com/downloads/en/details.aspx?familyid=7A1C9DA0-0510-44A2-B042-7EF370530C64&amp;amp;displaylang=en"&gt;install &lt;span class="caps"&gt;MASM&lt;/span&gt;&lt;/a&gt;
(which I think will eventually be included in MozillaBuild, but it isn’t
currently).  Again, just install it with the defaults.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="mozillabuild"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id6"&gt;MozillaBuild:&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Almost there, I promise.  In order to get a *nix type shell to run
make, etc. in we’ll use a package from Mozilla that includes &lt;span class="caps"&gt;MSYS&lt;/span&gt;, make,
Mercurial, etc.  Download and &lt;a class="reference external" href="http://ftp.mozilla.org/pub/mozilla.org/mozilla/libraries/win32/MozillaBuildSetup-Latest.exe"&gt;install MozillaBuild&lt;/a&gt;, the latest should
work fine.&lt;/p&gt;
&lt;p&gt;Now, an unknown step: you might require the &lt;a class="reference external" href="http://www.microsoft.com/downloads/en/details.aspx?FamilyID=a5c84275-3b97-4ab7-a40d-3802b2af5fc2&amp;amp;displaylang=en"&gt;Microsoft Visual C++ 2008
&lt;span class="caps"&gt;SP1&lt;/span&gt; Redistributable Package&lt;/a&gt;.  I don’t know if you need this or not
since I &lt;em&gt;already&lt;/em&gt; had it, most likely from a previous program I’ve installed.&lt;/p&gt;
&lt;p&gt;We should be ready to build now pretty much.  For some more
information for this stuff you can check out the Mozilla Developer
Network pages I used to get this information: &lt;a class="reference external" href="https://developer.mozilla.org/En/Developer_Guide/Build_Instructions"&gt;Build Instructions&lt;/a&gt;,
&lt;a class="reference external" href="https://developer.mozilla.org/En/Developer_Guide/Build_Instructions/Windows_Prerequisites"&gt;Windows Build Prerequisites&lt;/a&gt; and &lt;a class="reference external" href="https://developer.mozilla.org/cn/VC8_Build_Instructions"&gt;&lt;span class="caps"&gt;MSVC8&lt;/span&gt; Build Instructions&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="checkout-the-code"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id7"&gt;Checkout the Code:&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We need to checkout the code.  I originally checked out the code with
TortoiseHg (which is what I normally use), but the version of Mercurial
included is significantly greater than the one included in MozillaBuild
and this caused me issues later on.  Thus, we’ll check out the code on
the command line.  Start by launching the bash shell, which is at
C:\mozilla-build\start-msvc8.bat (don’t use the x64 version).  There’s
a version here which corresponds to each version of &lt;span class="caps"&gt;VS&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Once this finishes loading you’ll be in the home directory (which is
in the root of your user’s documents and settings folder, i.e. for me:
C:\Users\clokep).  You’ll want to do the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;hg clone https://hg.instantbird.org/instantbird
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This might take a few minutes depending on how good your internet
connection is.  (The Instantbird source isn’t &lt;span class="caps"&gt;THAT&lt;/span&gt; big though, it
shouldn’t take too long.)&lt;/p&gt;
&lt;p&gt;Then we’ll need to change into the instantbird directory that was just
created and download the Mozilla source code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; instantbird
python client.py checkout
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now this step?  This one is gonna take a while.  It took me like a
couple of hours.  It pulls the Mozilla source code, which is large and
has many changesets.  Just let it go, it’ll give you progress
occasionally (changes, manifests, files, etc.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id8"&gt;Compiling Instantbird:&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We need to set up the options we want to build with.  These are
read from a .mozconfig (don’t miss the “.” in the front!).  The contents
of the .mozconfig that worked for me are:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ac_add_options --enable-application&lt;span class="o"&gt;=&lt;/span&gt;instantbird
mk_add_options &lt;span class="nv"&gt;MOZ_OBJDIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;@TOPSRCDIR@/objdir-ib-release
ac_add_options --disable-accessibility
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The first option says to build Instantbird, the second gives an output
directory and the third &lt;a class="reference external" href="https://developer.mozilla.org/en/atlbase.h"&gt;disables accessibility&lt;/a&gt; (not really sure why
we need to do this, but we’ll get that error at that link otherwise).&lt;/p&gt;
&lt;p&gt;Finally (back in the bash shell) type:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;make -f client.mk build
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now sit back and relax.  My build took about an hour to finish, maybe
a bit less — I wasn’t fully paying attention.  Once it’s done you
should see something like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Processed &lt;span class="m"&gt;1&lt;/span&gt; file, writing output:

Output:
&lt;span class="s2"&gt;"c:\\Users\\clokep\\instantbird\\objdir-ib-release\\instantbird\\installer\\windows\\instgen\\helper.exe"&lt;/span&gt;
Install: &lt;span class="m"&gt;2&lt;/span&gt; pages &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;128&lt;/span&gt; bytes&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt; section &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;16416&lt;/span&gt; bytes&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;2579&lt;/span&gt;
instructions &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;72212&lt;/span&gt; bytes&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;369&lt;/span&gt; strings &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10198&lt;/span&gt; bytes&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt; language table &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;230&lt;/span&gt; bytes&lt;span class="o"&gt;)&lt;/span&gt;.
Uninstall: &lt;span class="m"&gt;5&lt;/span&gt; pages &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;320&lt;/span&gt; bytes&lt;span class="o"&gt;)&lt;/span&gt;,
&lt;span class="m"&gt;1&lt;/span&gt; section &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;16416&lt;/span&gt; bytes&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;2063&lt;/span&gt; instructions &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;57764&lt;/span&gt; bytes&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;388&lt;/span&gt; strings
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10828&lt;/span&gt; bytes&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;1&lt;/span&gt; language table &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;314&lt;/span&gt; bytes&lt;span class="o"&gt;)&lt;/span&gt;.
Datablock optimizer saved &lt;span class="m"&gt;123940&lt;/span&gt; bytes &lt;span class="o"&gt;(&lt;/span&gt;~17.6%&lt;span class="o"&gt;)&lt;/span&gt;.
Using zlib compression.
EXE header size:               &lt;span class="m"&gt;63488&lt;/span&gt; / &lt;span class="m"&gt;39424&lt;/span&gt; bytes
Install code:                  &lt;span class="m"&gt;99564&lt;/span&gt; / &lt;span class="m"&gt;99560&lt;/span&gt; bytes
Install data:                 &lt;span class="m"&gt;118002&lt;/span&gt; / &lt;span class="m"&gt;241950&lt;/span&gt; bytes
Uninstall code+data:          &lt;span class="m"&gt;398654&lt;/span&gt; / &lt;span class="m"&gt;398646&lt;/span&gt; bytes
CRC &lt;span class="o"&gt;(&lt;/span&gt;0x062AF3F5&lt;span class="o"&gt;)&lt;/span&gt;:                  &lt;span class="m"&gt;4&lt;/span&gt; / &lt;span class="m"&gt;4&lt;/span&gt; bytes
Total size:                   &lt;span class="m"&gt;679712&lt;/span&gt; / &lt;span class="m"&gt;779584&lt;/span&gt; bytes &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;87&lt;/span&gt;.1%&lt;span class="o"&gt;)&lt;/span&gt;
c:/Users/clokep/instantbird/objdir-ib-release/mozilla/config/nsinstall.exe -D ../../../mozilla/dist/bin/uninstall
cp instgen/helper.exe ../../../mozilla/dist/bin/uninstall
make&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: Leaving directory &lt;span class="sb"&gt;`&lt;/span&gt;/c/Users/clokep/instantbird/objdir-ib-release/instantbird/installer/windows&lt;span class="s1"&gt;'&lt;/span&gt;
&lt;span class="s1"&gt;make[4]: Leaving directory `/c/Users/clokep/instantbird/objdir-ib-release/instantbird'&lt;/span&gt;
make&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: Leaving directory &lt;span class="sb"&gt;`&lt;/span&gt;/c/Users/clokep/instantbird/objdir-ib-release&lt;span class="s1"&gt;'&lt;/span&gt;
&lt;span class="s1"&gt;make[2]: Leaving directory `/c/Users/clokep/instantbird/objdir-ib-release'&lt;/span&gt;
make&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: Leaving directory &lt;span class="sb"&gt;`&lt;/span&gt;/c/Users/clokep/instantbird/objdir-ib-release&lt;span class="err"&gt;'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, to test that the build actually worked we can browse to the
compiled executable and run it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; objdir-ib-release/mozilla/dist/bin/instantbird.exe -P dev -no-remote
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The -P option specifies a profile name (dev), the second option
(-no-remote) allows you to run a second Instantbird instance (since I
assume you use Instantbird to &lt;span class="caps"&gt;IM&lt;/span&gt;…you probably want to be able to run a
second one, if you don’t use it…shame on you. Try not to close the
wrong Instantbird when you’re working on stuff).&lt;/p&gt;
&lt;p&gt;Hopefully this will help someone else get started on hacking
Instantbird.  There’s other good ways you can hack too if your computer
can’t handle compiling, including unpacking omni.jar.&lt;/p&gt;
&lt;p&gt;One last tidbit is to possibly add the option to your .mozconfig:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;--enable-chrome-format&lt;span class="o"&gt;=&lt;/span&gt;flat
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will not package anything in JARs (which pretty much just get in
the way while developing).  See &lt;a class="reference external" href="https://developer.mozilla.org/en/JAR_Packaging"&gt;here&lt;/a&gt; for more info.&lt;/p&gt;
&lt;p&gt;Edit: Fixed the path to the executable thanks to Florian. And fixed a
spelling error in the title.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Instantbird"></category><category term="Mozilla"></category><category term="programming"></category></entry><entry><title>Why rewrite the IRC protocol plugin? (Part 2)</title><link href="https://patrick.cloke.us/posts/2011/04/30/why-rewrite-irc-protocol-plugin-part-2/" rel="alternate"></link><published>2011-04-30T13:01:00-04:00</published><updated>2011-04-30T13:01:00-04:00</updated><author><name>Patrick Cloke</name></author><id>tag:patrick.cloke.us,2011-04-30:/posts/2011/04/30/why-rewrite-irc-protocol-plugin-part-2/</id><summary type="html">&lt;p&gt;I &lt;a class="reference external" href="https://patrick.cloke.us/posts/2010/12/08/why-rewrite-irc-into-javascript/"&gt;previously wrote about&lt;/a&gt; why I&amp;#8217;m rewriting the libpurple &lt;span class="caps"&gt;IRC&lt;/span&gt;
implementation into a JavaScript implementation for Instantbird.&amp;nbsp; This
is kind of a follow up, but more focused on what I hope to accomplish
feature wise for &lt;span class="caps"&gt;IRC&lt;/span&gt; in Instantbird.&amp;nbsp; A good overview to look at is the
&lt;a class="reference external" href="https://bugzilla.instantbird.org/showdependencygraph.cgi?id=507&amp;amp;display=web&amp;amp;rankdir=LR"&gt;dependencies of …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;I &lt;a class="reference external" href="https://patrick.cloke.us/posts/2010/12/08/why-rewrite-irc-into-javascript/"&gt;previously wrote about&lt;/a&gt; why I&amp;#8217;m rewriting the libpurple &lt;span class="caps"&gt;IRC&lt;/span&gt;
implementation into a JavaScript implementation for Instantbird.&amp;nbsp; This
is kind of a follow up, but more focused on what I hope to accomplish
feature wise for &lt;span class="caps"&gt;IRC&lt;/span&gt; in Instantbird.&amp;nbsp; A good overview to look at is the
&lt;a class="reference external" href="https://bugzilla.instantbird.org/showdependencygraph.cgi?id=507&amp;amp;display=web&amp;amp;rankdir=LR"&gt;dependencies of bug 507&lt;/a&gt; (implement &lt;span class="caps"&gt;IRC&lt;/span&gt; in JavaScript) &amp;#8212; you&amp;#8217;ll want
to look to the left of bug 507, these are the bugs that depend on 507
(as opposed to blocking&amp;nbsp;507).&lt;/p&gt;
&lt;p&gt;My overall hope is to make Instantbird the easiest and simplest &lt;span class="caps"&gt;IRC&lt;/span&gt;
client to use.&amp;nbsp; I&amp;#8217;ve found that most &lt;span class="caps"&gt;IRC&lt;/span&gt; clients tend to depend a great
deal on commands and essentially being a very thin &lt;span class="caps"&gt;GUI&lt;/span&gt; layer on top of
the protocol.&amp;nbsp; I don&amp;#8217;t really see the reason for this, we should attempt
to hide the protocol as much as possible from the users.&amp;nbsp; This means
fitting the &lt;span class="caps"&gt;IRC&lt;/span&gt; command responses into the &lt;span class="caps"&gt;GUI&lt;/span&gt; wherever possible and
possibly &amp;#8220;losing&amp;#8221; some features compared to other &lt;span class="caps"&gt;IRC&lt;/span&gt; clients, although
I think that&amp;#8217;s a matter of perspective.&amp;nbsp; (For example, there&amp;#8217;s often an
&lt;span class="caps"&gt;IRC&lt;/span&gt; command to list all the channels available, I &lt;em&gt;do not&lt;/em&gt; think this
should be implemented as a text command, but it should be available via
the join chat &lt;span class="caps"&gt;GUI&lt;/span&gt;).&lt;/p&gt;
&lt;p&gt;Now some more specific&amp;nbsp;plans:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Support for &lt;span class="caps"&gt;IRC&lt;/span&gt; services would be pretty awesome, I&amp;#8217;m not sure
whether this would be part of the main protocol or as an extension,
but it should be able to handle NickServ mostly autonomously
(possibly even automatically registering the nick, etc.).&amp;nbsp; MemoServ
could be implemented as a message service once there is &lt;span class="caps"&gt;UI&lt;/span&gt; for that
in Instantbird.&amp;nbsp; I&amp;#8217;m not sure how ChanServ could be handled in the
&lt;span class="caps"&gt;UI&lt;/span&gt;, but I&amp;#8217;ll think more about this.&amp;nbsp; See &lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=720"&gt;bug 720&lt;/a&gt; for more info.
(And yes, there are multiple versions of &lt;span class="caps"&gt;IRC&lt;/span&gt; services, but we can
attempt to support a subset and otherwise just leave it up to the
user.&amp;nbsp; Ideally servers would have supported this stuff&amp;#8230;but that&amp;#8217;s
not how &lt;span class="caps"&gt;IRC&lt;/span&gt;&amp;nbsp;works.)&lt;/li&gt;
&lt;li&gt;The &lt;span class="caps"&gt;UI&lt;/span&gt; should be more responsive to the modes of the user and to the
channel.&amp;nbsp; For example, if the user does not have permission to edit
the topic, it should not be editable in the &lt;span class="caps"&gt;UI&lt;/span&gt; (&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=318"&gt;bug 318&lt;/a&gt;).&amp;nbsp; Also,
if a user is a (half-)operator, there should be &lt;span class="caps"&gt;UI&lt;/span&gt; to have cause
other users to be given (h)op (&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=597"&gt;bug 597&lt;/a&gt;).&amp;nbsp; In terms of channel
modes, there could be &lt;span class="caps"&gt;UI&lt;/span&gt; to show the channel is invite only or that
it&amp;#8217;s a hidden&amp;nbsp;channel.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There&amp;#8217;s some not as user visible improvements I&amp;#8217;d like to&amp;nbsp;make:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Supporting more authentication methods in &lt;span class="caps"&gt;IRC&lt;/span&gt; (&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=719"&gt;bug 719&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There&amp;#8217;s also a few &amp;#8220;bugs&amp;#8221; in the libpurple implementation that this
will&amp;nbsp;fix:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The /msg command doesn&amp;#8217;t show outgoing messages (&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=188"&gt;bug 188&lt;/a&gt;).&amp;nbsp; I
believe this is actually already&amp;nbsp;fixed.&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;IRC&lt;/span&gt; channels should automatically rejoin on reconnect (&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=385"&gt;bug 385&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Chats with other users should show whether they are available or not
(&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=613"&gt;bug 613&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These are just some ideas and it&amp;#8217;s a long ways off for feature parity
with libpurple even.&amp;nbsp; (Although since Instantbird doesn&amp;#8217;t support all
the features of Pidgin, feature-parity in this case doesn&amp;#8217;t include
things like &lt;span class="caps"&gt;DCC&lt;/span&gt; transfer, etc. until Instantbird itself supports&amp;nbsp;those.)&lt;/p&gt;
&lt;p&gt;Right now, the code is mostly usable (and I&amp;#8217;m finally catching any
exceptions that are thrown so the code shouldn&amp;#8217;t crash anymore), and
works fine.&amp;nbsp; The one issue I&amp;#8217;m having is sometimes I&amp;#8217;m unable to
reconnect when the connection is lost, but I think I&amp;#8217;ve finally fixed
that issue and reconnection should happen&amp;nbsp;automatically!&lt;/p&gt;
&lt;p&gt;One last quick note, if you happen to have the &lt;a class="reference external" href="https://hg.instantbird.org/experiments"&gt;repository&lt;/a&gt; checked
out, you&amp;#8217;ll want to update on the default branch from now on as I&amp;#8217;ve
merged the separate branches together under&amp;nbsp;subfolders.&lt;/p&gt;
</content><category term="Instantbird"></category><category term="IRC"></category></entry><entry><title>The so-called IRC “specifications”</title><link href="https://patrick.cloke.us/posts/2011/03/08/so-called-irc-specifications/" rel="alternate"></link><published>2011-03-08T21:20:00-05:00</published><updated>2014-12-20T15:55:00-05:00</updated><author><name>Patrick Cloke</name></author><id>tag:patrick.cloke.us,2011-03-08:/posts/2011/03/08/so-called-irc-specifications/</id><summary type="html">
&lt;p&gt;In a &lt;a class="reference external" href="https://patrick.cloke.us/posts/2010/12/08/why-rewrite-irc-into-javascript/"&gt;previous post&lt;/a&gt; I had briefly gone over the “history of &lt;span class="caps"&gt;IRC&lt;/span&gt;” as
I know it.  I’m going to expand on this a bit as I’ve come to understand
it a bit more while reading through documentation.  (Hopefully it won’t
sound too much like a rant …&lt;/p&gt;</summary><content type="html">
&lt;p&gt;In a &lt;a class="reference external" href="https://patrick.cloke.us/posts/2010/12/08/why-rewrite-irc-into-javascript/"&gt;previous post&lt;/a&gt; I had briefly gone over the “history of &lt;span class="caps"&gt;IRC&lt;/span&gt;” as
I know it.  I’m going to expand on this a bit as I’ve come to understand
it a bit more while reading through documentation.  (Hopefully it won’t
sound too much like a rant, as it is all driving me crazy!)&lt;/p&gt;
&lt;div class="section" id="irc-specifications"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id5"&gt;&lt;span class="caps"&gt;IRC&lt;/span&gt; Specifications&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So there’s the original specification (&lt;a class="reference external" href="http://tools.ietf.org/html/rfc1459"&gt;&lt;span class="caps"&gt;RFC&lt;/span&gt; 1459&lt;/a&gt;) in May 1993; this
was expanded and replaced by four different specifications (&lt;a class="reference external" href="http://tools.ietf.org/html/rfc2810"&gt;&lt;span class="caps"&gt;RFC&lt;/span&gt; 2810&lt;/a&gt;,
&lt;a class="reference external" href="http://tools.ietf.org/html/rfc2811"&gt;2811&lt;/a&gt;, &lt;a class="reference external" href="http://tools.ietf.org/html/rfc2812"&gt;2812&lt;/a&gt;, &lt;a class="reference external" href="http://tools.ietf.org/html/rfc2813"&gt;2813&lt;/a&gt;) in April 2000.  Seems pretty straightforward, right?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="dcc-ctcp"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id6"&gt;&lt;span class="caps"&gt;DCC&lt;/span&gt;/&lt;span class="caps"&gt;CTCP&lt;/span&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Well, kind of…there’s also the &lt;span class="caps"&gt;DCC&lt;/span&gt;/&lt;span class="caps"&gt;CTCP&lt;/span&gt; specifications, which is a
separate protocol embedded/hidden within the &lt;span class="caps"&gt;IRC&lt;/span&gt; protocol (e.g. they’re
sent as &lt;span class="caps"&gt;IRC&lt;/span&gt; messages and parsed specially by clients, the server sees
them as normal messages).  &lt;span class="caps"&gt;DCC&lt;/span&gt;/&lt;span class="caps"&gt;CTCP&lt;/span&gt; is used to send files as well as
other particular messages (&lt;span class="caps"&gt;ACTION&lt;/span&gt; commands for roleplaying, &lt;span class="caps"&gt;SED&lt;/span&gt; for
encrypting conversations, &lt;span class="caps"&gt;VERSION&lt;/span&gt; to get client information, etc.).
Anyway, this get’s a bit more complicated — it starts with the &lt;a class="reference external" href="http://www.irchelp.org/irchelp/rfc/dccspec.html"&gt;&lt;span class="caps"&gt;DCC&lt;/span&gt;
specification&lt;/a&gt;.  This was replaced/updated by the &lt;a class="reference external" href="http://www.irchelp.org/irchelp/rfc/ctcpspec.html"&gt;&lt;span class="caps"&gt;CTCP&lt;/span&gt; specification&lt;/a&gt;
(which fully includes the &lt;span class="caps"&gt;DCC&lt;/span&gt; specification) in 1994.  An &lt;a class="reference external" href="https://web.archive.org/web/20101129023108/http://www.invlogic.com/irc/ctcp.html"&gt;“updated”
&lt;span class="caps"&gt;CTCP&lt;/span&gt; specification&lt;/a&gt; was released in February 1997.  There’s also a
&lt;a class="reference external" href="https://web.archive.org/web/20080723170128/http://www.invlogic.com/irc/ctcp2_intro.html"&gt;&lt;span class="caps"&gt;CTCP&lt;/span&gt;/2 specification&lt;/a&gt; from October 1998, which was meant to
reformulate a lot of the previous three versions.  And &lt;em&gt;finally&lt;/em&gt;,
there’s the &lt;span class="caps"&gt;DCC2&lt;/span&gt; specification (two parts: &lt;a class="reference external" href="http://tools.ietf.org/html/draft-smith-irc-dcc2-negotiation-00"&gt;connection negotiation&lt;/a&gt; and
&lt;a class="reference external" href="http://www.dcc2.org/files/dcc2/draft-smith-irc-dcc2-files-00.txt"&gt;file transfers&lt;/a&gt;) from April 2004.&lt;/p&gt;
&lt;p&gt;But wait!  I lied…that’s not really the end of &lt;span class="caps"&gt;DCC&lt;/span&gt;/&lt;span class="caps"&gt;CTCP&lt;/span&gt;, there’s
also a bunch of extensions to it: &lt;a class="reference external" href="http://www.visualirc.net/tech-tdcc.php"&gt;Turbo &lt;span class="caps"&gt;DCC&lt;/span&gt;&lt;/a&gt;, &lt;a class="reference external" href="http://xa.bi/files/irc/xdcc.3.3.0b.irc"&gt;&lt;span class="caps"&gt;XDCC&lt;/span&gt; (eXtended &lt;span class="caps"&gt;DCC&lt;/span&gt;)&lt;/a&gt;
in 1993, &lt;a class="reference external" href="http://www.visualirc.net/tech-wboard.php"&gt;&lt;span class="caps"&gt;DCC&lt;/span&gt; Whiteboard&lt;/a&gt;, and a few other variations of this: &lt;span class="caps"&gt;RDCC&lt;/span&gt;
(Reverse &lt;span class="caps"&gt;DCC&lt;/span&gt;), &lt;span class="caps"&gt;SDD&lt;/span&gt; (Secure &lt;span class="caps"&gt;DCC&lt;/span&gt;), &lt;span class="caps"&gt;DCC&lt;/span&gt; Voice, etc.  Wikipedia has a &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Direct_Client-to-Client"&gt;good
summary&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Something else to note about the whole &lt;span class="caps"&gt;DCC&lt;/span&gt;/&lt;span class="caps"&gt;CTCP&lt;/span&gt; mess…parts of it
just &lt;em&gt;don’t&lt;/em&gt; have any documentation.  There’s &lt;em&gt;none&lt;/em&gt;at all for &lt;span class="caps"&gt;SED&lt;/span&gt; (at
least that I’ve found, I’d love to be proved wrong) and very little
(really just a mention) for &lt;span class="caps"&gt;DCC&lt;/span&gt; Voice.&lt;/p&gt;
&lt;p&gt;So, we’re about halfway through now.  There’s a bunch of extensions to
the &lt;span class="caps"&gt;IRC&lt;/span&gt; protocol specifications that add new commands to the actual protocol.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="authentication"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id7"&gt;Authentication&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Originally &lt;span class="caps"&gt;IRC&lt;/span&gt; had no authentication ability except the &lt;span class="caps"&gt;PASS&lt;/span&gt; command,
which very few servers seem to use, a variety of mechanisms have
replaced this, including &lt;a class="reference external" href="https://raw.githubusercontent.com/atheme/charybdis/master/doc/sasl.txt"&gt;&lt;span class="caps"&gt;SASL&lt;/span&gt; authentication&lt;/a&gt; (both &lt;span class="caps"&gt;PLAIN&lt;/span&gt; and &lt;span class="caps"&gt;BLOWFISH&lt;/span&gt;
methods, although &lt;span class="caps"&gt;BLOWFISH&lt;/span&gt; isn’t documented); and &lt;span class="caps"&gt;SASL&lt;/span&gt; itself is covered
by at least &lt;a class="reference external" href="http://tools.ietf.org/html/rfc2222"&gt;four&lt;/a&gt; &lt;a class="reference external" href="http://tools.ietf.org/html/rfc4422"&gt;RFCs&lt;/a&gt; &lt;a class="reference external" href="http://tools.ietf.org/html/rfc2595"&gt;in this&lt;/a&gt; &lt;a class="reference external" href="http://tools.ietf.org/html/rfc4616"&gt;situation&lt;/a&gt;.  There also seems
to be a method called “Auth” which I haven’t been able to pin down, as
well as Ident (which is a more general protocol authentication method I
haven’t looked into yet).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="extension-support"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id8"&gt;Extension Support&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This includes a few that generally add a way by which servers are able
to tell their clients exactly what a server supports.  The first of
these was RPL_ISUPPORT, which was defined as a &lt;a class="reference external" href="http://tools.ietf.org/html/draft-brocklesby-irc-isupport-03"&gt;draft specification&lt;/a&gt;
in January 2004, and &lt;a class="reference external" href="http://tools.ietf.org/html/draft-hardy-irc-isupport-00"&gt;updated&lt;/a&gt; in January of 2005.&lt;/p&gt;
&lt;p&gt;A similar concept was defined as &lt;a class="reference external" href="http://tools.ietf.org/html/draft-mitchell-irc-capabilities-01"&gt;&lt;span class="caps"&gt;IRC&lt;/span&gt; Capabilities&lt;/a&gt; in March 2005.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="protocol-extensions"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id9"&gt;Protocol Extensions&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span class="caps"&gt;IRCX&lt;/span&gt;, a Microsoft extension to &lt;span class="caps"&gt;IRC&lt;/span&gt; used (at one point) for some of
it’s instant messaging products &lt;a class="reference external" href="http://tools.ietf.org/html/draft-pfenning-irc-extensions-04"&gt;exists as a draft&lt;/a&gt; from June 1998.&lt;/p&gt;
&lt;p&gt;There’s also:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The &lt;a class="reference external" href="https://github.com/atheme/charybdis/raw/master/doc/monitor.txt"&gt;&lt;span class="caps"&gt;MONITOR&lt;/span&gt;&lt;/a&gt; command.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://raw.githubusercontent.com/atheme/charybdis/master/doc/modeg.txt"&gt;User mode +g&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://raw.githubusercontent.com/atheme/charybdis/master/doc/services.txt"&gt;Services compatibility modes&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://raw.githubusercontent.com/atheme/charybdis/master/doc/account-notify.txt"&gt;Account-notify client capability&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://raw.githubusercontent.com/atheme/charybdis/master/doc/tgchange.txt"&gt;Target change for messages&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="services"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id10"&gt;Services&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To fill in some of the missing features of &lt;span class="caps"&gt;IRC&lt;/span&gt;, services were created
(Wikipedia has a good &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Internet_Relay_Chat_services"&gt;summary&lt;/a&gt; again).  This commonly includes
ChanServ, NickServ, OperServ, and MemoServ.  Not too hard, but different
server packages include different services (or even the same services
that behave differently), one of more common ones is &lt;a class="reference external" href="http://www.anope.org/docgen/1.8/en_us/"&gt;Anope&lt;/a&gt;, however
(plus they have awesome documentation, so they get a link).&lt;/p&gt;
&lt;p&gt;There was an attempt to standardize how to interact with services
called &lt;span class="caps"&gt;IRC&lt;/span&gt;+, which included three specifications: &lt;a class="reference external" href="http://www.irc-plus.org/specs/confctrl-draft.html"&gt;conference control
protocol&lt;/a&gt;, &lt;a class="reference external" href="http://www.irc-plus.org/specs/identity-draft.html"&gt;identity protocol&lt;/a&gt; and &lt;a class="reference external" href="http://www.irc-plus.org/specs/subscriptions-draft.html"&gt;subscriptions protocol&lt;/a&gt;.  I don’t
believe this are supported widely (if at all).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="irc-url-scheme"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id11"&gt;&lt;span class="caps"&gt;IRC&lt;/span&gt; &lt;span class="caps"&gt;URL&lt;/span&gt; Scheme&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Finally this brings us to the &lt;span class="caps"&gt;IRC&lt;/span&gt; &lt;span class="caps"&gt;URL&lt;/span&gt; scheme of which there are a few
versions.  A draft from August 1996 defines the original &lt;a class="reference external" href="http://tools.ietf.org/html/draft-mirashi-url-irc-01"&gt;irc: &lt;span class="caps"&gt;URL&lt;/span&gt;
scheme&lt;/a&gt;.  This was updated/replaced by &lt;a class="reference external" href="http://tools.ietf.org/html/draft-butcher-irc-url-04"&gt;another draft&lt;/a&gt; which defines
irc: and ircs: &lt;span class="caps"&gt;URL&lt;/span&gt; schemes.&lt;/p&gt;
&lt;p&gt;As of right now that’s all that I’ve found…an awful lot.  Plus it’s
not all compatible with each other (and sometimes out right contradicts
each other).  Often newer specifications say not to support older
specifications, but who knows what servers/clients you’ll end up talking
to!  It’s difficult to know what’s used in practice, especially since
there’s an awful lot of &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Comparison_of_IRC_daemons"&gt;&lt;span class="caps"&gt;IRC&lt;/span&gt; servers&lt;/a&gt; out there.  Anyway, if someone
does know of another specification, etc. that I missed please let me know!&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;Updated [2014-12-20]&lt;/dt&gt;
&lt;dd&gt;Fixed some dead links. Unfortunately some links now point to the &lt;a class="reference external" href="https://archive.org/web/"&gt;Wayback
Machine&lt;/a&gt;. There are also copies of most, if not all, of these links in my
&lt;a class="reference external" href="https://bitbucket.org/clokep/irc-docs"&gt;irc-docs repository&lt;/a&gt;. Thanks Ultra Rocks for the heads up!&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
</content><category term="Instantbird"></category><category term="IRC"></category><category term="programming"></category><category term="specifications"></category></entry><entry><title>Status Update - February 17, 2011</title><link href="https://patrick.cloke.us/posts/2011/02/17/status-update-february-17-2011/" rel="alternate"></link><published>2011-02-17T19:21:00-05:00</published><updated>2011-02-17T19:21:00-05:00</updated><author><name>Patrick Cloke</name></author><id>tag:patrick.cloke.us,2011-02-17:/posts/2011/02/17/status-update-february-17-2011/</id><summary type="html">&lt;p&gt;Another month has gone by so it&amp;#8217;s time for another status update.
Unfortunately not as much got done this month as I was hoping, but
here&amp;#8217;s a quick update of what I&amp;#8217;ve worked&amp;nbsp;on:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=690"&gt;Bug 690&lt;/a&gt; - jsProtoHelper could help registering&amp;nbsp;commands&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=661"&gt;Bug 661&lt;/a&gt; - JavaScript accounts do not …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Another month has gone by so it&amp;#8217;s time for another status update.
Unfortunately not as much got done this month as I was hoping, but
here&amp;#8217;s a quick update of what I&amp;#8217;ve worked&amp;nbsp;on:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=690"&gt;Bug 690&lt;/a&gt; - jsProtoHelper could help registering&amp;nbsp;commands&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=661"&gt;Bug 661&lt;/a&gt; - JavaScript accounts do not automatically set
containsNick field on&amp;nbsp;messages&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=686"&gt;Bug 686&lt;/a&gt; - Implement default chat name for
getChatRoomDefaultFieldValues for&amp;nbsp;js-proto&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Florian also implemented a few things that are really helpful for
JavaScript&amp;nbsp;protocols:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=649"&gt;Bug 649&lt;/a&gt; - purple proxies should not be in the way of JavaScript&amp;nbsp;protocols&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=118"&gt;Bug 118&lt;/a&gt; - Extensions should be able to register&amp;nbsp;commands.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In addition, Twitter support was added to nightly builds as a
JavaScript protocol (&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=598"&gt;bug 598&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Hopefully next I&amp;#8217;ll implement most of the commands for &lt;span class="caps"&gt;IRC&lt;/span&gt; (within the
next week) at which point I&amp;#8217;ll release a sample extension (which will
overwrite the libpurple &lt;span class="caps"&gt;IRC&lt;/span&gt; implementation), allowing people to test
without needing to make a new account,&amp;nbsp;etc.&lt;/p&gt;
</content><category term="Instantbird"></category><category term="IRC"></category><category term="programming"></category></entry><entry><title>Status Update - January 18, 2011</title><link href="https://patrick.cloke.us/posts/2011/01/18/status-update-january-18-2011/" rel="alternate"></link><published>2011-01-18T23:17:00-05:00</published><updated>2011-01-18T23:17:00-05:00</updated><author><name>Patrick Cloke</name></author><id>tag:patrick.cloke.us,2011-01-18:/posts/2011/01/18/status-update-january-18-2011/</id><summary type="html">&lt;p&gt;I haven&amp;#8217;t had an update in a few weeks (since early December)
actually, so I thought I would post a bit about what I&amp;#8217;ve worked on.
I&amp;#8217;ve fixed a bunch of bugs in the backend of Instantbird that allow work
on JavaScript &lt;span class="caps"&gt;IRC&lt;/span&gt; protocol to&amp;nbsp;continue:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=519"&gt;Bug …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;I haven&amp;#8217;t had an update in a few weeks (since early December)
actually, so I thought I would post a bit about what I&amp;#8217;ve worked on.
I&amp;#8217;ve fixed a bunch of bugs in the backend of Instantbird that allow work
on JavaScript &lt;span class="caps"&gt;IRC&lt;/span&gt; protocol to&amp;nbsp;continue:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=519"&gt;Bug 519&lt;/a&gt; - Extend jsProtoHelper to implement purpleIConvChat
(&lt;a class="reference external" href="http://hg.instantbird.org/instantbird/rev/0166084ce2ae"&gt;check-in&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=495"&gt;Bug 495&lt;/a&gt; - purpleIAccount cannot access preferences via JavaScript
protocol (&lt;a class="reference external" href="http://hg.instantbird.org/instantbird/rev/a188a5cc3ff1"&gt;check-in&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=648"&gt;Bug 648&lt;/a&gt; -Provide a default &lt;span class="caps"&gt;JS&lt;/span&gt; implementation of
purpleIChatRoomField
(&lt;a class="reference external" href="http://hg.instantbird.org/instantbird/rev/61fc80a569d3"&gt;check-in&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;[Reviewed] &lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=647"&gt;Bug 647&lt;/a&gt; - Username split for JavaScript protocols
(&lt;a class="reference external" href="http://hg.instantbird.org/instantbird/rev/a6c8fbf77e10"&gt;check-in&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;[Reviewed] &amp;lt;no bug&amp;gt; -Share the nsIClassInfo implementation between
all the objects implemented in jsProtoHelper
(&lt;a class="reference external" href="http://hg.instantbird.org/instantbird/rev/035f7d8d7f78"&gt;check-in&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Also a few other random bugs I&amp;#8217;ve worked&amp;nbsp;on:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=625"&gt;Bug 625&lt;/a&gt; - Findbar broken on Windows in Conversation window
(&lt;a class="reference external" href="http://hg.instantbird.org/instantbird/rev/2e8af77af2f2"&gt;check-in&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=629"&gt;Bug 629&lt;/a&gt; - Remove workaround for bug 503048
(&lt;a class="reference external" href="http://hg.instantbird.org/instantbird/rev/ba4b9401791b"&gt;check-in&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=473"&gt;Bug 473&lt;/a&gt; - &lt;span class="caps"&gt;JS&lt;/span&gt; Logger line breaks don&amp;#8217;t play well on Windows
&lt;a class="reference external" href="http://hg.instantbird.org/instantbird/rev/6a600b8a32c9"&gt;(check-in&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=593"&gt;Bug 593&lt;/a&gt; - JavaScript component does not have a method named:
&amp;#8220;onBeforeLinkTraversal&amp;#8221;
(&lt;a class="reference external" href="http://hg.instantbird.org/instantbird/rev/1b75f9fa4859"&gt;check-in&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Although none of these are really things that weren&amp;#8217;t working a few
weeks ago, there are now real APIs for these for JavaScript protocols,
allowing other protocols to use them and to &lt;em&gt;&lt;span class="caps"&gt;FULLY&lt;/span&gt;&lt;/em&gt; implement them
instead of hard coding values.&amp;nbsp; In addition, a lot of the purplexpcom
layer is now hidden from JavaScript&amp;nbsp;protocols.&lt;/p&gt;
&lt;p&gt;There&amp;#8217;s a few things left to do for the JavaScript protocol&amp;nbsp;layer:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=118"&gt;Bug 118&lt;/a&gt; - Extensions should be able to register&amp;nbsp;commands.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=650"&gt;Bug 650&lt;/a&gt; - JavaScript accounts must be notified of status changes
(a sketchy patch that exists that will work, but a better patch to
core should be&amp;nbsp;done)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=623"&gt;Bug 623&lt;/a&gt; - Auto-Join option field is hard coded for certain
protocols (not &lt;em&gt;really&lt;/em&gt; necessary, since it&amp;#8217;s still &lt;span class="caps"&gt;IRC&lt;/span&gt;, but it
should be&amp;nbsp;fixed)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=649"&gt;Bug 649&lt;/a&gt; - Proxy should be available to JavaScript protocols
(hopefully being handled by&amp;nbsp;Florian)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A good summary of this is &lt;a class="reference external" href="https://bugzilla.instantbird.org/showdependencygraph.cgi?id=507&amp;amp;display=web&amp;amp;rankdir=LR"&gt;the dependency graph of bug 507&lt;/a&gt;
(Implement &lt;span class="caps"&gt;IRC&lt;/span&gt; in JavaScript).&amp;nbsp; Note that the &lt;span class="caps"&gt;IRC&lt;/span&gt; JavaScript work blocks
&lt;em&gt;a&amp;nbsp; lot&lt;/em&gt; of &lt;span class="caps"&gt;UI&lt;/span&gt; work done for &lt;span class="caps"&gt;IRC&lt;/span&gt;.&amp;nbsp; In particular Mook has been working
on implementing notifications (i.e. Invites, and perhaps a few other
commands), see &lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=628"&gt;Bug 628&lt;/a&gt;.&amp;nbsp; For other bugs, see the link above &amp;#8212; and if
there&amp;#8217;s a strange &lt;span class="caps"&gt;UI&lt;/span&gt; feature that you think should be added, please file
a bug and let us know about&amp;nbsp;it!&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve also worked a bit on sending outgoing text with rich formatting
(bold, italics, underline, text size, etc.), this work is being tracked
in &lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=634"&gt;Bug 634&lt;/a&gt;. There&amp;#8217;s a proof on concept, but a lot of work needs to be
done for it, but it&amp;#8217;s sort of working right&amp;nbsp;now.&lt;/p&gt;
&lt;p&gt;As I alluded to in my last blog post, the JavaScript protocols would
be used to implement Twitter. Work for this is occurring in &lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=598"&gt;Bug 598&lt;/a&gt;,
where Florian has implemented (very) basic Twitter&amp;nbsp;support.&lt;/p&gt;
&lt;p&gt;My plans for the next&amp;nbsp;bit:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;I&amp;#8217;m hoping to finish up some of the work blocking JavaScript
protocols so &lt;span class="caps"&gt;IRC&lt;/span&gt; can be put into a state that needs alpha/beta
testers (if you&amp;#8217;re interested in testing/hacking please drop me a
line here, on &lt;span class="caps"&gt;IRC&lt;/span&gt; or via&amp;nbsp;email).&lt;/li&gt;
&lt;li&gt;Move into my new&amp;nbsp;apartment&lt;/li&gt;
&lt;li&gt;Start my new&amp;nbsp;job&lt;/li&gt;
&lt;li&gt;Work on richtext messages a bit&amp;nbsp;more&lt;/li&gt;
&lt;/ul&gt;
</content><category term="Instantbird"></category><category term="IRC"></category><category term="Mozilla"></category><category term="programming"></category></entry><entry><title>Why Rewrite IRC into JavaScript? (vs. libpurple’s vs. ChatZilla’s)</title><link href="https://patrick.cloke.us/posts/2010/12/08/why-rewrite-irc-into-javascript/" rel="alternate"></link><published>2010-12-08T14:29:00-05:00</published><updated>2010-12-08T14:29:00-05:00</updated><author><name>Patrick Cloke</name></author><id>tag:patrick.cloke.us,2010-12-08:/posts/2010/12/08/why-rewrite-irc-into-javascript/</id><summary type="html">
&lt;p&gt;I had a request on &lt;span class="caps"&gt;IRC&lt;/span&gt; (from Mic) to write an in-depth blog post
about &lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=507"&gt;&lt;span class="caps"&gt;IRC&lt;/span&gt; in JavaScript&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
“Maybe we could ask clokep if he’d like to write something about
js-irc? Why it is done, what the advantages are once it’s done, how
he is working on it …&lt;/blockquote&gt;</summary><content type="html">
&lt;p&gt;I had a request on &lt;span class="caps"&gt;IRC&lt;/span&gt; (from Mic) to write an in-depth blog post
about &lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=507"&gt;&lt;span class="caps"&gt;IRC&lt;/span&gt; in JavaScript&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
“Maybe we could ask clokep if he’d like to write something about
js-irc? Why it is done, what the advantages are once it’s done, how
he is working on it (going through the specs), putting the
jsProtocol code to test and adding missing pieces?” — &lt;a class="reference external" href="http://log.bezut.info/instantbird/101208/#m54"&gt;Mic&lt;/a&gt;&lt;/blockquote&gt;
&lt;div class="section" id="wait-a-second-what-is-irc"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;Wait a second, what is &lt;span class="caps"&gt;IRC&lt;/span&gt;?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I guess this is a good first question, I’ll steal from &lt;a class="reference external" href="http://en.wikipedia.org/wiki/IRC"&gt;Wikipedia&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
Internet Relay Chat (&lt;span class="caps"&gt;IRC&lt;/span&gt;) is a form of real-time […] chat […] It
is mainly designed for group communication […] but also allows
[…for…] private message as well as chat and data transfers.&lt;/blockquote&gt;
&lt;p&gt;Awesome, what’s that really mean?  It’s an instant messaging protocol
with an actual specification (i.e. it’s not owned by some large, unnamed
company), with open-source libraries for clients and servers.  It’s
usually used by more computer-oriented types of people and centers
around group conversation.  Personally most of what I use it for is
open-source software I use (I’m almost always in &lt;a class="reference external" href="irc://irc.mozilla.org/#instantbird"&gt;#instantbird&lt;/a&gt;,
&lt;a class="reference external" href="irc://irc.mozilla.org/#maildev"&gt;#maildev&lt;/a&gt;, and &lt;a class="reference external" href="irc://irc.mozilla.org/#songbird"&gt;#songbird&lt;/a&gt; on &lt;a class="reference external" href="http://irc.mozilla.org/"&gt;Mozilla’s &lt;span class="caps"&gt;IRC&lt;/span&gt; servers&lt;/a&gt;.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="why-it-is-done-what-advantages-are-there-once-this-is-done"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4"&gt;Why it is done?  What advantages are there once this is done?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I touched upon this a little in my &lt;a class="reference external" href="https://patrick.cloke.us/posts/2010/12/04/javascript-irc-in-instantbird/"&gt;last post&lt;/a&gt;.  In terms of
Instantbird: there’s an idea of switching some / all of the protocols
(eventually) to be JavaScript protocols instead of the libpurple
versions (libpurple is written mostly in C and is cross-platform, but
recent gains in speed in JavaScript allow this advantage of libpurple to
not matter as much).  This would unfortunately mean we need to maintain
a lot more code, but it would allow us to integrate protocols in any way
that we see fit, instead of only using APIs / methods provided by
libpurple.  Hopefully this would allow us to &lt;a class="reference external" href="https://bugzilla.instantbird.org/showdependencytree.cgi?id=507&amp;amp;maxdepth=2&amp;amp;hide_resolved=1"&gt;enhance our &lt;span class="caps"&gt;IRC&lt;/span&gt;
implementation&lt;/a&gt; a bit.&lt;/p&gt;
&lt;p&gt;Also, Instantbird (nightlies) currently have limited support for
generating a protocol plug-in in JavaScript.  A couple of “test”
protocols have be done, but nothing in “real” (in particular, none that
used a multi-user chat).  This would allow us to iron out &lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=519"&gt;some&lt;/a&gt;
&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=118"&gt;bugs&lt;/a&gt; in the implementation of JavaScript protocols.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;[Edit: Florian suggested another question that wasn’t originally
covered, which some people more familiar with Mozilla code might be wondering.]&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="why-aren-t-you-using-the-code-from-chatzilla"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id5"&gt;Why aren’t you using the code from ChatZilla?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This was a tough one.  Honestly when I first wanted a parsing
algorithm, I looked at the ChatZilla code, I used it.  Then rewrote it
in a fourth as many lines (&lt;a class="reference external" href="http://hg.mozilla.org/chatzilla/file/tip/js/lib/irc.js#l1250"&gt;93&lt;/a&gt; vs. &lt;a class="reference external" href="https://hg.instantbird.org/experiments/file/IRC-JavaScript/components/ircProtocol.js#l208"&gt;20&lt;/a&gt;).  Simply said, the code in
ChatZilla is &lt;em&gt;old&lt;/em&gt;, it doesn’t use many of the features available only
in newer versions of JavaScript.  To that point, the ChatZilla code
hasn’t been updated in over a year!  The last check-in was: 2009-10-03,
below is a &lt;a class="reference external" href="http://hg.mozilla.org/chatzilla/log/tip/js/lib/irc.js"&gt;quick summary&lt;/a&gt; of the number of check-ins per year:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;2010: 0&lt;/li&gt;
&lt;li&gt;2009: 5&lt;/li&gt;
&lt;li&gt;2008: 15&lt;/li&gt;
&lt;li&gt;2007: 11&lt;/li&gt;
&lt;li&gt;2006: 18&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There’s been a pretty steady decline in check-ins.  I could take this
code and attempt to whip it into shape and make huge sweeping changes
and commit them back to ChatZilla, but honestly it was easier to start
over for me.  Regardless of ease, I’m not sure it would work any:
especially since the ChatZilla code seems overly complicated and overly
specific (since it wasn’t really built as a library as far as I can
see), especially since all the code is meant to deal only with &lt;span class="caps"&gt;IRC&lt;/span&gt;.  The
Instantbird code needs to be protocol agnostic to a degree, while is why
it interfaces to purplexpcom.&lt;/p&gt;
&lt;p&gt;A quick example of this is: ChatZilla uses a CIRCUser object, but for
Instantbird I need to create either an imIContact or a
purpleIAccountBuddy (depending on the situation).  It’s possible that’s
can be abstracted and code shared — but I’m not sure it would be worth
the effort.  After all this, I should probably look more into the
ChatZilla code, perhaps more of it could be used.&lt;/p&gt;
&lt;p&gt;(If someone familiar with the ChatZilla code base — I don’t know
who/if there’s a maintainer — is interested in talking with me, please
get in contact here or on #instantbird.  It’s possible we could align
some of what I’ve been working on, but I’m not sure how much could be
shared besides the parsing algorithm).&lt;/p&gt;
&lt;p&gt;&lt;em&gt;[End edit]&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-are-the-specific-advantages-for-an-end-user"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id6"&gt;What are the specific advantages for an end-user?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In terms of the &lt;span class="caps"&gt;IRC&lt;/span&gt; protocol itself, there shouldn’t be any, my goal
is for it to be a drop in replacement for the libpurple implementation
with automatic account migration, etc. For end-users we can hopefully
solve &lt;a class="reference external" href="https://bugzilla.instantbird.org/showdependencytree.cgi?id=574&amp;amp;maxdepth=1&amp;amp;hide_resolved=1"&gt;a few annoying &lt;span class="caps"&gt;IRC&lt;/span&gt; &lt;span class="caps"&gt;UI&lt;/span&gt; issues&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-about-for-developers-anything-cool-there"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id7"&gt;What about for developers?  Anything cool there?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Well, I’m hoping to be able to test this replacement via an extension
that replaces the libpurple &lt;span class="caps"&gt;IRC&lt;/span&gt; to dogfood it before eventual inclusion
in Instantbird.  I’m not sure if that counts as “cool.” though.  If
nothing else there will be an example of how to write a protocol in
JavaScript (using sockets).  So hopefully other people can make some
other cool protocols off of that example.  You might wonder what else we
have planned for JavaScript protocols; there are plans to make at least
a Twitter protocol.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-is-this-being-done"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id8"&gt;How is this being done?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Well I said up above &lt;span class="caps"&gt;IRC&lt;/span&gt; has a specification, right?  Well, yes.
There’s the &lt;a class="reference external" href="http://tools.ietf.org/html/rfc1459"&gt;original specification&lt;/a&gt;, this was superseded by &lt;a class="reference external" href="http://tools.ietf.org/html/rfc2810"&gt;four&lt;/a&gt;
&lt;a class="reference external" href="http://tools.ietf.org/html/rfc2811"&gt;different&lt;/a&gt; &lt;a class="reference external" href="http://tools.ietf.org/html/rfc2812"&gt;specification&lt;/a&gt; &lt;a class="reference external" href="http://tools.ietf.org/html/rfc2813"&gt;documents&lt;/a&gt;.  Of which we only really
care about one: &lt;a class="reference external" href="http://tools.ietf.org/html/rfc2812"&gt;the client protocol&lt;/a&gt;.  So we have this updated
specification (try reading it, it’s rather painful), which is good.
It’s relatively straightforward set of commands and responses/errors.
It’s a bit more confusing than that though since there are a couple of
extensions, etc.  This is summarized below:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;span class="strike"&gt;&lt;span class="caps"&gt;RFC&lt;/span&gt; 1459&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;Extended with &lt;a class="reference external" href="http://www.irchelp.org/irchelp/rfc/dccspec.html"&gt;&lt;span class="strike"&gt;&lt;span class="caps"&gt;DCC&lt;/span&gt; specification (“direct client-to-client”)&lt;/span&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Replaced with &lt;a class="reference external" href="http://www.irchelp.org/irchelp/rfc/dccspec.html"&gt;&lt;span class="strike"&gt;&lt;span class="caps"&gt;CTCP&lt;/span&gt; (“client-to-client protocol”)&lt;/span&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.invlogic.com/irc/ctcp.html"&gt;Draft for a formalized &lt;span class="caps"&gt;CTCP&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;(Apparently some people are working on a &lt;a class="reference external" href="http://www.dcc2.org/"&gt;&lt;span class="caps"&gt;DCC2&lt;/span&gt;&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Officially replaced with RFCs 2810, 2811, 2812, 2813&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A lot of this is being done by reading the specifications and finding
the proper responses, etc.  I’ve also used &lt;a class="reference external" href="http://www.wireshark.org/download.html"&gt;Wireshark&lt;/a&gt; a bit to see how
libpurple sends &lt;span class="caps"&gt;IRC&lt;/span&gt; commands (in particular, in what order it sends them
in).  A lot of my development is happening on live &lt;span class="caps"&gt;IRC&lt;/span&gt; servers, which
isn’t really best practice, but I’m mostly sending commands by hand to
see the responses since a bunch of non-standard responses and extensions
have developed beyond the above.  I have been using &lt;a class="reference external" href="http://ircd.bircd.org/"&gt;beware irc&lt;/a&gt; to run
a daemon on my own machine, however.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="so-how-far-along-are-you"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id9"&gt;So how far along are you?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I’ve started implementing &lt;span class="caps"&gt;RFC&lt;/span&gt; 2812 and have a variety of commands done
(the login sequence occurs automatically, the server connection is kept
alive, messages can be sent to a channel and are parsed when received, a
lot of the initial server information is displayed but unparsed).  But
there’s a lot more to do!  As my last post outlined, I recently was able
to successfully get a chat to work in Instantbird from a silly bug I had
been having.&lt;/p&gt;
&lt;p&gt;It’s rather slow going since I’ll start to implement something from
the &lt;span class="caps"&gt;IRC&lt;/span&gt; side, and then realize the &lt;a class="reference external" href="http://hg.instantbird.org/instantbird/file/tip/purple/purplexpcom/src/jsProtoHelper.jsm"&gt;Instantbird layer&lt;/a&gt; (the jsProtocol
module) is missing a component I need.  One of the major parts of
working on this is extending the Instantbird layer to contain the proper
functions and objects needed to implement chats via JavaScript.  This is
usually the slowest going part of my code, since it involves interfacing
with Instantbird / &lt;a class="reference external" href="http://hg.instantbird.org/instantbird/file/tip/purple/purplexpcom/public/"&gt;purplexpcom&lt;/a&gt;.  Luckily Florian, the main developer
of Instantbird, has been a big help with this (as have other
participants of #instantbird — in particular I know Mic helped track
down a few syntax type bugs).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-s-next"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id10"&gt;What’s next?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Now that have the basics of chat working, I need to start handling the
&lt;span class="caps"&gt;QUIT&lt;/span&gt;, &lt;span class="caps"&gt;PART&lt;/span&gt; and &lt;span class="caps"&gt;JOIN&lt;/span&gt; commands for when other users enter &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; leave chat
rooms.  Once these are complete it should be quite usable, although the
entire preference system still doesn’t exist, including notifying the &lt;span class="caps"&gt;UI&lt;/span&gt;
of what options are available.  In addition, I need to look into doing
&lt;span class="caps"&gt;SSL&lt;/span&gt; sockets.&lt;/p&gt;
&lt;p&gt;Once the protocol plug-in is done, we plan to abstract sections of it
that will be useful for other protocols (in particular the socket
connection aspects).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="where-can-i-see-this-stuff"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id11"&gt;Where can I see this stuff…?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;My work is kept in the “&lt;a class="reference external" href="https://hg.instantbird.org/experiments/file/IRC-JavaScript/"&gt;experiments&lt;/a&gt;” repository on Instantbird’s
&lt;a class="reference external" href="http://mercurial.selenic.com/"&gt;Mercurial&lt;/a&gt; repository.  There’s also a variety of bugs open (they’re
listed above, I’m not going to re-list them), although not a ton is
happening in them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-can-i-help"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id12"&gt;How can I help?!&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Well you can of course feel free to download the code and hack on it,
let me know (via &lt;span class="caps"&gt;IRC&lt;/span&gt; or any of the bugs most likely) if you have a patch
you’d like me to apply.  Or if you just found something that doesn’t
work you can feel free to let me know, although I probably just haven’t
gotten around to fixing it yet.&lt;/p&gt;
&lt;p&gt;Also, if you’ve ever found something annoying / broken in the &lt;span class="caps"&gt;IRC&lt;/span&gt;
implementation in Instantbird / libpurple please let us know (through
any of the above contact sources).&lt;/p&gt;
&lt;p&gt;Hopefully that’s a bit of a better explanation of why we’re spending
time to rewrite the &lt;span class="caps"&gt;IRC&lt;/span&gt; protocol implementation into JavaScript — we
definitely think it’s worth it and can lead to a bunch of new unique
protocol plug-ins for Instantbird.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Instantbird"></category><category term="IRC"></category><category term="Mozilla"></category><category term="programming"></category></entry><entry><title>JavaScript IRC in Instantbird</title><link href="https://patrick.cloke.us/posts/2010/12/04/javascript-irc-in-instantbird/" rel="alternate"></link><published>2010-12-04T17:24:00-05:00</published><updated>2010-12-04T17:24:00-05:00</updated><author><name>Patrick Cloke</name></author><id>tag:patrick.cloke.us,2010-12-04:/posts/2010/12/04/javascript-irc-in-instantbird/</id><summary type="html">&lt;p&gt;I&amp;#8217;ve been working on rewriting the &lt;span class="caps"&gt;IRC&lt;/span&gt; plugin for &lt;a class="reference external" href="http://www.instantbird.com/"&gt;Instantbird&lt;/a&gt; since
the summer (sometime in August, I can&amp;#8217;t seem to find the exact date &amp;#8212;
at least since Sept. 10th&amp;nbsp;though).&lt;/p&gt;
&lt;p&gt;Since &lt;a class="reference external" href="http://developer.pidgin.im/wiki/WhatIsLibpurple"&gt;libpurple&lt;/a&gt; (used in Pidgin, Adium, etc.) provides the &lt;span class="caps"&gt;IRC&lt;/span&gt;
protocol that we currently use, why do this …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I&amp;#8217;ve been working on rewriting the &lt;span class="caps"&gt;IRC&lt;/span&gt; plugin for &lt;a class="reference external" href="http://www.instantbird.com/"&gt;Instantbird&lt;/a&gt; since
the summer (sometime in August, I can&amp;#8217;t seem to find the exact date &amp;#8212;
at least since Sept. 10th&amp;nbsp;though).&lt;/p&gt;
&lt;p&gt;Since &lt;a class="reference external" href="http://developer.pidgin.im/wiki/WhatIsLibpurple"&gt;libpurple&lt;/a&gt; (used in Pidgin, Adium, etc.) provides the &lt;span class="caps"&gt;IRC&lt;/span&gt;
protocol that we currently use, why do this?&amp;nbsp; One reason is to iron out
(and find) some of the bugs left in implementing protocols in JavaScript
and part of it is so I can learn to code better.&amp;nbsp; Unfortunately during
this semester I was not able to get as much done as I had hoped and
almost everything that had been done was finished in&amp;nbsp;August/September&lt;/p&gt;
&lt;p&gt;Some big milestones I&amp;#8217;ve completed (with dates if I have&amp;nbsp;them):&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Connected to server via sockets in&amp;nbsp;JavaScript&lt;/li&gt;
&lt;li&gt;Generate a conversation that works as a raw connection to the server
(i.e. as if you had opened a telnet connection to the&amp;nbsp;server)&lt;/li&gt;
&lt;li&gt;Parsing messages and automatic ponging when the server&amp;nbsp;pings&lt;/li&gt;
&lt;li&gt;Joining a channel (2010/12/04, i.e.&amp;nbsp;today!)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There had been a bunch of small bugs I had been having in getting this
to work: one error, (which I found quickly) one of the other developers
(&lt;a class="reference external" href="http://queze.net/"&gt;Florian&lt;/a&gt;) was able to help me out with, was that I was not initiating
a &lt;strong&gt;new&lt;/strong&gt; object.&amp;nbsp; And after learning a bit above observers I was able
to get the &lt;span class="caps"&gt;UI&lt;/span&gt; to respond.&amp;nbsp; I even threw in support for op/half-op/voice
After today&amp;#8217;s work I was able to generate the following&amp;nbsp;screenshot:&lt;/p&gt;
&lt;blockquote class="text-center"&gt;
&lt;a class="reference external image-reference" href="https://patrick.cloke.us/images/IRCworking2.png"&gt;&lt;img alt="Example conversation using JavaScript IRC." class="center" src="https://patrick.cloke.us/images/IRCworking2.png" style="height: 297px;" /&gt;&lt;/a&gt;
&lt;p&gt;An initial example of Instantbird communicating using JavaScript &lt;span class="caps"&gt;IRC&lt;/span&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This build would be almost fully usable by those who do very little on
&lt;span class="caps"&gt;IRC&lt;/span&gt; (i.e. if you just want to go and chat, it&amp;#8217;d work well), but there&amp;#8217;s
a lot more work to be done.&amp;nbsp; The code can be viewed in the &lt;a class="reference external" href="https://hg.instantbird.org/experiments/file/IRC-JavaScript/"&gt;Experiments
repository&lt;/a&gt;.&amp;nbsp; (Check it out, there&amp;#8217;s a 600+ line switch&amp;nbsp;statement.)&lt;/p&gt;
</content><category term="Instantbird"></category><category term="IRC"></category><category term="Mozilla"></category><category term="programming"></category></entry></feed>