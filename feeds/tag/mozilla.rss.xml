<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Like bricks in the sky</title><link>http://patrick.cloke.us/</link><description></description><lastBuildDate>Fri, 20 May 2016 09:15:00 -0400</lastBuildDate><item><title>Google Summer of Code 2016 projects</title><link>http://patrick.cloke.us/posts/2016/05/20/google-summer-of-code-2016-projects/</link><description>&lt;p&gt;I&amp;#8217;d like to introduce the 13 students that are being mentored by Mozilla this
year as part of &lt;a class="reference external" href="https://summerofcode.withgoogle.com/"&gt;Google Summer of Code 2016&lt;/a&gt;! Currently the &amp;#8220;community bonding&amp;#8221;
period is ongoing, but we are on the cusp of the &amp;#8220;coding period&amp;#8221;&amp;nbsp;starting.&lt;/p&gt;
&lt;p&gt;As part of Google Summer of Code (GSoC), we ask students to provide weekly
updates of their progress in a public area (usually a blog). If you&amp;#8217;re
interested in a particular project, please follow along! Lastly, remember that
GSoC is a community effort: if a student is working in an area where you
consider yourself knowledgable, please introduce yourself and offer to provide
help and/or&amp;nbsp;advice!&lt;/p&gt;
&lt;p&gt;Below is a listing of each student&amp;#8217;s project (linked to their weekly updates),
the name of each student and the name of their&amp;nbsp;mentor(s).&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="61%" /&gt;
&lt;col width="15%" /&gt;
&lt;col width="24%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Project&lt;/th&gt;
&lt;th class="head"&gt;Student&lt;/th&gt;
&lt;th class="head"&gt;Mentor(s)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="http://krishnakannan.github.io/"&gt;Download app assets at runtime&lt;/a&gt; (Firefox for Android)&lt;/td&gt;
&lt;td&gt;Krish&lt;/td&gt;
&lt;td&gt;skaspari&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://github.com/izgzhen/gsoc-file-support"&gt;File &lt;span class="caps"&gt;API&lt;/span&gt; Support&lt;/a&gt; (Servo)&lt;/td&gt;
&lt;td&gt;izgzhen&lt;/td&gt;
&lt;td&gt;Manishearth&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="http://myveryownsummerofcode.blogspot.fr/"&gt;Implement &lt;span class="caps"&gt;RFC7512&lt;/span&gt; &lt;span class="caps"&gt;PKCS&lt;/span&gt;#11 &lt;span class="caps"&gt;URI&lt;/span&gt; support and system integration&lt;/a&gt; (&lt;span class="caps"&gt;NSS&lt;/span&gt;)&lt;/td&gt;
&lt;td&gt;varunnaganathan&lt;/td&gt;
&lt;td&gt;Bob Relyea, David Woodhoue&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="http://creativcoder.xyz/"&gt;Implementing Service Worker Infrastructure in Servo Browser Engine&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;creativcoder&lt;/td&gt;
&lt;td&gt;jdm&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://wiki.mozilla.org/User:Abdelrhman/gsoc16"&gt;Improving and expanding the JavaScript &lt;span class="caps"&gt;XMPP&lt;/span&gt; Implementation&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Abdelrhman Ahmed&lt;/td&gt;
&lt;td&gt;aleth, nhnt11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://blog.mozilla.org/calendar/tag/gsoc/"&gt;Mozilla Calendar – Event in a Tab&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;paulmorris&lt;/td&gt;
&lt;td&gt;Philipp Kewisch&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://drive.google.com/folderview?id=0Bzvo3C7XKc_wVzVQWG5xaHo0NTA"&gt;Mozilla Investigator (&lt;span class="caps"&gt;MIG&lt;/span&gt;): Auditd integration&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Arun&lt;/td&gt;
&lt;td&gt;kang&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="http://blog.varun-joshi.com/"&gt;Prevent Failures due to Update Races&lt;/a&gt; (Balrog)&lt;/td&gt;
&lt;td&gt;varunjoshi&lt;/td&gt;
&lt;td&gt;Ben Hearsum&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://mikelingblog.wordpress.com/"&gt;Proposal of Redesign &lt;span class="caps"&gt;SETA&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;MikeLing&lt;/td&gt;
&lt;td&gt;Joel Maher&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="http://martiansideofthemoon.github.io/archive.html"&gt;Schedule TaskCluster Jobs in Treeherder&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;martianwars&lt;/td&gt;
&lt;td&gt;armenzg&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://wiki.mozilla.org/User:Anindyapandey"&gt;Thunderbird - Implement mbox -&amp;gt; maildir converter&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Shiva&lt;/td&gt;
&lt;td&gt;mkmelin&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="http://graphpanovr.blogspot.fr/"&gt;Two Projects to Make A-Frame More Useful, Accessible, and Exciting&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;bryik&lt;/td&gt;
&lt;td&gt;Diego Marcos&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="http://baygeldin.name/gsoc-2016/"&gt;Web-based &lt;span class="caps"&gt;GDB&lt;/span&gt; Frontend&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;baygeldin&lt;/td&gt;
&lt;td&gt;jonasfj&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Patrick Cloke</dc:creator><pubDate>Fri, 20 May 2016 09:15:00 -0400</pubDate><guid isPermaLink="false">tag:patrick.cloke.us,2016-05-20:posts/2016/05/20/google-summer-of-code-2016-projects/</guid><category>community</category><category>GSoC</category><category>Mozilla</category></item><item><title>Thoughts on Appyling to Google Summer of Code</title><link>http://patrick.cloke.us/posts/2016/03/07/thoughts-on-applying-to-gsoc/</link><description>
&lt;!-- --&gt;
&lt;blockquote&gt;
&lt;p&gt;Over the past few years I’ve been involved in &lt;a class="reference external" href="https://developers.google.com/open-source/gsoc/"&gt;Google Summer of Code&lt;/a&gt;
(GSoC), a program that sponsors students to write code for open-source
projects, as part of Mozilla. I’ve been both a mentor and administrator,
&lt;a class="reference external" href="http://blog.queze.net/"&gt;Florian Quèze&lt;/a&gt; and I frequently get asked questions about what students
should do to apply to GSoC. This post aims to give some resources and
answers to those questions. (I should note that each open-source
organization is different and this is based on my experiences at Mozilla.
Your mileage may vary.)&lt;/p&gt;
&lt;p&gt;Remember that none of this is meant as a guarantee for acceptance, it is
just a few things that can help get you ready and improve your chances!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you haven’t heard yet, then Mozilla has been accepted into
&lt;a class="reference external" href="https://developers.google.com/open-source/gsoc/"&gt;Google Summer of Code&lt;/a&gt; (GSoC) 2016, this will be our 10th time participating
in GSoC mentoring Organizations. Overally, the best way to prepare yourself for
applying to GSoC is to get involved with the community you would like to work
with. Some particular resources to help you in applying to GSoC are:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Go read the &lt;a class="reference external" href="https://developers.google.com/open-source/gsoc/"&gt;Google Summer of Code&lt;/a&gt; website. Every part of it. Particular
pages to point out are the:&lt;ul&gt;
&lt;li&gt;&lt;a class="reference external" href="http://en.flossmanuals.net/GSoCStudentGuide/"&gt;Student Guide&lt;/a&gt;: Written by a variety of people in the GSoC community,
it covers topics from contacting an organization, to applying, to not
being accepted.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://developers.google.com/open-source/gsoc/faq"&gt;&lt;span class="caps"&gt;FAQ&lt;/span&gt;&lt;/a&gt;: If you still have questions after reading the above (or whenever
you have a question), check here for answers &lt;em&gt;before&lt;/em&gt; asking anyone. (In
particular this includes questions about how to apply.)&lt;/li&gt;
&lt;li&gt;The final important page to internalize is the &lt;a class="reference external" href="https://summerofcode.withgoogle.com/how-it-works/"&gt;schedule&lt;/a&gt;. It is a
student’s responsibility to meet each of the deadlines.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Mozilla has some good &lt;a class="reference external" href="https://wiki.mozilla.org/Community:SummerOfCode16#Application_Advice"&gt;application advice&lt;/a&gt; on the idea page. I’ve
included/expanded on this below:&lt;ul&gt;
&lt;li&gt;Talk to the mentor. Contact them on &lt;span class="caps"&gt;IRC&lt;/span&gt;/e-mail/Slack/whatever that
project uses. If you have trouble contacting a mentor, contact the
organization administrators.&lt;/li&gt;
&lt;li&gt;Read &lt;a class="reference external" href="http://blog.gerv.net/2006/05/how_not_to_apply_for_summer_of/"&gt;How Not To Apply For Summer Of Code&lt;/a&gt;
and avoid doing the things listed there.&lt;/li&gt;
&lt;li&gt;Read our examples of good applications:
&lt;a class="reference external" href="https://wiki.mozilla.org/SummerOfCode/SampleApplications/1"&gt;1&lt;/a&gt;
&lt;a class="reference external" href="https://wiki.mozilla.org/SummerOfCode/SampleApplications/2"&gt;2&lt;/a&gt;
&lt;a class="reference external" href="https://wiki.mozilla.org/SummerOfCode/SampleApplications/3"&gt;3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;It is entirely acceptable to apply for 2 or 3 projects, if more than one
catches your eye; if the applications are high quality, that can improve
your chances. However, more than 3 seems like spam.&lt;/li&gt;
&lt;li&gt;Note that if a project suggests it would be helpful to know a technology
you don’t know (e.g. &lt;span class="caps"&gt;XUL&lt;/span&gt;), you may be able to get away with learning on
the job. Don’t be put off from applying if the project otherwise looks
right for you.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="section" id="picking-an-organization"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4"&gt;Picking an Organization&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Pick an organization you’re truly interested in helping. I really can’t stress
this enough. “Truly interested in helping” might mean many things:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;You believe in an organization on a philosophical ground.&lt;/li&gt;
&lt;li&gt;You use the program/library/service/etc. that the organization produces.&lt;/li&gt;
&lt;li&gt;…many other things…&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Throughout this post I use “organization” and “community” synonymously, but
organizations likely have smaller communities within them, each with their own
culture, beliefs, etc. Even within a small community, members will not share all
the same opinions!&lt;/p&gt;
&lt;!-- --&gt;
&lt;blockquote&gt;
A pet peeve of mine is that a student should use (or at the very least
&lt;em&gt;try&lt;/em&gt;) the product the community makes. It is difficult (if not impossible)
to understand the needs and wants of a community without utilizing what
they’ve poured their time and energy into.&lt;/blockquote&gt;
&lt;div class="section" id="introductions"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id5"&gt;Introductions&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Different communities interact in different ways (and frequently a single
community interacts in multiple ways). Common ways include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Instant messaging (&lt;span class="caps"&gt;IRC&lt;/span&gt;, &lt;span class="caps"&gt;XMPP&lt;/span&gt;, Slack, hipChat, etc.) for day-to-day chatter,
help, and off-topic banter.&lt;/li&gt;
&lt;li&gt;E-mail / mailing lists / newsgroups for project wide discussion,
announcements, etc.&lt;/li&gt;
&lt;li&gt;Bug trackers (Bugzilla, GitHub, Trac) for technical discussion and reviewing code.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Choose whichever way of introducting yourself that you’re comfortable with. It
can be useful to “idle” before introducing yourself (i.e.  watch how a community interacts).&lt;/p&gt;
&lt;p&gt;This can be important to figuring out a communities culture, e.g. how friendly
is the community to new-comers? Are they open to helping or do they just expect
patches to be submitted? Remember that it’s important for you to feel
comfortable with a community, you’ll be spending a significant amount of time
interacting with them!&lt;/p&gt;
&lt;p&gt;If none of the above seem appropriate, or you’re unsure, contact the
organization administrator directly. I’d suggest asking pointed questions, as an
organization administrator is much more likely to respond quickly in that case.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="getting-accepted"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id6"&gt;Getting Accepted&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We’re frequently asked how a student can improve their chances of getting
accepted by an organization. GSoC is a very &lt;strong&gt;self-driven&lt;/strong&gt; program, especially
if your mentor is a volunteer. Being a self starter can be a boon for being accepted.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Find a project you’re interested in doing and talk to the mentor / community responsible.&lt;/li&gt;
&lt;li&gt;Ensure you have a development environment set-up (for example, make sure you
can build Firefox, understand what needs to be done after making changes, etc.).&lt;/li&gt;
&lt;li&gt;Figure out where resources are for the project (i.e. Where are technical
discussions? Where can you find documentation?)&lt;/li&gt;
&lt;li&gt;Find minor bugs related to the project you’re interested in and work on
fixing them. (This might be more difficult if your project would add an
entirely new piece of code!)&lt;/li&gt;
&lt;li&gt;Get used to the way the community works and functions.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="building-an-application"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id7"&gt;Building an Application&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The above should help feed into your application. In particular, it should help
to build a realistic schedule for your application. (Scheduling is difficult
even for seasoned engineers, but the above work should help make a more accurate schedule.)&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Develop a plan for splitting your work into discrete chunks that can be
merged separately. Smaller changes are easier to review, can (generally)
land faster, and are easier to test. Of course, each project is different,
but work with your (potential) mentor.&lt;/li&gt;
&lt;li&gt;Estimate the amount of work each part of the project will take (you’ll have
some experience in the code base already, leverage that).&lt;/li&gt;
&lt;li&gt;Estimate how long reviews will take. (All code at Mozilla must go through a
review process before it is merged into a product. You might even need
multiple reviewers if your code touches many different parts of a codebase!
Different people review code on different schedules, etc.)&lt;/li&gt;
&lt;li&gt;Understand how quickly your changes would be merged and released. (How
quickly will your code hit a larger audience?)&lt;/li&gt;
&lt;li&gt;Understand the pieces &lt;strong&gt;besides&lt;/strong&gt; code that you might be asked to do. Will
you need to add/update documentation? Add new tests? Keep an old &lt;span class="caps"&gt;API&lt;/span&gt; intact?&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="summary"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id8"&gt;Summary&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is just a few ideas of what I look for when reviewing a Google Summer of
Code application. To repeat, try to understand an organization’s members, get
involved and gain experience, try to build an accurate schedule. An additional
thing I’d like to add is to &lt;a class="reference external" href="http://patrick.cloke.us/posts/2014/07/09/mentoring-and-time/"&gt;respect your mentors time&lt;/a&gt;, especially for GSoC,
many mentors are volunteers! You’ll likely be working on their project &lt;strong&gt;more&lt;/strong&gt;
than they do during GSoC!&lt;/p&gt;
&lt;p&gt;Please let me know if you have any additions or comments! If you have specific
questions that pertain to your application at Mozilla, please
&lt;a class="reference external" href="http://patrick.cloke.us/pages/contact.html"&gt;contact&lt;/a&gt; me individually.&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Patrick Cloke</dc:creator><pubDate>Mon, 07 Mar 2016 09:18:00 -0500</pubDate><guid isPermaLink="false">tag:patrick.cloke.us,2016-03-07:posts/2016/03/07/thoughts-on-applying-to-gsoc/</guid><category>GSoC</category><category>Mozilla</category></item><item><title>IRC Client Usage Share on moznet</title><link>http://patrick.cloke.us/posts/2015/09/23/irc-client-usage-share-on-moznet/</link><description>
&lt;div class="section" id="background"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id13"&gt;Background&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The usage share of &lt;span class="caps"&gt;IRC&lt;/span&gt; clients has always been something I’m interested in. This
is partially to see how many people are using &lt;a class="reference external" href="http://instantbird.com/"&gt;Instantbird&lt;/a&gt; or &lt;a class="reference external" href="https://www.mozilla.org/en-US/thunderbird/"&gt;Mozilla
Thunderbird&lt;/a&gt; for &lt;span class="caps"&gt;IRC&lt;/span&gt; (as I’ve written much of the &lt;span class="caps"&gt;IRC&lt;/span&gt; code for those clients).
&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Usage_share_of_web_browsers"&gt;Usage share of browsers&lt;/a&gt; is quite a researched topic, but I’ve never come
across this data for &lt;span class="caps"&gt;IRC&lt;/span&gt;. Most &lt;a class="footnote-reference" href="#id7" id="id1"&gt;[1]&lt;/a&gt; &lt;span class="caps"&gt;IRC&lt;/span&gt; clients implement a part of the &lt;a class="reference external" href="http://www.irchelp.org/irchelp/rfc/ctcpspec.html"&gt;&lt;span class="caps"&gt;CTCP&lt;/span&gt;&lt;/a&gt;
protocol which allows a client to query another client for their version.
Thinking of this as a &lt;a class="reference external" href="http://en.wikipedia.org/wiki/User_agent"&gt;user agent&lt;/a&gt; is probably a good analogue. I don’t think
this would imply that there is much of an issue with &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Usage_share_of_web_browsers#User_agent_spoofing"&gt;user agent spoofing&lt;/a&gt;, as
there would be for web browser statistics since (as far as I know), no one uses
the version response to do capability negotiation. It also is not used by servers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="technical-bits"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id14"&gt;Technical Bits&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So how’d we do this? I wrote an &lt;a class="reference external" href="https://bitbucket.org/clokep/irc-extras/src/tip/stats/"&gt;extension&lt;/a&gt; for Instantbird which handled both
the backend and the display of the results. I think that this really showcases
the extensibility of Instantbird and the effort we’ve put into ensuring their
are generic APIs available for developers. In particular this uses the &lt;a class="reference external" href="http://dxr.mozilla.org/comm-central/source/chat/protocols/irc/ircHandlers.jsm"&gt;&lt;span class="caps"&gt;IRC&lt;/span&gt;
handler &lt;span class="caps"&gt;API&lt;/span&gt;&lt;/a&gt; and the &lt;a class="reference external" href="http://hg.mozilla.org/comm-central/file/dbab5a531594/im/content/tabbrowser.xml#l432"&gt;add panel &lt;span class="caps"&gt;API&lt;/span&gt;&lt;/a&gt; (added by &lt;a class="reference external" href="http://blog.nhnt11.com/"&gt;one of our GSoC students&lt;/a&gt; a
couple of years ago.)&lt;/p&gt;
&lt;p&gt;Anyway, at the actual protocol level, I simply send a &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;CTCP&lt;/span&gt; &lt;span class="caps"&gt;VERSION&lt;/span&gt;&lt;/tt&gt; query to
each user I know of on the &lt;span class="caps"&gt;IRC&lt;/span&gt; network (based on who is in the same channels as
me) and then record the responses. I tried to be nice to the network here and
rate-limited myself to 1 query per second. No one complained after ~100 queries
and I didn’t seem to have any &lt;tt class="docutils literal"&gt;fakelag&lt;/tt&gt; issues. I then dumped the results and
made a pretty(-ish) plot of this. (If you’re a network administrator reading
this and think this is insane, I’d be very curious to hear a better way to do this!)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="results"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id15"&gt;Results&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In order to get some results I hooked my client up to &lt;a class="reference external" href="https://wiki.mozilla.org/IRC"&gt;moznet&lt;/a&gt; on July 23rd,
2015 and let it run on many channels (pretty much anything with more than 20
users) for a few hours &lt;a class="footnote-reference" href="#id8" id="id2"&gt;[2]&lt;/a&gt;. I was in Europe and started early in the morning
and let it run through the evening, so it should encompass some “normal” usage
by Mozillians. I would expect a bit of skew in these results toward
Mozilla-esque &lt;span class="caps"&gt;IRC&lt;/span&gt; clients (Instantbird, Thunderbird and &lt;a class="reference external" href="http://chatzilla.hacksrus.com/"&gt;ChatZilla&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Of course these numbers are just a single sampling and I have no idea how much
variance there is day-to-day or over time, but I found the (un-scientific)
results to be interesting!&lt;/p&gt;
&lt;div class="section" id="responses"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id16"&gt;Responses&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The first thing I noticed is the large amount of information some version
responses gave (in no particular order):&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;KVIrc 4.3.1 &lt;span class="pre"&gt;svn-6313&lt;/span&gt; 'Aria' 20120701 - build &lt;span class="pre"&gt;2013-02-14&lt;/span&gt; 17:47:33 &lt;span class="caps"&gt;UTC&lt;/span&gt; - Windows 7 Ultimate (x64) Service Pack 1 (Build 7601)&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;xchat 2.8.8 Linux &lt;span class="pre"&gt;3.17.4-1-&lt;span class="caps"&gt;ARCH&lt;/span&gt;&lt;/span&gt; [x86_64/2.90GHz/&lt;span class="caps"&gt;SMP&lt;/span&gt;]&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;HexChat 2.10.1 [x64] / Windows 7 &lt;span class="caps"&gt;SP1&lt;/span&gt; [4.09GHz]&lt;/tt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I don’t understand the rationale behind sharing a user’s operating system and
&lt;span class="caps"&gt;CPU&lt;/span&gt; speed. Most clients responded with a simple &lt;tt class="docutils literal"&gt;&amp;lt;software&amp;gt; &amp;lt;version number&amp;gt;&lt;/tt&gt;,
although quite a few also include a &lt;span class="caps"&gt;URL&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Additionally, some bouncers respond in weird ways which might skew the results:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;span class="caps"&gt;ZNC&lt;/span&gt; responds only if there are no clients connected &lt;span class="caps"&gt;OR&lt;/span&gt;, depending on the
version, it appends itself to the client response. &lt;a class="footnote-reference" href="#id9" id="id3"&gt;[3]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;bip responds with it’s own version if no one is connected &lt;span class="caps"&gt;OR&lt;/span&gt; the version of
all connected clients. &lt;a class="footnote-reference" href="#id10" id="id4"&gt;[4]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Lastly, some clients just don’t respond (or respond with an empty string). The
results below aren’t really a count of “users”, but a count of “clients” where
some users might be counted multiple times.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="client-summary"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id17"&gt;Client Summary&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Initially I visualized the data by plotting it two serparate ways: first by
showing the count of each version response and then grouping by “client family”.
The first plot had too many columns to reasonably show in this post: thus I’ve
only included a plot of the client families &lt;a class="footnote-reference" href="#id11" id="id5"&gt;[5]&lt;/a&gt;. There are two plots, the first
shows a subset of the data by cutting the tail (arbitrarily including families
with at least 10 users).&lt;/p&gt;
&lt;div class="note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;A “client family” is counting all versions of the same client together. This
was calculated by taking the text up to the first whitespace or digit and
converting to lowercase:&lt;/p&gt;
&lt;div class="last"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;family&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;version&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/[\s\d]/&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;style type="text/css"&gt;
    #family-all-count, #family-count {
      width: 100%;
      height: 300px;
    }
&lt;/style&gt;
&lt;script src="/js/flotr2.min.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script type="text/javascript"&gt;
    function createPlot(aId, aTitle, aData) {
      // Put the data in order from biggest to smallest.
      var data = []
      for (var d of aData.entries())
        data.push(d);
      data.sort(function(a, b) { return a[1] &lt; b[1]; });

      // Re-arrange the data to be plotted into two arrays: one is a set of points
      // of x-index to value, the other is x-index to label.
      var labels = [];
      for (var i = 0; i &lt; data.length; i++) {
        // Sometimes the labels are stupid long.
        labels[i] = [i, (data[i][0] || "undefined").slice(0, 25)];
        data[i] = [i, data[i][1]];
      }

      var options = {
        title: aTitle,
        HtmlText: false,
        bars: {
          show: true,
          shadowSize: 0,
          barWidth: 0.5
        },
        mouse: {
          track: true,
          relative: true
        },
        xaxis: {
          ticks: labels,
          labelsAngle: 90
        },
        yaxis: {
          min: 0,
          autoscaleMargin: 1,
          title: "Count",
          titleAngle: 90
        }
      };

      var plot = document.getElementById(aId);
      Flotr.draw(plot, [data], options);
    }

    document.addEventListener("DOMContentLoaded", function() {
        var raw_data = [["instantbird", 21], ["thunderbird", 39], ["xchat", 77], ["colloquy", 33], ["limechat", 61], ["irssi", 204], ["irccloud", 520], ["znc", 161], ["icedove", 3], ["chatzilla", 59], ["bip-", 11], ["hexchat", 61], ["mozbot", 3], ["miranda", 6], ["mirc", 31], ["textual", 44], ["weechat", 76], ["kvirc", 6], ["purple", 70], ["x-chat", 8], ["xchat-wdk", 1], ["dircproxy", 1], ["konversation", 12], ["quassel", 69], ["linkinus", 3], ["\x02erc\x02", 6], ["leroooooy", 1], ["elitebnc", 1], ["fu,", 1], ["anope-", 1], ["&gt;", 2], ["telepathy-idle", 3], ["rcirc", 3], ["mrgiggles:", 1], ["ircii", 1], ["http://www.mibbit.com", 4], ["shout", 7], ["yaaic", 2], ["karen", 1], ["", 3], ["sceners", 1], ["uberscript", 1], ["tiarra:", 3], ["snak", 1], ["wuunyan", 1], ["adiirc", 1], ["n/a", 1], ["pircbotx", 3], ["none", 1], ["yes", 1], ["nettalk", 1], ["riece/", 1], ["unknown", 1], ["version", 1], ["circ", 3], ["request", 1], ["forrest,", 1], ["trillian", 1], ["\x03", 2], ["smuxi-frontend-gnome", 1], ["some", 1], ["\x02\x03", 1], ["oh", 1], ["\u201Cnever", 1], ["this", 1], ["nochat", 1], ["wee", 1], ["foadirc", 1], ["smuxi-server", 1], ["aperture", 1], ["internet", 1], ["supybot", 1], ["ejabberd", 2], ["dxirc", 1], ["ircle", 1], ["infobot", 1], ["exovenom", 1], ["nsa-irc", 1]];
        var families = new Map();
        for (var data of raw_data)
            families.set(data[0], data[1]);

        // Count the totals, used in reporting not actually displayed.
        var total = 0;
        for (var family of families.entries())
            total += family[1];

        // Update the plots.
        createPlot("family-all-count",
                   "All Families (Total: " + total + ")", families);

        // Remove all families that have less than 10 hits.
        for (var family of families.entries()) {
            if (family[1] &lt; 10) {
                families.delete(family[0])
                total -= family[1];
            }
        }

        createPlot("family-count",
                   "Families with at Least 10 Users (Total: " + total + ")",
                   families);
    });
&lt;/script&gt;
&lt;div id="family-count"&gt;&lt;/div&gt;
&lt;div id="family-all-count"&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="section" id="points-of-note"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id18"&gt;Points of Note&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I have to admit that I was fairly shocked by the number of IRCCloud users as I
found it pretty unusable when messing with it &lt;a class="footnote-reference" href="#id12" id="id6"&gt;[6]&lt;/a&gt;. I suspect it being an 'easy'
bouncer draws many people to it. The bouncer-like software (IRCCloud, &lt;span class="caps"&gt;ZNC&lt;/span&gt;, bip)
represents almost half of the users surveyed (692 / 1549 ≈ 45%)!&lt;/p&gt;
&lt;p&gt;I'm surprised so many people are using &lt;tt class="docutils literal"&gt;purple&lt;/tt&gt; as their &lt;span class="caps"&gt;IRC&lt;/span&gt; client, as the
support there is really barebones. (It makes sense if you're already using
Pidgin and don't want another client.) I think we've made a significant amount
of improvements in Instantbird's &lt;span class="caps"&gt;IRC&lt;/span&gt; support to make it simpler for a user to
get started (give it a try if you haven't!).&lt;/p&gt;
&lt;p&gt;The last thing I'll note is that, when taken together, Instantbird, Thunderbird,
and Icedove, come in as part of the top 10 (63 users, right before ChatZilla)!
There's a lot of great clients out there and I'm happy to say I've helped to
create one of the more popular ones (on moznet, at least!).&lt;/p&gt;
&lt;p&gt;Let me know if I missed a great insight!&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id7" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"&gt;&lt;/col&gt;&lt;col&gt;&lt;/col&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;"Most" is a wild accusation here. But...from the numbers I've seen, it
seems like a reasonable statement.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id8" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"&gt;&lt;/col&gt;&lt;col&gt;&lt;/col&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;While running this I had a few users question what I was doing over
private messages or in a channel. I'm &lt;em&gt;shocked&lt;/em&gt; that clients bother
their users by showing them they received a &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;VERSION&lt;/span&gt;&lt;/tt&gt; request. (Most)
users just won't care! Why show that low-level of the protocol?!&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id9" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"&gt;&lt;/col&gt;&lt;col&gt;&lt;/col&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id3"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;As corrected by DarthGandalf on &lt;span class="caps"&gt;IRC&lt;/span&gt;: "Before 1.6, &lt;span class="caps"&gt;ZNC&lt;/span&gt; version is
returned iff no clients are connected. After 1.6, it's also appended to
the client's response (but still one line per connected client)"&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id10" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"&gt;&lt;/col&gt;&lt;col&gt;&lt;/col&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id4"&gt;[4]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="https://twitter.com/dioxmat/status/646815252898803712"&gt;Source&lt;/a&gt;, have
I mentioned yet in this article that I hate bouncers?&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id11" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"&gt;&lt;/col&gt;&lt;col&gt;&lt;/col&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id5"&gt;[5]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;I stole the code to plot this from the &lt;a class="reference external" href="https://bitbucket.org/clokep/irc-extras/src/41a9572caf957ab8ae3969a145834bcd5be74abe/stats/content/ircStats.js?at=default#cl-55"&gt;plotting code&lt;/a&gt; in the extension
I wrote for this. When actually using that extension, something similar
to this appears as a tab and refreshes as results come in. It uses
&lt;a class="reference external" href="http://humblesoftware.com/flotr2/"&gt;Flotr2&lt;/a&gt; to do the plotting in JavaScript, I've been pretty happy with
it.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id12" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"&gt;&lt;/col&gt;&lt;col&gt;&lt;/col&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id6"&gt;[6]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Although in retrospect I shouldn't be since Mozilla runs their own
&lt;a class="reference external" href="https://irccloud.mozilla.com/"&gt;IRCCloud instance&lt;/a&gt;.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Patrick Cloke</dc:creator><pubDate>Thu, 24 Sep 2015 07:18:00 -0400</pubDate><guid isPermaLink="false">tag:patrick.cloke.us,2015-09-23:posts/2015/09/23/irc-client-usage-share-on-moznet/</guid><category>Mozilla</category><category>Thunderbird</category><category>Instantbird</category><category>IRC</category></item><item><title>Google Summer of Code 2015 Project Ideas for Mozilla</title><link>http://patrick.cloke.us/posts/2015/01/21/google-summer-of-code-2015-project-ideas-for-mozilla/</link><description>&lt;p&gt;As &lt;a class="reference external" href="http://blog.queze.net/post/2015/01/22/Project-ideas-wanted-for-Summer-of-Code-2015"&gt;Florian announced&lt;/a&gt; last Thursday, &lt;strong&gt;now&lt;/strong&gt; is the time to brainstorm and
discuss project ideas for &lt;a class="reference external" href="http://google-opensource.blogspot.fr/2014/10/google-summer-of-code-2015-and-google.html"&gt;Google Summer of Code 2015&lt;/a&gt;. Mozilla has
participated in every previous Google Summer of Code (GSoC), and hopes to
participate again this year! In order to help ensure we&amp;#8217;re selected, we need
project ideas before February 20th,&amp;nbsp;2015!&lt;/p&gt;
&lt;p&gt;There are always projects that we&amp;#8217;re passionate about, but keep getting pushed
down our ever growing to-do lists. GSoC is a great opportunity to introduce a
new member to your team, and have a student work full time on a project for 3&amp;nbsp;months.&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;What makes a good&amp;nbsp;project?&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;A project you&amp;#8217;re passionate about and has a clear&amp;nbsp;mentor.&lt;/li&gt;
&lt;li&gt;It should take (&lt;em&gt;a student&lt;/em&gt;) roughly 3 months to design, code, test,
review,&amp;nbsp;etc.&lt;/li&gt;
&lt;li&gt;It should not be in the critical path to your next&amp;nbsp;release/milestone.&lt;/li&gt;
&lt;li&gt;Is related to any Mozilla project (e.g. Firefox, Firefox &lt;span class="caps"&gt;OS&lt;/span&gt;, Thunderbird,
Instantbird, SeaMonkey, Bugzilla, l10n, &lt;span class="caps"&gt;NSS&lt;/span&gt;, &lt;span class="caps"&gt;QA&lt;/span&gt;, &lt;span class="caps"&gt;SUMO&lt;/span&gt;, Rust, and many&amp;nbsp;more!)&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;Please add ideas you might have to the &lt;a class="reference external" href="https://wiki.mozilla.org/Community:SummerOfCode15:Brainstorming"&gt;brainstorming page&lt;/a&gt;, eventually these
ideas will move to the &lt;a class="reference external" href="https://wiki.mozilla.org/Community:SummerOfCode15"&gt;formal ideas page&lt;/a&gt;. Please ensure you read the
directions at the top of the&amp;nbsp;page.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;d also like to thank &lt;a class="reference external" href="http://blog.gerv.net/"&gt;Gerv&lt;/a&gt; for doing an awesome job for the past 10 years as
the organization administrator. He is now passing the reins off to Florian and
I, who are the new points of contact for GSoC at Mozilla. If you have any
questions about GSoC, please check the &lt;a class="reference external" href="https://www.google-melange.com/gsoc/document/show/gsoc_program/google/gsoc2015/help_page"&gt;&lt;span class="caps"&gt;FAQ&lt;/span&gt;&lt;/a&gt; and, if it is still not answered,
please contact Florian or I&amp;nbsp;directly.&lt;/p&gt;
&lt;div class="section" id="for-students"&gt;
&lt;h2&gt;For&amp;nbsp;Students&lt;/h2&gt;
&lt;p&gt;The application period for students is March 16th, 2015 to March 27th, 2015. It
is not too soon to start discussing ideas with a potential mentor/community,
however. If you have an idea of what you&amp;#8217;d like to work on, feel free to seek
out that area of the community, introduce yourself and maybe find a &lt;a class="reference external" href="http://www.joshmatthews.net/bugsahoy/"&gt;mentored
bug&lt;/a&gt; to work&amp;nbsp;on.&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Patrick Cloke</dc:creator><pubDate>Wed, 21 Jan 2015 13:18:00 -0500</pubDate><guid isPermaLink="false">tag:patrick.cloke.us,2015-01-21:posts/2015/01/21/google-summer-of-code-2015-project-ideas-for-mozilla/</guid><category>mozilla</category><category>GSoC</category></item><item><title>Thunderbird Summit 2014</title><link>http://patrick.cloke.us/posts/2014/11/14/thunderbird-summit-2014/</link><description>&lt;p&gt;Last month (Oct. 15th to Oct. 18th, to be precise), &lt;a class="reference external" href="https://wiki.mozilla.org/Thunderbird:Summit_2014#Invited_Attendees"&gt;twenty volunteers&lt;/a&gt;
descended on Mozilla&amp;#8217;s Toronto office to discuss &lt;a class="reference external" href="https://www.mozilla.org/en-US/thunderbird/"&gt;Mozilla Thunderbird&lt;/a&gt;. This
included Mozilla employees, Thunderbird contributors of all sorts (developers,
user interface designers, add-on reviewers), Lightning contributors, and
chat/&lt;a class="reference external" href="http://instantbird.com/"&gt;Instantbird&lt;/a&gt;&amp;nbsp;contributors.&lt;/p&gt;
&lt;!--  --&gt;
&lt;blockquote class="center"&gt;
&lt;a class="reference external image-reference" href="http://patrick.cloke.us/images/chat-tb-summit/IMG_6516.jpg"&gt;&lt;img alt="The entire group of volunteers." src="/thumbnails/chat-tb-summit/IMG_6516_small.jpg" /&gt;&lt;/a&gt;
&lt;/blockquote&gt;
&lt;p&gt;It was great to spend some quality hacking time with &lt;a class="reference external" href="http://blog.queze.net/"&gt;Florian&lt;/a&gt; and to meet
&lt;a class="reference external" href="http://blog.nhnt11.com/"&gt;Nihanth&lt;/a&gt;, both Instantbird guys who I talk to most days on &lt;span class="caps"&gt;IRC&lt;/span&gt;! I also had the
pleasure of re-meeting a few people from the Mozilla Summit last year (I
attended in Toronto) and to meet some brand new&amp;nbsp;people!&lt;/p&gt;
&lt;!--  --&gt;
&lt;blockquote class="center"&gt;
&lt;a class="reference external image-reference" href="http://patrick.cloke.us/images/chat-tb-summit/IMG_6408.jpg"&gt;&lt;img alt="Nihanth hacking." src="/thumbnails/chat-tb-summit/IMG_6408_small.jpg" /&gt;&lt;/a&gt;
&lt;a class="reference external image-reference" href="http://patrick.cloke.us/images/chat-tb-summit/IMG_6426.jpg"&gt;&lt;img alt="The chat contributors: me, Florian and Nihanth." src="/thumbnails/chat-tb-summit/IMG_6426_small.jpg" /&gt;&lt;/a&gt;
&lt;a class="reference external image-reference" href="http://patrick.cloke.us/images/chat-tb-summit/IMG_6508.jpg"&gt;&lt;img alt="Daniel joining us over Vidyo." src="/thumbnails/chat-tb-summit/IMG_6508_small.jpg" /&gt;&lt;/a&gt;
&lt;p&gt;A few pictures of the chat contributors: Nihanth; me, Florian and Nihanth;
and Daniel (dialing&amp;nbsp;in!)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It was really nice to actually sit down for a few days and work on
Instantbird/Thunderbird without the distractions of &amp;#8220;real life&amp;#8221;. I,
unfortunately, spent the first day fixing an Instantbird &lt;a class="reference external" href="http://hg.mozilla.org/comm-central/rev/05bb70d5b231"&gt;bustage&lt;/a&gt; (from a
mozilla-central change that removed some &lt;span class="caps"&gt;NSS&lt;/span&gt; symbols&amp;#8230;why, I have no idea). But
after that, we got some really exciting work done! We started cleaning up and
finalizing some patches from Google Summer of Code 2014 to add &lt;a class="reference external" href="http://www.webrtc.org/"&gt;WebRTC&lt;/a&gt; support
to &lt;a class="reference external" href="http://xmpp.org/"&gt;&lt;span class="caps"&gt;XMPP&lt;/span&gt;&lt;/a&gt;! You can check out the progress in &lt;a class="reference external" href="https://bugzilla.mozilla.org/show_bug.cgi?id=1018060"&gt;bug 1018060&lt;/a&gt;.&lt;/p&gt;
&lt;!--  --&gt;
&lt;blockquote class="center"&gt;
&lt;a class="reference external image-reference" href="http://patrick.cloke.us/images/chat-tb-summit/IMG_6394.jpg"&gt;&lt;img alt="First working call over Instantbird WebRTC." src="/thumbnails/chat-tb-summit/IMG_6394_small.jpg" /&gt;&lt;/a&gt;
&lt;a class="reference external image-reference" href="http://patrick.cloke.us/images/chat-tb-summit/webrtc_preview.jpg"&gt;&lt;img alt="Screenshot of first working call over Instantbird WebRTC." src="/thumbnails/chat-tb-summit/webrtc_preview_small.jpg" /&gt;&lt;/a&gt;
&lt;p&gt;First working call over Instantbird&amp;nbsp;WebRTC.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!--  --&gt;
&lt;blockquote class="center"&gt;
&lt;a class="reference external image-reference" href="http://patrick.cloke.us/images/chat-tb-summit/IMG_6594.jpg"&gt;&lt;img alt="Eating some poutine!" src="/thumbnails/chat-tb-summit/IMG_6594_small.jpg" /&gt;&lt;/a&gt;
&lt;p&gt;Other highlights of the trip include eating the &amp;#8220;Canadian delicacy&amp;#8221; of
poutine (with pulled pork on&amp;nbsp;it)!&lt;/p&gt;
&lt;/blockquote&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Patrick Cloke</dc:creator><pubDate>Fri, 14 Nov 2014 18:37:00 -0500</pubDate><guid isPermaLink="false">tag:patrick.cloke.us,2014-11-14:posts/2014/11/14/thunderbird-summit-2014/</guid><category>Mozilla</category><category>Thunderbird</category><category>community</category><category>Instantbird</category></item><item><title>How I Got Involved in Mozilla</title><link>http://patrick.cloke.us/posts/2014/10/07/how-i-got-involved-in-mozilla/</link><description>&lt;p&gt;This is discussed very briefly on my &lt;a class="reference external" href="http://patrick.cloke.us/pages/about.html"&gt;about page&lt;/a&gt;, but I figured it could use a
bit of a longer discussion. I generally consider myself to have joined the
&lt;a class="reference external" href="https://www.mozilla.org/"&gt;Mozilla&lt;/a&gt; community in ~2006. I know that I was using Mozilla Firefox, Mozilla
Thunderbird, &lt;em&gt;and&lt;/em&gt; Mozilla Sunbird way before that (probably since ~2004, which
is when I built my own computer). But I was just an enthusiast then, running
beta builds, then alpha and eventually nightly builds. (This was way back when
things were more dangerous to run: Minefield and&amp;nbsp;Shredder.)&lt;/p&gt;
&lt;p&gt;Anyway, back to 2006&amp;#8230;I initially got involved in a more technical fashion by
writing extensions (or maybe it was &lt;a class="reference external" href="http://www.greasespot.net/"&gt;GreaseMonkey&lt;/a&gt; scripts). I don&amp;#8217;t really have
anyway to prove this though &amp;#8212; I don&amp;#8217;t seem to have any of that code. (This was
before widespread distributed version control.) Anyway, let&amp;#8217;s just assume this
2006 date is&amp;nbsp;correct.&lt;/p&gt;
&lt;p&gt;My &lt;a class="reference external" href="https://bugzilla.mozilla.org/show_bug.cgi?id=468020"&gt;first patch&lt;/a&gt; was in 2008 to move a function from the &lt;a class="reference external" href="https://addons.mozilla.org/en-us/thunderbird/addon/provider-for-google-calendar/"&gt;Provider for Google
Calendar&lt;/a&gt; to the calendar core so that I could use it in &lt;a class="reference external" href="https://bitbucket.org/clokep/thundershows"&gt;Thundershows&lt;/a&gt;: a
calendar provider for &lt;span class="caps"&gt;TV&lt;/span&gt; shows &lt;a class="footnote-reference" href="#id6" id="id1"&gt;[1]&lt;/a&gt; &lt;a class="footnote-reference" href="#id7" id="id2"&gt;[2]&lt;/a&gt;. (As far as I know, I&amp;#8217;m one of a
handful of people to actually implement a &lt;a class="reference external" href="https://wiki.mozilla.org/Calendar:Creating_an_Extension#Provider_Extensions"&gt;calendar provider&lt;/a&gt;.) I found the
calendar project much easier to get involved in than other aspects of Mozilla
since it was so much smaller. (I also &lt;a class="reference external" href="https://bitbucket.org/clokep/microblog-mailnews"&gt;toyed&lt;/a&gt; with adding an entire new protocol
to Thunderbird, which &lt;a class="reference external" href="http://mesquilla.com/"&gt;R Kent James&lt;/a&gt; has &lt;a class="reference external" href="https://bitbucket.org/rkentjames/skinkglue"&gt;now done&lt;/a&gt; successfully! &lt;a class="footnote-reference" href="#id8" id="id3"&gt;[3]&lt;/a&gt; &lt;a class="footnote-reference" href="#id9" id="id4"&gt;[4]&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;I then came across &lt;a class="reference external" href="http://www.instantbird.com/"&gt;Instantbird&lt;/a&gt; in ~2008 (sometime in the Instantbird 0.1 era).
I thought this was great &amp;#8212; Mozilla was finally making an instant messaging
client! Well, I was kind of right&amp;#8230;Instantbird is not an official Mozilla
project, but it was exactly what I wanted! The guys (mostly &lt;a class="reference external" href="http://blog.queze.net/"&gt;Florian Quèze&lt;/a&gt;) in
the &lt;a class="reference external" href="irc://irc.mozilla.org/#instantbird"&gt;#instantbird&lt;/a&gt; &lt;span class="caps"&gt;IRC&lt;/span&gt; channel were awesome: kind, patient, helpful, and
welcoming. They were the ones that really introduced me into the Mozilla way of
doing things. I fixed my first bug for Instantbird in &lt;a class="reference external" href="https://bugzilla.mozilla.org/show_bug.cgi?id=953935"&gt;2010&lt;/a&gt; and haven&amp;#8217;t stopped
since! I&amp;#8217;ve since added &lt;a class="reference external" href="https://bugzilla.mozilla.org/show_bug.cgi?id=953944"&gt;&lt;span class="caps"&gt;IRC&lt;/span&gt; support&lt;/a&gt; via JavaScript (instead of libpurple) and
am now one of the lead developers. I&amp;#8217;ve mentored Google Summer of Code students
twice (2013 and 2014), contribute to Thunderbird and am a peer of the &lt;a class="reference external" href="https://wiki.mozilla.org/Modules/Chat"&gt;chat
code&lt;/a&gt; shared between Instantbird and Thunderbird. (I do also occassionally
contribute to other projects. &lt;a class="footnote-reference" href="#id10" id="id5"&gt;[5]&lt;/a&gt;)&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id6" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;This was my first project to really have other users, I had people filing
bugs, asking for new features, etc. It was great! I even had someone
(years later) tell me in &lt;a class="reference external" href="irc://irc.mozilla.org/#instantbird"&gt;#instantbird&lt;/a&gt; that they had loved
Thundershows!&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id7" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;My &lt;a class="reference external" href="https://bugzilla.mozilla.org/show_bug.cgi?id=469477"&gt;second bug&lt;/a&gt; dealt with the same set of code and had tests committed
(by me) over 5 years after the initial patch. Oops!&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id8" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id3"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;My work was based off of some experiments &lt;a class="reference external" href="http://quetzalcoatal.blogspot.com/"&gt;Joshua Cranmer&lt;/a&gt; did to add
support for &lt;a class="reference external" href="http://quetzalcoatal.blogspot.com/2010/01/developing-new-account-types-part-0.html"&gt;web forums&lt;/a&gt; to Thunderbird. After all this time, I still
want that extension.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id9" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id4"&gt;[4]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Oh, also rkent did &lt;a class="reference external" href="http://mesquilla.com/extensions/tweequilla/"&gt;&lt;span class="caps"&gt;EXACTLY&lt;/span&gt;&lt;/a&gt; what I wanted years later: which is add
Twitter to Thunderbird.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id10" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id5"&gt;[5]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;But not Firefox. After seven years (and over 1800 commits), I&amp;#8217;ve never
fixed a bug in Firefox; although I have had &lt;a class="reference external" href="https://bugzilla.mozilla.org/show_bug.cgi?id=884319"&gt;code&lt;/a&gt; committed to
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;mozilla-central&lt;/span&gt;&lt;/tt&gt;.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Patrick Cloke</dc:creator><pubDate>Tue, 07 Oct 2014 09:31:00 -0400</pubDate><guid isPermaLink="false">tag:patrick.cloke.us,2014-10-07:posts/2014/10/07/how-i-got-involved-in-mozilla/</guid><category>Mozilla</category></item><item><title>Community and Volunteers</title><link>http://patrick.cloke.us/posts/2014/04/16/community-and-volunteers/</link><description>&lt;p&gt;It was suggested that I cross-post this from mozilla.dev.planning onto
my blog. This is in reply to a thread entitled &amp;#8220;&lt;a class="reference external" href="https://groups.google.com/forum/#%21topic/mozilla.dev.planning/P8oHKTCWSiQ"&gt;Proposal: Move
Thunderbird and SeaMonkey to mozilla-central&lt;/a&gt;&amp;#8221; about (essentially)
merging comm-central back into mozilla-central. There have been many
technical concerns raised in the thread (that I&amp;#8217;m not going to rehash
here). What I&amp;#8217;m more interested in is the lack of community feeling
there. As Nicholas Nethercote said in that&amp;nbsp;thread:&lt;/p&gt;
&lt;blockquote&gt;
&amp;#8220;I am surprised [&amp;#8230;] by how heartless the discussion has been.&amp;#8221;&lt;/blockquote&gt;
&lt;p&gt;I should note that I did have some help editing this down from my
original post. Turns out I tend to write inflammatory statements that
don&amp;#8217;t help get me point across. Who knew? Anyway, thanks to all of you
who helped me out&amp;nbsp;there!&lt;/p&gt;
&lt;p&gt;My full post is below (with a few links added and plaintext formatting
converted to &lt;span class="caps"&gt;HTML&lt;/span&gt;&amp;nbsp;formatting):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;On Monday, April 14, 2014 4:52:53 &lt;span class="caps"&gt;PM&lt;/span&gt; &lt;span class="caps"&gt;UTC&lt;/span&gt;-4, Nicholas Nethercote&amp;nbsp;wrote:&lt;/p&gt;
&lt;p&gt;&amp;gt; The technical aspects of this decision have been discussed to death,
&amp;gt; so I won&amp;#8217;t say anything about that. I am surprised, however, by how
&amp;gt; heartless the discussion has&amp;nbsp;been.&lt;/p&gt;
&lt;p&gt;I agree, the technical bitshere seem to have solutions suggested by
Joshua and others, but the non-technical parts of this discussion
have left mefeeling disheartened and confused with the Mozilla&amp;nbsp;community.&lt;/p&gt;
&lt;p&gt;I find it ironic/amusing/sad/upsetting that a few threads above this
is a thread entitled &amp;#8220;&lt;a class="reference external" href="https://groups.google.com/forum/#!topic/mozilla.dev.planning/1kbZsYoQcng"&gt;Contributor pathways, engagement points and
bug mentoring&lt;/a&gt;&amp;#8221; while in this thread I see community contributors
being blocked at every&amp;nbsp;turn!&lt;/p&gt;
&lt;p&gt;Here I don&amp;#8217;t see people attempting to foster a community by putting
their best foot forward. I see people trying to get their &lt;strong&gt;job&lt;/strong&gt;
done; with an attitude of &amp;#8220;if this doesn&amp;#8217;t help me, get it outta my
way!&amp;#8221; I don&amp;#8217;t think this is the right way to grow a community. I
don&amp;#8217;t think this is how Mozilla &lt;span class="caps"&gt;HAS&lt;/span&gt; grown it&amp;#8217;s community. I don&amp;#8217;t
think it&amp;#8217;s in line with what Mozilla expects from it&amp;#8217;s community
members (both employees and&amp;nbsp;volunteers!)&lt;/p&gt;
&lt;p&gt;Personally, I dislike the amount of Mozilla &lt;strong&gt;Corporation&lt;/strong&gt; goals
focus in this thread. Can we have a discussion aspart ofa larger
community? Why must it focus on Corporate goals? I&amp;#8217;m not part of the
corporation, I don&amp;#8217;t really care what its goals are or are not. I
care about Mozilla, I care about providing high-quality, free, open
source softwareto improve the experience of the Internet for
everyone. And no, I&amp;#8217;m not talking about Firefox. I&amp;#8217;m talking about
Thunderbird. I understand that Mozilla&amp;#8217;s goals arecurrently Firefox
and Firefox &lt;span class="caps"&gt;OS&lt;/span&gt;, but these are not my personal&amp;nbsp;goals.&lt;/p&gt;
&lt;p&gt;At the Summit I had a few conversations with people about
&amp;#8220;on-boarding&amp;#8221; new employees and getting them to understand how the
community works and that interacting with the community in a
positive manner is an important part of Mozilla. I don&amp;#8217;t remember
the exact context, but part of it wasthat it is important that new
employees don&amp;#8217;t think of it as &amp;#8220;How can I &lt;em&gt;use&lt;/em&gt; the community?&amp;#8221;, for
that implies taking advtange of them, but &amp;#8220;How can I work with the&amp;nbsp;community?&amp;#8221;&lt;/p&gt;
&lt;p&gt;Please don&amp;#8217;t see this as an &amp;#8220;employees vs. volunteers&amp;#8221; argument. I
believe that I&amp;#8217;m expected to live up to these same goals. If I, as a
volunteer, can help an employee achieve his goals; I&amp;#8217;m
&lt;span class="strike"&gt;more than willing&lt;/span&gt;, no&amp;#8230;I&amp;#8217;m &lt;span class="caps"&gt;EXPECTED&lt;/span&gt; to do that. I think
this is a two-way relationship that must be fostered. It has seemed
to me that over the past couple of years that I&amp;#8217;ve been hanging
around here there&amp;#8217;s been less and less focus on the community and
more and more on the&amp;nbsp;Corporation.&lt;/p&gt;
&lt;p&gt;I understand Thunderbird and SeaMonkey may not be important to you,
but it is important tome! (And otherswho contribute
totheThunderbird/SeaMonkey community, including employees who
contribute on their spare time.) When Mozilla stopped directly
supporting development of Thunderbird it was widely announced that
&amp;#8220;Thunderbird is dead!&amp;#8221;. We, as part of the Mozilla community, have
been fighting to prove this wrong.Could you please respect our
efforts? Merging c-c into m-c will help us focus our efforts on
building a great product instead of spending significant effort on
keeping a dying one on life-support. (And prove to all that
&amp;#8220;Thunderbird is dead!&amp;#8221; was just a sensational&amp;nbsp;headline.)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I don&amp;#8217;t have much else to say beyond that (besides thanks for reading
this&amp;nbsp;far!)&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Patrick Cloke</dc:creator><pubDate>Wed, 16 Apr 2014 12:34:00 -0400</pubDate><guid isPermaLink="false">tag:patrick.cloke.us,2014-04-16:posts/2014/04/16/community-and-volunteers/</guid><category>community</category><category>crosspost</category><category>Mozilla</category><category>Thunderbird</category></item><item><title>GSoc Lessons: Part Deux: The Arms Race</title><link>http://patrick.cloke.us/posts/2013/12/04/gsoc-lessons-part-deux-arms-race/</link><description>&lt;p&gt;This post title might be a little excessive, but I&amp;#8217;ll blame &lt;a class="reference external" href="http://en.wikipedia.org/wiki/The_Sum_of_All_Fears_%28film%29"&gt;The Sum
of All Fears&lt;/a&gt; that I was watching last night. This is the second part
of a set of posts about ideas I heard at the Google Summer of Code 2013
Mentor Summit (you can read &lt;a class="reference external" href="http://patrick.cloke.us/posts/2013/12/02/gsoc-lessons-part-1-application-period/"&gt;the first part about the application
process&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;This will explore an interesting anecdote I heard about the
interaction between applicants from another organization that, on
reflection, seemed to resonate somewhat with what I had seen in my
corner of the Mozilla&amp;nbsp;community.&lt;/p&gt;
&lt;p&gt;The organization these students were applying to required patches to
be fixed for a student&amp;#8217;s application to be accepted (as discussed in my
previous post). For a particular project there existed multiple highly
motivated and skilled students, but only one slot. Thus, a &amp;#8220;patch race&amp;#8221;
of sorts occurred where the students competed by continually providing
more patches that were increasingly complex. (Note that this wasn&amp;#8217;t a in
response to a challenge from community members, it was a spontaneous
situation.) Once a single student started to submit extra patches the
other students felt they must also submit more patches to be considered
equal/superior (hence my allusion to an &amp;#8220;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Arms_race#Nuclear_arms_race"&gt;arms race&lt;/a&gt;&amp;#8220;).
Interestingly, they would also sometimes work on the same bug in a sort
of race to see who could fix it&amp;nbsp;first.&lt;/p&gt;
&lt;p&gt;There&amp;#8217;s a couple things I took away from&amp;nbsp;this:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Great, the project just had a lot of things&amp;nbsp;fixed!&lt;/li&gt;
&lt;li&gt;The students were investing escalating amounts of time &lt;em&gt;during the
application phase&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;The students were not working in an open&amp;nbsp;manner.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I won&amp;#8217;t really expand much more about the first point, it&amp;#8217;s always
good to fix&amp;nbsp;things.&lt;/p&gt;
&lt;p&gt;Although submitting patches might showcase a student&amp;#8217;s skill, it also
relates to how much time the student is willing and able to put into the
application period. This, in particular, matters since different areas
of the world end their school year at different times. A student that
has already finished his semester during the application period may have
a lot of free time to attempt to get a GSoC slot (but will most likely
not have as much time during the actual summer!) This something that
mentors should keep in mind while reviewing&amp;nbsp;applications.&lt;/p&gt;
&lt;p&gt;A downside of increasing amounts of time invested is that the
rejection is that much harder for both the mentor (especially if the
student is now part of the community!), as well as for the student who
has now vested a large amount of time in the&amp;nbsp;project.&lt;/p&gt;
&lt;p&gt;The realization that actually upset me, however, is that these
students were not working in an open manner! Instead of collaborating,
they were competing! To me, this would set off a very poor tone for the
rest of GSoC. In fact, one of the biggest challenges I&amp;#8217;ve had with GSoC
students is getting them to work in the open (i.e. &amp;#8220;show me the code&amp;#8221;,
anyone in &lt;a class="reference external" href="irc://irc.mozilla.org/#instantbird"&gt;#instantbird&lt;/a&gt; is probably tired of hearing me say&amp;nbsp;that).&lt;/p&gt;
&lt;p&gt;At this point you &lt;em&gt;might&lt;/em&gt; think this is a hypothetical case I made up!
Upon letting it sink in and reflecting on it&amp;#8230;I realized I had actually
seen similar situations during the application periods I&amp;#8217;ve been
involved with. This year, we found a bug in Instantbird&amp;#8217;s &lt;span class="caps"&gt;IRC&lt;/span&gt; code (&lt;span class="caps"&gt;CTCP&lt;/span&gt;
quoting and dequoting); after referencing some &lt;a class="reference external" href="http://patrick.cloke.us/posts/2011/03/08/so-called-irc-specifications/"&gt;specifications&lt;/a&gt;, I was
pretty quickly able to figure out the vague areas where people should
look for a fix. A couple of GSoC students in the room started looking
into it and exhibited a greatly reduced form of the behavior I discussed
above. The students were sharing information, but were not comfortable
sharing code. Unfortunately, this led to some very vague questions which
I was unable to answer (or answered incorrectly) and led to me coining
my catchphrase from&amp;nbsp;above.&lt;/p&gt;
&lt;p&gt;I by no means think this reflects poorly on our students! I think this
is some what natural and expected for most students unfamiliar with open
development. (Extrapolating from my experiences in school&amp;#8230;) Students
generally work individually (or in small groups) on projects and are
directly competing for grades (at least if the course is graded on a
curve). This would foster a sense of competition as opposed to
cooperation! Luckily the students working with us understood (with very
little prompting, I might add!) that we&amp;#8217;d prefer they work together and
help each other. We were able to successfully fix the dequoting bug
(which then caused a bug in the quoting code to be&amp;nbsp;visible&amp;#8230;sigh&amp;#8230;).&lt;/p&gt;
&lt;p&gt;My &lt;strong&gt;short take away&lt;/strong&gt; from all this: remember that students are not
yet a community and they&amp;#8217;re competing with each other until they&amp;#8217;ve been
accepted. (And that they&amp;#8217;re used to competing, e.g. homework and exams,
not collaborating!) I don&amp;#8217;t really know whether I feel the above
situation is good or bad, but it&amp;#8217;s certainly an interesting effect from
the way the GSoC process&amp;nbsp;works.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Patrick Cloke</dc:creator><pubDate>Wed, 04 Dec 2013 09:17:00 -0500</pubDate><guid isPermaLink="false">tag:patrick.cloke.us,2013-12-04:posts/2013/12/04/gsoc-lessons-part-deux-arms-race/</guid><category>community</category><category>GSoC</category><category>Mozilla</category></item><item><title>GSoC Lessons: Part 1: Application Period</title><link>http://patrick.cloke.us/posts/2013/12/02/gsoc-lessons-part-1-application-period/</link><description>&lt;p&gt;I briefly talked about &lt;a class="reference external" href="http://patrick.cloke.us/posts/2013/10/20/google-summer-of-code-mentor-summit-2013/"&gt;my experiences&lt;/a&gt; at the Google Summer of Code
2013 Mentor Summit. I&amp;#8217;ve been pretty remiss in sharing what was actually
discussed there and for that I must apologize! This will hopefully be
one of a few posts about what I learned and discussed at the&amp;nbsp;Summit.&lt;/p&gt;
&lt;p&gt;The first part I&amp;#8217;d like to talk about is the application period:
welcoming students, requirements for student applications, etc. Much of
what I say on here is just ideas I&amp;#8217;ve heard other organizations
implement (with my personal opinion on them, please don&amp;#8217;t think this
represents what Mozilla is suggesting students do, or even what I&amp;#8217;m
suggesting Mozilla should ask students to&amp;nbsp;do!)&lt;/p&gt;
&lt;p&gt;I had many separate conversations about what is required for an
application to be accepted. It seems that Mozilla is actually on the
side of one of the easier organizations to apply to. We don&amp;#8217;t (to my
knowledge) require that students have contributed at all to the
community beforehand. It is possible that some smaller communities
inside of Mozilla require more than just an application, but there does
not seem to be any rule across Mozilla. I said I wouldn&amp;#8217;t offer my
opinion above&amp;#8230;but I lied: I think Mozilla should make it clearer to
applicants what is expected of them before the&amp;nbsp;application.&lt;/p&gt;
&lt;p&gt;There seem to be a variety of things different organizations &amp;#8220;require&amp;#8221;
before accepting a student application, for&amp;nbsp;example:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A patch / pull&amp;nbsp;request&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;IRC&lt;/span&gt; / email involvement /&amp;nbsp;idling&lt;/li&gt;
&lt;li&gt;File a bug (I mean this in the &amp;#8220;Mozilla&amp;#8221; sense: an actual bug, a
feature request,&amp;nbsp;etc.)&lt;/li&gt;
&lt;li&gt;Fix a bug / make a&amp;nbsp;commit&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I think all of these have pros and cons and making any a hard and fast
rule would probably be a bad idea. Personally for Instantbird, we
greatly encourage students to idle on &lt;span class="caps"&gt;IRC&lt;/span&gt; and get to know us; and to fix
a minor bug or two or three. What I&amp;#8217;m always looking for is: use,
passion, and&amp;nbsp;skill.&lt;/p&gt;
&lt;p&gt;Asking for a &lt;strong&gt;patch / pull request&lt;/strong&gt; (I include these together since
they really just depend on how an organization accepts changes) can be a
bit intimidating for a new user. I think this can be a pretty rough
thing to ask for new contributors that might not want to share their
work publicly with a large group of people (on a mailing list, public
bug tracker, etc.) where they might be wrong. Even after being part of
the community, I find that GSoC students are often very unwilling to
publicly share code unless it&amp;#8217;s &amp;#8220;perfect&amp;#8221;, but I digress. Anyway, if
you&amp;#8217;re considering &amp;#8220;requiring&amp;#8221; this, I think it should be pretty clear
that this changeset doesn&amp;#8217;t need to be &lt;em&gt;perfect&lt;/em&gt;, it just needs to show
that the student is able to read code, understand a bug report, provide
a fix and test&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;I think it&amp;#8217;s perfect reasonable to ask students to &lt;strong&gt;idle on &lt;span class="caps"&gt;IRC&lt;/span&gt; and
join mailing lists&lt;/strong&gt;. They should definitely be trying to understand the
community before attempting to join it. It isn&amp;#8217;t just a matter of if the
community thinks the student would be a good fit, but also the student
must ensure they can fit into the&amp;nbsp;community.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Filing a bug&lt;/strong&gt; is a great way for a student to show a few different
things: they&amp;#8217;ve used your software; they&amp;#8217;ve used your software enough to
find a bug in it (and there most likely is one!); they&amp;#8217;re able to
express themselves in a clear and concise matter. If you&amp;#8217;re lucky
they&amp;#8217;ll find something that actually annoys them and fix it&amp;nbsp;themselves!&lt;/p&gt;
&lt;p&gt;I have &lt;strong&gt;fix a bug&lt;/strong&gt; listed last. You might ask how this differs from
submitting a patch&amp;#8230;and it does! Fixing a bug requires a patch to go
through whatever review process your project uses, but builds upon just
submitting a patch. My thoughts on this are pretty similar to just
submitting a patch, but it depends on how large the bug&amp;nbsp;is.&lt;/p&gt;
&lt;p&gt;Something I found interesting is that almost everyone I talked to
didn&amp;#8217;t treat their GSoC students any differently than they would treat a
new contributor to their project. They still had to prove they were
worthy of commit access, etc. Is there anything else you ask of your
students before they apply to GSoC? I&amp;#8217;d love to hear&amp;nbsp;it!&lt;/p&gt;
&lt;p&gt;Some other topics I&amp;#8217;ll hopefully find some time to write about
include: community lessons, and handling a failing student. The
community one will be very not-GSoC focused and could apply to just
trying to incorporate new contributors&amp;#8230;but I&amp;#8217;ll include it in this&amp;nbsp;series.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Patrick Cloke</dc:creator><pubDate>Mon, 02 Dec 2013 20:55:00 -0500</pubDate><guid isPermaLink="false">tag:patrick.cloke.us,2013-12-02:posts/2013/12/02/gsoc-lessons-part-1-application-period/</guid><category>community</category><category>GSoC</category><category>Mozilla</category></item><item><title>Google Summer of Code Mentor Summit 2013</title><link>http://patrick.cloke.us/posts/2013/10/20/google-summer-of-code-mentor-summit-2013/</link><description>&lt;p&gt;Not only was I lucky enough to mentor a great student for this year&amp;#8217;s
Google Summer of Code, but Mozilla asked me to represent them at the
Google Summer of Code Mentor Summit!&amp;nbsp; This was located at Google&amp;#8217;s
offices in Mountain View, California this past weekend (Friday, Oct.
18th - Sunday, Oct. 20th,&amp;nbsp;2013).&lt;/p&gt;
&lt;p&gt;Before actually heading over to the Summit, &lt;a class="reference external" href="http://mykzilla.org/"&gt;Myk Melez&lt;/a&gt; and &lt;a class="reference external" href="http://nickdesaulniers.github.io/"&gt;Nick
Desaulniers&lt;/a&gt; were kind enough to show me around the Mozilla Mountain
View office!&amp;nbsp; (Thanks to Daniel Holbert for setting that&amp;nbsp;up!)&lt;/p&gt;
&lt;p&gt;The GSoC Mentor Summit is run as an &amp;#8220;unconference&amp;#8221;, the open sessions
were chosen by conference attendees and run as discussions with no
keynote speakers.&amp;nbsp; This was an interesting experience and how good each
session was varied quite a bit by who was taking part in the discussion,
but overall it was great to hear the experiences of other projects with
their GSoC students, as well as to hear about lots of projects I had
never heard of before!&amp;nbsp; In general the session I attended were about
community building and managing GSoC students, I took lots of notes and
will digest all of this in further detail at some&amp;nbsp;point.&lt;/p&gt;
&lt;p&gt;I was able to meet lots of great people from different projects, just
a few of which were: &lt;a class="reference external" href="http://pidgin.im/"&gt;Pidgin&lt;/a&gt;, &lt;a class="reference external" href="http://www.debian.org/"&gt;Debian&lt;/a&gt;, &lt;a class="reference external" href="http://buildbot.net/"&gt;Buildbot&lt;/a&gt;, the &lt;a class="reference external" href="http://www.opendmx.net/"&gt;Open
Lighting Project&lt;/a&gt;, the &lt;a class="reference external" href="https://www.torproject.org/"&gt;Tor Project&lt;/a&gt;, &lt;a class="reference external" href="https://www.phpbb.com/%E2%80%8E"&gt;phpBB&lt;/a&gt;, etc.&amp;nbsp; Unfortunately
being from Mozilla, most people already know what you do&amp;#8230;or they think
you do at least!&amp;nbsp; Many people were surprised when I said I work on
Thunderbird and Instantbird.&amp;nbsp; I heard &amp;#8220;Thunderbird is dead&amp;#8221; at least
twenty times, which was quite disappointing that those in the open
source community don&amp;#8217;t even understand the current status of
Thunderbird.&amp;nbsp; Many were happy to hear that it is still being maintained
and developed by the community, however.&amp;nbsp; I even had some people thank
me (which I don&amp;#8217;t really deserve) for helping to continue maintain
Thunderbird!&amp;nbsp; It was great to hear things like this at the Mozilla
Summit, but it was really invigorating to hear people outside of the
Mozilla community excited that their favorite email client was still
being&amp;nbsp;developed.&lt;/p&gt;
&lt;p&gt;People were further surprised to hear that Thunderbird now includes
instant messaging / chat (since Thunderbird 15 or 17) and that there is
a Gecko based instant messaging client: Instantbird.&amp;nbsp; It seemed like
some people were excited by this and hopefully they&amp;#8217;ll try it&amp;nbsp;out!&lt;/p&gt;
&lt;p&gt;Anyway, I&amp;#8217;ve gone a little off-topic, but overall the Mentor Summit
was great and I&amp;#8217;d like to thank both Mozilla and Google for giving me
this opportunity.&amp;nbsp; If I find any really great gems in my notes I&amp;#8217;ll
write further blog posts about&amp;nbsp;them.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Patrick Cloke</dc:creator><pubDate>Sun, 20 Oct 2013 22:18:00 -0400</pubDate><guid isPermaLink="false">tag:patrick.cloke.us,2013-10-20:posts/2013/10/20/google-summer-of-code-mentor-summit-2013/</guid><category>Google</category><category>GSoC</category><category>Mozilla</category></item><item><title>JavaScript typed arrays pain</title><link>http://patrick.cloke.us/posts/2012/11/28/javascript-typed-arrays-pain/</link><description>&lt;p&gt;If you&amp;#8217;ve ever tried to deal with binary data in JavaScript you know
it isn&amp;#8217;t much fun and you usually resort to using strings lots of
charCodeAt and related functions.&amp;nbsp; &lt;a class="reference external" href="https://developer.mozilla.org/en-US/docs/JavaScript_typed_arrays"&gt;Typed arrays&lt;/a&gt; are supposed to solve
this though!&amp;nbsp; The typed array &lt;span class="caps"&gt;API&lt;/span&gt; consists of creating a buffer of bytes
(called an &lt;a class="reference external" href="https://developer.mozilla.org/en-US/docs/JavaScript_typed_arrays/ArrayBuffer"&gt;ArrayBuffer&lt;/a&gt;) and then manipulating those bytes via
different views (&lt;a class="reference external" href="https://developer.mozilla.org/en-US/docs/JavaScript_typed_arrays/ArrayBufferView"&gt;ArrayBufferView&lt;/a&gt;s).&amp;nbsp; You can have multiple views of
the same buffer, starting at different offsets, of different lengths and
types&amp;#8230;which is all neat from a technical point of view, but is it
really useful?&amp;nbsp; It is kind of nice working with the views as if they
were normal arrays&amp;nbsp;though.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve been playing with these ArrayBuffers quite a bit as I&amp;#8217;m working
on an implementation of the &lt;a class="reference external" href="http://en.wikipedia.org/wiki/OSCAR_protocol"&gt;&lt;span class="caps"&gt;OSCAR&lt;/span&gt; protocol&lt;/a&gt; (used for &lt;a class="reference external" href="http://en.wikipedia.org/wiki/AOL_Instant_Messenger"&gt;&lt;span class="caps"&gt;AOL&lt;/span&gt; Instant
Messenger&lt;/a&gt; and &lt;a class="reference external" href="http://en.wikipedia.org/wiki/ICQ"&gt;&lt;span class="caps"&gt;ICQ&lt;/span&gt;&lt;/a&gt;) in the chat backend (for Instantbird /
Thunderbird).&amp;nbsp; (As an aside, the &lt;span class="caps"&gt;OSCAR&lt;/span&gt; protocol Wikipedia page has
surprisingly good documentation of some of the underlying data
structures of the protocol&amp;#8230;)&amp;nbsp; I started by writing some test code
using ArrayBuffers and views, which have been around a while: since
Gecko 2.0 in fact!&amp;nbsp; I quickly ran into some tedious issues with
repetitive code such&amp;nbsp;as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt; * A TLV (Type, Length and Value) data structure:&lt;/span&gt;
&lt;span class="cm"&gt; *  Unsigned Short  type    Describes what the value represents.&lt;/span&gt;
&lt;span class="cm"&gt; *  Unsigned Short  length  The length of the data block.&lt;/span&gt;
&lt;span class="cm"&gt; *  Bytes           value   The raw payload.&lt;/span&gt;
&lt;span class="cm"&gt; *&lt;/span&gt;
&lt;span class="cm"&gt; * The overall length of a TlvBlock is length + 4.&lt;/span&gt;
&lt;span class="cm"&gt; *&lt;/span&gt;
&lt;span class="cm"&gt; * The inputs to this are:&lt;/span&gt;
&lt;span class="cm"&gt; *  aType    The type of the TLV Block.&lt;/span&gt;
&lt;span class="cm"&gt; *  aValue   An ArrayBuffer containing the data.&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;TlvBlock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;aValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ArrayBuffer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aValue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;byteLength&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;// The first two bytes are unsigned shorts.&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;view&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Uint16Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;view&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;aType&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;view&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;aValue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;byteLength&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// The rest just gets the data copied into it.&lt;/span&gt;
  &lt;span class="nx"&gt;view&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Uint8Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;view&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Uint8Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aValue&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This actually illustrates two annoying issues I&amp;nbsp;have:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;I end up with extra lines of code defining a new view every time I
switch data&amp;nbsp;types.&lt;/li&gt;
&lt;li&gt;There&amp;#8217;s no simple way to copy an ArrayBuffer into a part of an
ArrayBuffer. In the above example I create a Uint8Array view of the
target location, a Uint8Array view of the source location and then
set the source to the target. Seems simple once you figure it out,
but it took a while to figure&amp;nbsp;out.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;(As an aside, some of you might find the following function helpful,
it is essentially a &lt;a class="reference external" href="http://en.cppreference.com/w/cpp/string/byte/memcpy"&gt;memcpy&lt;/a&gt; for ArrayBuffers&amp;#8230;this isn&amp;#8217;t really
tested heavily at all,&amp;nbsp;however.)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt; * aTarget / aSource are ArrayBuffers&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;copyBytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aTarget&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;aSource&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;aTargetOffset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;aSourceOffset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;aLength&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;aSource&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;byteLength&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// The rest just gets the data copied into it.&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;view&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Uint8Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aTarget&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;aTargetOffset&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;view&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Uint8Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aSource&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;aSourceOffset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;aLength&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class="caps"&gt;OK&lt;/span&gt;, so typed arrays seem good, but kind of annoying, right?
Wrong&amp;#8230;the &lt;span class="caps"&gt;OSCAR&lt;/span&gt; protocol is a &amp;#8220;network order&amp;#8221; protocol (aka it is big
endian). At this point you&amp;#8217;re probably thinking &amp;#8220;&lt;span class="caps"&gt;OK&lt;/span&gt;, so the ArrayBuffer
constructor must take an endianess flag!&amp;#8221;&amp;nbsp; Wrong, it does no such
thing.&amp;nbsp; &amp;#8220;Hmmm&amp;#8230;Well do the ArrayBufferViews take an endianess flag?&amp;#8221;
Nope, wrong again.&amp;nbsp; The only way to specify the endianess of the data is
to use a &lt;a class="reference external" href="https://developer.mozilla.org/en-US/docs/JavaScript_typed_arrays/DataView"&gt;DataView&lt;/a&gt;, a slightly different interface to the underlying
bytes.&amp;nbsp; It offers an &lt;span class="caps"&gt;API&lt;/span&gt; to individually set different data elements via
their offset and endianess.&amp;nbsp; (If you&amp;#8217;re too lazy to read the
documentation all the way through, DataView assumes big endian: makes my
life&amp;nbsp;easier!)&lt;/p&gt;
&lt;p&gt;For the curious, JavaScript typed arrays use the system endianess,
which in my opinion is pretty much useless (at least if you plan on
sharing data) since you can never guarantee the endianess to be either
big or little endian.&amp;nbsp; (The fun part is that this isn&amp;#8217;t even documented,
I found it on &lt;a class="reference external" href="http://stackoverflow.com/questions/7869752/javascript-typed-arrays-and-endianness"&gt;Stack Overflow&lt;/a&gt; and&amp;nbsp;verified.)&lt;/p&gt;
&lt;p&gt;So, in summary&amp;#8230;if you plan on networking at all with ArrayBuffers,
don&amp;#8217;t use ArrayBufferViews, use DataViews.&amp;nbsp; (Although Uint8Arrays and
Int8Arrays should work&amp;nbsp;fine!)&lt;/p&gt;
&lt;p&gt;And to not rant the &lt;em&gt;entire&lt;/em&gt; time, working with typed arrays certainly
does beat strings +&amp;nbsp;charCodeAt!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Patrick Cloke</dc:creator><pubDate>Wed, 28 Nov 2012 23:11:00 -0500</pubDate><guid isPermaLink="false">tag:patrick.cloke.us,2012-11-28:posts/2012/11/28/javascript-typed-arrays-pain/</guid><category>Instantbird</category><category>Mozilla</category><category>OSCAR</category><category>Thunderbird</category><category>Wat</category></item><item><title>IRC Auto-Performs</title><link>http://patrick.cloke.us/posts/2012/06/11/irc-auto-performs/</link><description>
&lt;p&gt;There have been a &lt;a class="reference external" href="https://bugzilla.mozilla.org/show_bug.cgi?id=742675"&gt;few&lt;/a&gt; &lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=1101"&gt;requests&lt;/a&gt; to support “auto-performs”
(sending commands to the &lt;span class="caps"&gt;IRC&lt;/span&gt; server after connection that the user types
into a box or whatever). Personally I find this to be:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;A fairly awful user experience.&lt;/li&gt;
&lt;li&gt;Confusing to new users.&lt;/li&gt;
&lt;li&gt;Unnecessary.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I additionally don’t like this idea since it requires us to have
commands for all the common tasks you’d want to do in an auto-perform
(or support sending absolutely raw messages to the server, which we
actually do already in the /quote command). Essentially what I just
described is writing our own scripting language…that seems pointless
(and frankly, I have better things to do). I’m hoping to convince you
with this post (and maybe a series of posts) that auto-performs aren’t
necessary and a trivial restartless extension can replace them.&lt;/p&gt;
&lt;div class="section" id="design"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id1"&gt;Design&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Part of the desire to &lt;a class="reference external" href="http://patrick.cloke.us/posts/2011/04/30/why-rewrite-irc-protocol-plugin-part-2/"&gt;replace the libpurple &lt;span class="caps"&gt;IRC&lt;/span&gt; protocol plugin&lt;/a&gt;
with a new JavaScript one built specifically for Instantbird (which is
also now used in Thunderbird!) was to make the protocol fully
extensible. There are &lt;a class="reference external" href="http://patrick.cloke.us/posts/2011/03/08/so-called-irc-specifications/"&gt;many revisions and unofficial extensions to &lt;span class="caps"&gt;IRC&lt;/span&gt;&lt;/a&gt;
and we might not necessarily want to support them all (especially if
they only apply to a single network). Allowing all parts of the protocol
implementation to be touched and extended seemed like a great way to
handle this.&lt;/p&gt;
&lt;p&gt;Initially I tried to do this by making the &lt;span class="caps"&gt;IRC&lt;/span&gt; account into an &lt;span class="caps"&gt;XPCOM&lt;/span&gt;
component (well it is one already, it’s an prplIAccount, but I meant an
&lt;span class="caps"&gt;IRC&lt;/span&gt; specific one: implementing ircIAccount, if you will). Unfortunately,
this seemed to have a lot of overhead and got complicated extremely
quickly. Anything I’d want to touch from a message handler (wait,
wait…what’s a handler?! I’ll get back to that) would need to have
methods written and exposed to access internal data of the
account…does that sound very extensible to you? Well, it doesn’t to me…&lt;/p&gt;
&lt;p&gt;Onto design two! (Well actually my first design…) Lots of JavaScript
objects! The entire protocol is implemented as a set of JavaScript
objects and the handlers directly touch and modify the account’s data
(of course there’s methods for abstraction, etc.). This means that an
extension has absolutely &lt;span class="caps"&gt;FULL&lt;/span&gt; access to every about an account…this
also means an extension could seriously mess with and cause the protocol
to stop working or do really crazy things, etc. Unfortunately there
isn’t really a way to avoid that. Hopefully people write good code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="messages"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id2"&gt;Messages&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I’m going to go into an aside about messages right now, even though it
doesn’t quite seem relevent yet. It will. &lt;span class="caps"&gt;IRC&lt;/span&gt; has a bunch of
sub-protocols embedded within the &lt;span class="caps"&gt;IRC&lt;/span&gt; protocol (see the link above about
unofficial extensions). We attempt to parse all the string messages and
make pretty JavaScript objects out of them. I’ve actually identified
five (yes, count that: five) different sub-“protocols” within &lt;span class="caps"&gt;IRC&lt;/span&gt; that
we deal:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;span class="caps"&gt;IRC&lt;/span&gt; itself (i.e. &lt;a class="reference external" href="http://tools.ietf.org/html/rfc1459"&gt;&lt;span class="caps"&gt;RFC&lt;/span&gt; 1459&lt;/a&gt; / &lt;a class="reference external" href="http://tools.ietf.org/html/rfc2812"&gt;&lt;span class="caps"&gt;RFC&lt;/span&gt; 2812&lt;/a&gt; / various numeric extensions)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.irchelp.org/irchelp/rfc/ctcpspec.html"&gt;&lt;span class="caps"&gt;CTCP&lt;/span&gt; (the Client-to-Client Protocol)&lt;/a&gt;,embedded in &lt;span class="caps"&gt;PRIVMSG&lt;/span&gt; commands
of &lt;span class="caps"&gt;IRC&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;DCC&lt;/span&gt; (Direct Client-to-Client), a subprotocol of &lt;span class="caps"&gt;CTCP&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://tools.ietf.org/html/draft-brocklesby-irc-isupport-03"&gt;&lt;span class="caps"&gt;ISUPPORT&lt;/span&gt;&lt;/a&gt; (also known as Numeric 005), a method of negotiating
capabilities between a client and server&lt;/li&gt;
&lt;li&gt;And finally, handling of &lt;span class="caps"&gt;IRC&lt;/span&gt; Services (there’s a lot of them and no
specification, but we treat them specially)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Briefly what happens when we receive a raw message over the wire, we
create an &lt;a class="reference external" href="http://hg.instantbird.org/instantbird/file/b8d8b6e60aef/chat/protocols/irc/irc.js#l14"&gt;ircMessage object out of it using a variety of regular
expressions&lt;/a&gt;. This object has a variety of fields (see the link for
details), including the command, who sent the message and the parameters.&lt;/p&gt;
&lt;p&gt;If the message is identified as a &lt;span class="caps"&gt;CTCP&lt;/span&gt; message, we then morph the
ircMessage into a &lt;a class="reference external" href="http://hg.instantbird.org/instantbird/file/b8d8b6e60aef/chat/protocols/irc/ircCTCP.jsm#l44"&gt;CTCPMessage&lt;/a&gt;, which can be morphed into a
&lt;a class="reference external" href="http://hg.instantbird.org/instantbird/file/b8d8b6e60aef/chat/protocols/irc/ircDCC.jsm#l20"&gt;DCCMessage&lt;/a&gt;. Additionally, a 005 reply can be parsed into a
&lt;a class="reference external" href="http://hg.instantbird.org/instantbird/file/b8d8b6e60aef/chat/protocols/irc/ircISUPPORT.jsm#l22"&gt;isupportMessage&lt;/a&gt;. And last, but not least, a received &lt;span class="caps"&gt;PRIVMSG&lt;/span&gt; can also
be parsed into a &lt;a class="reference external" href="http://hg.instantbird.org/instantbird/file/b8d8b6e60aef/chat/protocols/irc/ircServices.jsm#l19"&gt;ServiceMessage&lt;/a&gt;. Each of these extends the &lt;span class="caps"&gt;IRC&lt;/span&gt;
message without destroying information. (Yes, I’m realizing now that my
choice of whether to use capitals is all messed up…)&lt;/p&gt;
&lt;p&gt;Well, why do we care…? By preparsing the strings into objects (as
defined by any “specifications” that exist), we keep extensions from
having to parse messages over and over again from strings.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="handlers"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;Handlers&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A handler is simply what I call the object that contains the methods
to deal with an incoming message. Pretty much, you get to say “Only send
me &lt;span class="caps"&gt;ISUPPORT&lt;/span&gt; messages!” or “Only send me &lt;span class="caps"&gt;CTCP&lt;/span&gt; messages!” and voila, you
only get that type of message. Each message type has a field that is
used to choose the method to run (for the &lt;span class="caps"&gt;IRC&lt;/span&gt; messages, the “command”,
for &lt;span class="caps"&gt;CTCP&lt;/span&gt; the “&lt;span class="caps"&gt;CTCP&lt;/span&gt; command”, &lt;span class="caps"&gt;ISUPPORT&lt;/span&gt; the “parameter”, etc.) This sounds
a lot more complicated than it is, I think a brief &lt;a class="reference external" href="https://bitbucket.org/clokep/irc-extras/src/6f778f17172a/example/bootstrap.js"&gt;example&lt;/a&gt; is in order:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;ircSimpleExample&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// The name here is really only used in error messages.&lt;/span&gt;
  &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"IRC Simple Example"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="c1"&gt;// Slightly above the default priority so we run before the main IRC handler.&lt;/span&gt;
  &lt;span class="nx"&gt;priority&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ircHandlers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DEFAULT_PRIORITY&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="c1"&gt;// Run this for all accounts (note that the 'this' object in this method is&lt;/span&gt;
  &lt;span class="c1"&gt;// the JavaScript account object.&lt;/span&gt;
  &lt;span class="nx"&gt;isEnabled&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

  &lt;span class="c1"&gt;// The commands we want to handle. For each of these, the account object is&lt;/span&gt;
  &lt;span class="c1"&gt;// bound to 'this' and the single parameter is of the type that you've&lt;/span&gt;
  &lt;span class="c1"&gt;// registered your handle.&lt;/span&gt;
  &lt;span class="nx"&gt;commands&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"001"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aMessage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// At the 001 response we've successfully connected to the server.&lt;/span&gt;
      &lt;span class="c1"&gt;// Send an IDENTIFY command to NickServ.&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"PRIVMSG"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"NickServ"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"IDENTIFY &amp;lt;your password&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

      &lt;span class="c1"&gt;// Return false so the default handler still runs.&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Just like that we’ve designed a handler! Whenever the 001 method is
received from the server, this function will run and attempt to identify
with the NickServ (of course this could use a bit more security on it,
but it’s to demonstrate the possibilities). (The sendMessage function
takes the command to send and an array of parameters to send.)&lt;/p&gt;
&lt;p&gt;As this is already a long post, I think I’ll cut this off now and
continue this at another time, but I hope I’m beginning to convince you
that allowing directy access to the account and protocol implementation
is a more powerful (and even simpler in many ways, in my opinion)
alternative to “auto-performs”. The one major downside I see to this, is
that it requires a bit more understanding of the actual protocol level
implementation, I don’t feel that knowing you need to use “&lt;span class="caps"&gt;PRIVMSG&lt;/span&gt;” as a
command instead of /msg is a huge issue, however.&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Patrick Cloke</dc:creator><pubDate>Mon, 11 Jun 2012 22:25:00 -0400</pubDate><guid isPermaLink="false">tag:patrick.cloke.us,2012-06-11:posts/2012/06/11/irc-auto-performs/</guid><category>Instantbird</category><category>IRC</category><category>Mozilla</category></item><item><title>Shared Lightning profile across Linux and Windows</title><link>http://patrick.cloke.us/posts/2011/07/08/shared-lightning-profile-across-linux/</link><description>&lt;p&gt;In &lt;a class="reference external" href="irc://irc.mozilla.org/calendar"&gt;#calendar on Mozilla &lt;span class="caps"&gt;IRC&lt;/span&gt;&lt;/a&gt; the past few days a user has been
asking about using a shared profile on Thunderbird between Linux and
Windows (&amp;#8220;shared&amp;#8221; meaning a dual boot system of Linux/Windows, but not
at the same time, obviously).&amp;nbsp; Generally this isn&amp;#8217;t a big deal &lt;span class="caps"&gt;UNLESS&lt;/span&gt;
you have a binary extension, in which case you&amp;#8217;d have to reinstall the
extension every time! That&amp;#8217;s awfully&amp;nbsp;lame.&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;BUT&lt;/span&gt; there should be a way to make a unified extension for all
operating systems.&amp;nbsp; In fact &lt;a class="reference external" href="https://wiki.mozilla.org/User:Ssitter/UnifiedLightning"&gt;ssitter had written an article to do
that&lt;/a&gt;.&amp;nbsp; It needs some updating to account for the Mozilla 2 &lt;span class="caps"&gt;XPCOM&lt;/span&gt;
changes,&amp;nbsp;however.&lt;/p&gt;
&lt;p&gt;The steps are mostly the same, with some&amp;nbsp;added.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Download whatever versions you want (&lt;a class="reference external" href="http://releases.mozilla.org/pub/mozilla.org/calendar/lightning/releases/1.0b4/"&gt;perhaps 1.0b4&lt;/a&gt;?).&lt;/li&gt;
&lt;li&gt;Unzip them all and choose which one will be your &amp;#8220;unified&amp;#8221;&amp;nbsp;version.&lt;/li&gt;
&lt;li&gt;Find the &amp;lt;em:targetPlatform&amp;gt; section in the install.rdfs and include
all the necessary&amp;nbsp;ones.&lt;/li&gt;
&lt;li&gt;Find the libcalbasecomps.* (where * is dll, dylib, so, etc. for
your platform) inside the components&amp;nbsp;directories.&lt;/li&gt;
&lt;li&gt;Copy the libraries together into one&amp;nbsp;directory.&lt;/li&gt;
&lt;li&gt;Copy the lines from each components.manifest together into one&amp;nbsp;manifest.&lt;/li&gt;
&lt;li&gt;For some systems you&amp;#8217;ll need to specify the &lt;span class="caps"&gt;ABI&lt;/span&gt; (and possibly change
the path), note that the &lt;span class="caps"&gt;ABI&lt;/span&gt; is just what was inside the&amp;nbsp;&amp;lt;em:targetPlatform&amp;gt;.&lt;/li&gt;
&lt;li&gt;Rezip this up into an &lt;span class="caps"&gt;XPI&lt;/span&gt; and you should be good to&amp;nbsp;go!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In my test I ended up with an &lt;span class="caps"&gt;XPI&lt;/span&gt; that was approximately 10% bigger
after combining Mac (x86 and x64), Linux (x86 and x64), Win32, Solaris
Sparc and Solaris x86.&amp;nbsp; Why is this not done by default?&amp;nbsp; Probably just
cause no one has done it&amp;#8230;there is a &lt;a class="reference external" href="https://bugzilla.mozilla.org/show_bug.cgi?id=352543"&gt;bug about it&lt;/a&gt; though.&amp;nbsp; One issue
that might be encountered using this method is pre-processing of some
script files (as is discussed in that big) but hopefully it should
&amp;#8220;mostly&amp;#8221; work.&amp;nbsp; (Note that this is mostly&amp;nbsp;untested.)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; I should also mention that you would need to do something
similar with the themes folders if they differ dramatically (it seems
there&amp;#8217;s &lt;a class="reference external" href="http://mxr.mozilla.org/comm-central/source/calendar/lightning/themes/"&gt;just two&lt;/a&gt;: winstripe and pinstripe: i.e. Windows &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; Mac; Linux
and Solaris most likely also use&amp;nbsp;winstripe).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Patrick Cloke</dc:creator><pubDate>Fri, 08 Jul 2011 20:46:00 -0400</pubDate><guid isPermaLink="false">tag:patrick.cloke.us,2011-07-08:posts/2011/07/08/shared-lightning-profile-across-linux/</guid><category>Lightning</category><category>Mozilla</category></item><item><title>Compiling Instantbird</title><link>http://patrick.cloke.us/posts/2011/05/16/compilling-instantbird/</link><description>
&lt;p&gt;In the past I’ve tried to compile a few different programs that use
the Mozilla toolkit to various levels of success.  I’ve tried to compile
Thunderbird, Songbird and Instantbird at various points.  I got
Thunderbird to compile, but it only worked sporadically (although I
think that was Firefox moving so fast that Thunderbird couldn’t keep
up), Songbird I gave up on rather quickly and Instantbird I’ve tried a
few times.&lt;/p&gt;
&lt;p&gt;Last summer I had Instantbird compiling on my old laptop (a Lenovo
T60), which is &amp;gt;5 years old at this point and has had the heatsink / fan
replaced twice — a known issue with that model laptop.  Needless to
say, that laptop didn’t like compiling something on Windows that took
approximately an hour with a large number of reads and writes to the
hard drive.  This mixed with it being an old dual core + a 5400 &lt;span class="caps"&gt;RPM&lt;/span&gt;
meant I’d be waiting a &lt;span class="caps"&gt;LONG&lt;/span&gt; time for my code to compile.  I got a
Thinkpad X201 this past summer, so I finally got around to setting up a
development environment on it and was able to get Instantbird to compile
fully today.  I’ve outlined the steps I’ve followed: kind of to mirror
the &lt;a class="reference external" href="https://developer.mozilla.org/En/Simple_Thunderbird_build"&gt;Simple Thunderbird Build&lt;/a&gt; page on &lt;span class="caps"&gt;MDC&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;I’ve done this using Microsoft Windows 7 Professional (64-bit) with
Service Pack 1. (4.00 &lt;span class="caps"&gt;GB&lt;/span&gt; of &lt;span class="caps"&gt;RAM&lt;/span&gt;, Intel Core i7 M620 2.67 GHz).
Throughout these steps, the defaults locations and options are used in
the installers.&lt;/p&gt;
&lt;div class="section" id="build-requirements"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id2"&gt;Build Requirements:&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="visual-studio-express"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id3"&gt;Visual Studio Express:&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;We need to install Visual Studio Express, specifically &lt;span class="caps"&gt;VC8&lt;/span&gt; (2005) with
Service Pack 1.  (Mozilla compiles with &lt;span class="caps"&gt;VC9&lt;/span&gt; and &lt;span class="caps"&gt;VC10&lt;/span&gt; to various degrees,
but it seems libpurple only compiles with &lt;span class="caps"&gt;VC8&lt;/span&gt;, also this is what’s on
the Instantbird buildbot, so I like having the same version.)  I
couldn’t find this on Microsoft’s website but I found it on &lt;a class="reference external" href="http://www.softpedia.com/get/Programming/Other-Programming-Files/Microsoft-Visual-C-Toolkit.shtml"&gt;Softpedia&lt;/a&gt;
(which is a legitimate site).  Anyway, download the installer and
install it (which will download the actual compiler from Microsoft),
ensure that you also install the &lt;span class="caps"&gt;IDE&lt;/span&gt; (which is checked by default).&lt;/p&gt;
&lt;p&gt;This will only install &lt;span class="caps"&gt;VC8&lt;/span&gt;, the initial release.  We also need to
install &lt;a class="reference external" href="http://www.microsoft.com/downloads/en/details.aspx?FamilyID=7b0b0339-613a-46e6-ab4d-080d4d4a8c4e"&gt;Service Pack 1&lt;/a&gt;.  I personally did this using Windows Update,
but one of the installers from there should also work.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="microsoft-windows-sdk"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id4"&gt;Microsoft Windows &lt;span class="caps"&gt;SDK&lt;/span&gt;:&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Specifically we need the &lt;a class="reference external" href="http://www.microsoft.com/downloads/en/details.aspx?FamilyID=c17ba869-9671-4330-a63e-1fd44e0e2505&amp;amp;displaylang=en"&gt;Windows 7 &lt;span class="caps"&gt;SDK&lt;/span&gt;&lt;/a&gt; (for Jumplist, Aero, etc.
support).  Download and install the &lt;span class="caps"&gt;SDK&lt;/span&gt;, this one took a while for me to
install.  I ate dinner while it was installing (pasta, if you’re curious
— I already had sauce made).&lt;/p&gt;
&lt;p&gt;There’s a linker error when using &lt;span class="caps"&gt;VC8&lt;/span&gt; and the Windows 7 &lt;span class="caps"&gt;SDK&lt;/span&gt;, so we’ll
need to install a &lt;a class="reference external" href="http://support.microsoft.com/kb/949009/"&gt;hotfix&lt;/a&gt;for that (I tried without it and I ran into
the issue).  I had to download the “VS80sp1-&lt;span class="caps"&gt;KB949009&lt;/span&gt;-&lt;span class="caps"&gt;IA64&lt;/span&gt;-&lt;span class="caps"&gt;INTL&lt;/span&gt;.exe”
version (there’s also an X86 and an X64 version).  Choose the one that works.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="microsoft-macro-assembler"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id5"&gt;Microsoft Macro Assembler:&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In order to properly assemble the code we need to &lt;a class="reference external" href="http://www.microsoft.com/downloads/en/details.aspx?familyid=7A1C9DA0-0510-44A2-B042-7EF370530C64&amp;amp;displaylang=en"&gt;install &lt;span class="caps"&gt;MASM&lt;/span&gt;&lt;/a&gt;
(which I think will eventually be included in MozillaBuild, but it isn’t
currently).  Again, just install it with the defaults.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="mozillabuild"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id6"&gt;MozillaBuild:&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Almost there, I promise.  In order to get a *nix type shell to run
make, etc. in we’ll use a package from Mozilla that includes &lt;span class="caps"&gt;MSYS&lt;/span&gt;, make,
Mercurial, etc.  Download and &lt;a class="reference external" href="http://ftp.mozilla.org/pub/mozilla.org/mozilla/libraries/win32/MozillaBuildSetup-Latest.exe"&gt;install MozillaBuild&lt;/a&gt;, the latest should
work fine.&lt;/p&gt;
&lt;p&gt;Now, an unknown step: you might require the &lt;a class="reference external" href="http://www.microsoft.com/downloads/en/details.aspx?FamilyID=a5c84275-3b97-4ab7-a40d-3802b2af5fc2&amp;amp;displaylang=en"&gt;Microsoft Visual C++ 2008
&lt;span class="caps"&gt;SP1&lt;/span&gt; Redistributable Package&lt;/a&gt;.  I don’t know if you need this or not
since I &lt;em&gt;already&lt;/em&gt; had it, most likely from a previous program I’ve installed.&lt;/p&gt;
&lt;p&gt;We should be ready to build now pretty much.  For some more
information for this stuff you can check out the Mozilla Developer
Network pages I used to get this information: &lt;a class="reference external" href="https://developer.mozilla.org/En/Developer_Guide/Build_Instructions"&gt;Build Instructions&lt;/a&gt;,
&lt;a class="reference external" href="https://developer.mozilla.org/En/Developer_Guide/Build_Instructions/Windows_Prerequisites"&gt;Windows Build Prerequisites&lt;/a&gt; and &lt;a class="reference external" href="https://developer.mozilla.org/cn/VC8_Build_Instructions"&gt;&lt;span class="caps"&gt;MSVC8&lt;/span&gt; Build Instructions&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="checkout-the-code"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id7"&gt;Checkout the Code:&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We need to checkout the code.  I originally checked out the code with
TortoiseHg (which is what I normally use), but the version of Mercurial
included is significantly greater than the one included in MozillaBuild
and this caused me issues later on.  Thus, we’ll check out the code on
the command line.  Start by launching the bash shell, which is at
C:\mozilla-build\start-msvc8.bat (don’t use the x64 version).  There’s
a version here which corresponds to each version of &lt;span class="caps"&gt;VS&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Once this finishes loading you’ll be in the home directory (which is
in the root of your user’s documents and settings folder, i.e. for me:
C:\Users\clokep).  You’ll want to do the following:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
hg clone https://hg.instantbird.org/instantbird
&lt;/pre&gt;
&lt;p&gt;This might take a few minutes depending on how good your internet
connection is.  (The Instantbird source isn’t &lt;span class="caps"&gt;THAT&lt;/span&gt; big though, it
shouldn’t take too long.)&lt;/p&gt;
&lt;p&gt;Then we’ll need to change into the instantbird directory that was just
created and download the Mozilla source code:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
cd instantbird
python client.py checkout
&lt;/pre&gt;
&lt;p&gt;Now this step?  This one is gonna take a while.  It took me like a
couple of hours.  It pulls the Mozilla source code, which is large and
has many changesets.  Just let it go, it’ll give you progress
occasionally (changes, manifests, files, etc.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id8"&gt;Compiling Instantbird:&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We need to set up the options we want to build with.  These are
read from a .mozconfig (don’t miss the “.” in the front!).  The contents
of the .mozconfig that worked for me are:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
ac_add_options --enable-application=instantbird
mk_add_options MOZ_OBJDIR=@TOPSRCDIR@/objdir-ib-release
ac_add_options --disable-accessibility
&lt;/pre&gt;
&lt;p&gt;The first option says to build Instantbird, the second gives an output
directory and the third &lt;a class="reference external" href="https://developer.mozilla.org/en/atlbase.h"&gt;disables accessibility&lt;/a&gt; (not really sure why
we need to do this, but we’ll get that error at that link otherwise).&lt;/p&gt;
&lt;p&gt;Finally (back in the bash shell) type:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
make -f client.mk build
&lt;/pre&gt;
&lt;p&gt;Now sit back and relax.  My build took about an hour to finish, maybe
a bit less — I wasn’t fully paying attention.  Once it’s done you
should see something like:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Processed 1 file, writing output:

Output:
"c:\\Users\\clokep\\instantbird\\objdir-ib-release\\instantbird\\installer\\windows\\instgen\\helper.exe"
Install: 2 pages (128 bytes), 1 section (16416 bytes), 2579
instructions (72212 bytes), 369 strings (10198 bytes), 1 language table (230 bytes).
Uninstall: 5 pages (320 bytes),
1 section (16416 bytes), 2063 instructions (57764 bytes), 388 strings
(10828 bytes), 1 language table (314 bytes).
Datablock optimizer saved 123940 bytes (~17.6%).
Using zlib compression.
EXE header size:               63488 / 39424 bytes
Install code:                  99564 / 99560 bytes
Install data:                 118002 / 241950 bytes
Uninstall code+data:          398654 / 398646 bytes
CRC (0x062AF3F5):                  4 / 4 bytes
Total size:                   679712 / 779584 bytes (87.1%)
c:/Users/clokep/instantbird/objdir-ib-release/mozilla/config/nsinstall.exe -D ../../../mozilla/dist/bin/uninstall
cp instgen/helper.exe ../../../mozilla/dist/bin/uninstall
make[5]: Leaving directory `/c/Users/clokep/instantbird/objdir-ib-release/instantbird/installer/windows'
make[4]: Leaving directory `/c/Users/clokep/instantbird/objdir-ib-release/instantbird'
make[3]: Leaving directory `/c/Users/clokep/instantbird/objdir-ib-release'
make[2]: Leaving directory `/c/Users/clokep/instantbird/objdir-ib-release'
make[1]: Leaving directory `/c/Users/clokep/instantbird/objdir-ib-release'
&lt;/pre&gt;
&lt;p&gt;Now, to test that the build actually worked we can browse to the
compiled executable and run it:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
cd objdir-ib-release/mozilla/dist/bin/instantbird.exe -P dev -no-remote
&lt;/pre&gt;
&lt;p&gt;The -P option specifies a profile name (dev), the second option
(-no-remote) allows you to run a second Instantbird instance (since I
assume you use Instantbird to &lt;span class="caps"&gt;IM&lt;/span&gt;…you probably want to be able to run a
second one, if you don’t use it…shame on you. Try not to close the
wrong Instantbird when you’re working on stuff).&lt;/p&gt;
&lt;p&gt;Hopefully this will help someone else get started on hacking
Instantbird.  There’s other good ways you can hack too if your computer
can’t handle compiling, including unpacking omni.jar.&lt;/p&gt;
&lt;p&gt;One last tidbit is to possibly add the option to your .mozconfig:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
--enable-chrome-format=flat
&lt;/pre&gt;
&lt;p&gt;This will not package anything in JARs (which pretty much just get in
the way while developing).  See &lt;a class="reference external" href="https://developer.mozilla.org/en/JAR_Packaging"&gt;here&lt;/a&gt; for more info.&lt;/p&gt;
&lt;p&gt;Edit: Fixed the path to the executable thanks to Florian. And fixed a
spelling error in the title.&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Patrick Cloke</dc:creator><pubDate>Mon, 16 May 2011 21:30:00 -0400</pubDate><guid isPermaLink="false">tag:patrick.cloke.us,2011-05-16:posts/2011/05/16/compilling-instantbird/</guid><category>Instantbird</category><category>Mozilla</category><category>programming</category></item><item><title>Status Update - January 18, 2011</title><link>http://patrick.cloke.us/posts/2011/01/18/status-update-january-18-2011/</link><description>&lt;p&gt;I haven&amp;#8217;t had an update in a few weeks (since early December)
actually, so I thought I would post a bit about what I&amp;#8217;ve worked on.
I&amp;#8217;ve fixed a bunch of bugs in the backend of Instantbird that allow work
on JavaScript &lt;span class="caps"&gt;IRC&lt;/span&gt; protocol to&amp;nbsp;continue:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=519"&gt;Bug 519&lt;/a&gt; - Extend jsProtoHelper to implement purpleIConvChat
(&lt;a class="reference external" href="http://hg.instantbird.org/instantbird/rev/0166084ce2ae"&gt;check-in&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=495"&gt;Bug 495&lt;/a&gt; - purpleIAccount cannot access preferences via JavaScript
protocol (&lt;a class="reference external" href="http://hg.instantbird.org/instantbird/rev/a188a5cc3ff1"&gt;check-in&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=648"&gt;Bug 648&lt;/a&gt; -Provide a default &lt;span class="caps"&gt;JS&lt;/span&gt; implementation of
purpleIChatRoomField
(&lt;a class="reference external" href="http://hg.instantbird.org/instantbird/rev/61fc80a569d3"&gt;check-in&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;[Reviewed] &lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=647"&gt;Bug 647&lt;/a&gt; - Username split for JavaScript protocols
(&lt;a class="reference external" href="http://hg.instantbird.org/instantbird/rev/a6c8fbf77e10"&gt;check-in&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;[Reviewed] &amp;lt;no bug&amp;gt; -Share the nsIClassInfo implementation between
all the objects implemented in jsProtoHelper
(&lt;a class="reference external" href="http://hg.instantbird.org/instantbird/rev/035f7d8d7f78"&gt;check-in&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Also a few other random bugs I&amp;#8217;ve worked&amp;nbsp;on:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=625"&gt;Bug 625&lt;/a&gt; - Findbar broken on Windows in Conversation window
(&lt;a class="reference external" href="http://hg.instantbird.org/instantbird/rev/2e8af77af2f2"&gt;check-in&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=629"&gt;Bug 629&lt;/a&gt; - Remove workaround for bug 503048
(&lt;a class="reference external" href="http://hg.instantbird.org/instantbird/rev/ba4b9401791b"&gt;check-in&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=473"&gt;Bug 473&lt;/a&gt; - &lt;span class="caps"&gt;JS&lt;/span&gt; Logger line breaks don&amp;#8217;t play well on Windows
&lt;a class="reference external" href="http://hg.instantbird.org/instantbird/rev/6a600b8a32c9"&gt;(check-in&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=593"&gt;Bug 593&lt;/a&gt; - JavaScript component does not have a method named:
&amp;#8220;onBeforeLinkTraversal&amp;#8221;
(&lt;a class="reference external" href="http://hg.instantbird.org/instantbird/rev/1b75f9fa4859"&gt;check-in&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Although none of these are really things that weren&amp;#8217;t working a few
weeks ago, there are now real APIs for these for JavaScript protocols,
allowing other protocols to use them and to &lt;em&gt;&lt;span class="caps"&gt;FULLY&lt;/span&gt;&lt;/em&gt; implement them
instead of hard coding values.&amp;nbsp; In addition, a lot of the purplexpcom
layer is now hidden from JavaScript&amp;nbsp;protocols.&lt;/p&gt;
&lt;p&gt;There&amp;#8217;s a few things left to do for the JavaScript protocol&amp;nbsp;layer:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=118"&gt;Bug 118&lt;/a&gt; - Extensions should be able to register&amp;nbsp;commands.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=650"&gt;Bug 650&lt;/a&gt; - JavaScript accounts must be notified of status changes
(a sketchy patch that exists that will work, but a better patch to
core should be&amp;nbsp;done)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=623"&gt;Bug 623&lt;/a&gt; - Auto-Join option field is hard coded for certain
protocols (not &lt;em&gt;really&lt;/em&gt; necessary, since it&amp;#8217;s still &lt;span class="caps"&gt;IRC&lt;/span&gt;, but it
should be&amp;nbsp;fixed)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=649"&gt;Bug 649&lt;/a&gt; - Proxy should be available to JavaScript protocols
(hopefully being handled by&amp;nbsp;Florian)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A good summary of this is &lt;a class="reference external" href="https://bugzilla.instantbird.org/showdependencygraph.cgi?id=507&amp;amp;display=web&amp;amp;rankdir=LR"&gt;the dependency graph of bug 507&lt;/a&gt;
(Implement &lt;span class="caps"&gt;IRC&lt;/span&gt; in JavaScript).&amp;nbsp; Note that the &lt;span class="caps"&gt;IRC&lt;/span&gt; JavaScript work blocks
&lt;em&gt;a&amp;nbsp; lot&lt;/em&gt; of &lt;span class="caps"&gt;UI&lt;/span&gt; work done for &lt;span class="caps"&gt;IRC&lt;/span&gt;.&amp;nbsp; In particular Mook has been working
on implementing notifications (i.e. Invites, and perhaps a few other
commands), see &lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=628"&gt;Bug 628&lt;/a&gt;.&amp;nbsp; For other bugs, see the link above &amp;#8212; and if
there&amp;#8217;s a strange &lt;span class="caps"&gt;UI&lt;/span&gt; feature that you think should be added, please file
a bug and let us know about&amp;nbsp;it!&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve also worked a bit on sending outgoing text with rich formatting
(bold, italics, underline, text size, etc.), this work is being tracked
in &lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=634"&gt;Bug 634&lt;/a&gt;. There&amp;#8217;s a proof on concept, but a lot of work needs to be
done for it, but it&amp;#8217;s sort of working right&amp;nbsp;now.&lt;/p&gt;
&lt;p&gt;As I alluded to in my last blog post, the JavaScript protocols would
be used to implement Twitter. Work for this is occurring in &lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=598"&gt;Bug 598&lt;/a&gt;,
where Florian has implemented (very) basic Twitter&amp;nbsp;support.&lt;/p&gt;
&lt;p&gt;My plans for the next&amp;nbsp;bit:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;I&amp;#8217;m hoping to finish up some of the work blocking JavaScript
protocols so &lt;span class="caps"&gt;IRC&lt;/span&gt; can be put into a state that needs alpha/beta
testers (if you&amp;#8217;re interested in testing/hacking please drop me a
line here, on &lt;span class="caps"&gt;IRC&lt;/span&gt; or via&amp;nbsp;email).&lt;/li&gt;
&lt;li&gt;Move into my new&amp;nbsp;apartment&lt;/li&gt;
&lt;li&gt;Start my new&amp;nbsp;job&lt;/li&gt;
&lt;li&gt;Work on richtext messages a bit&amp;nbsp;more&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Patrick Cloke</dc:creator><pubDate>Tue, 18 Jan 2011 23:17:00 -0500</pubDate><guid isPermaLink="false">tag:patrick.cloke.us,2011-01-18:posts/2011/01/18/status-update-january-18-2011/</guid><category>Instantbird</category><category>IRC</category><category>Mozilla</category><category>programming</category></item><item><title>Why Rewrite IRC into JavaScript? (vs. libpurple’s vs. ChatZilla’s)</title><link>http://patrick.cloke.us/posts/2010/12/08/why-rewrite-irc-into-javascript/</link><description>
&lt;p&gt;I had a request on &lt;span class="caps"&gt;IRC&lt;/span&gt; (from Mic) to write an in-depth blog post
about &lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=507"&gt;&lt;span class="caps"&gt;IRC&lt;/span&gt; in JavaScript&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
“Maybe we could ask clokep if he’d like to write something about
js-irc? Why it is done, what the advantages are once it’s done, how
he is working on it (going through the specs), putting the
jsProtocol code to test and adding missing pieces?” — &lt;a class="reference external" href="http://log.bezut.info/instantbird/101208/#m54"&gt;Mic&lt;/a&gt;&lt;/blockquote&gt;
&lt;div class="section" id="wait-a-second-what-is-irc"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;Wait a second, what is &lt;span class="caps"&gt;IRC&lt;/span&gt;?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I guess this is a good first question, I’ll steal from &lt;a class="reference external" href="http://en.wikipedia.org/wiki/IRC"&gt;Wikipedia&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
Internet Relay Chat (&lt;span class="caps"&gt;IRC&lt;/span&gt;) is a form of real-time […] chat […] It
is mainly designed for group communication […] but also allows
[…for…] private message as well as chat and data transfers.&lt;/blockquote&gt;
&lt;p&gt;Awesome, what’s that really mean?  It’s an instant messaging protocol
with an actual specification (i.e. it’s not owned by some large, unnamed
company), with open-source libraries for clients and servers.  It’s
usually used by more computer-oriented types of people and centers
around group conversation.  Personally most of what I use it for is
open-source software I use (I’m almost always in &lt;a class="reference external" href="irc://irc.mozilla.org/#instantbird"&gt;#instantbird&lt;/a&gt;,
&lt;a class="reference external" href="irc://irc.mozilla.org/#maildev"&gt;#maildev&lt;/a&gt;, and &lt;a class="reference external" href="irc://irc.mozilla.org/#songbird"&gt;#songbird&lt;/a&gt; on &lt;a class="reference external" href="http://irc.mozilla.org/"&gt;Mozilla’s &lt;span class="caps"&gt;IRC&lt;/span&gt; servers&lt;/a&gt;.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="why-it-is-done-what-advantages-are-there-once-this-is-done"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4"&gt;Why it is done?  What advantages are there once this is done?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I touched upon this a little in my &lt;a class="reference external" href="http://patrick.cloke.us/posts/2010/12/04/javascript-irc-in-instantbird/"&gt;last post&lt;/a&gt;.  In terms of
Instantbird: there’s an idea of switching some / all of the protocols
(eventually) to be JavaScript protocols instead of the libpurple
versions (libpurple is written mostly in C and is cross-platform, but
recent gains in speed in JavaScript allow this advantage of libpurple to
not matter as much).  This would unfortunately mean we need to maintain
a lot more code, but it would allow us to integrate protocols in any way
that we see fit, instead of only using APIs / methods provided by
libpurple.  Hopefully this would allow us to &lt;a class="reference external" href="https://bugzilla.instantbird.org/showdependencytree.cgi?id=507&amp;amp;maxdepth=2&amp;amp;hide_resolved=1"&gt;enhance our &lt;span class="caps"&gt;IRC&lt;/span&gt;
implementation&lt;/a&gt; a bit.&lt;/p&gt;
&lt;p&gt;Also, Instantbird (nightlies) currently have limited support for
generating a protocol plug-in in JavaScript.  A couple of “test”
protocols have be done, but nothing in “real” (in particular, none that
used a multi-user chat).  This would allow us to iron out &lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=519"&gt;some&lt;/a&gt;
&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=118"&gt;bugs&lt;/a&gt; in the implementation of JavaScript protocols.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;[Edit: Florian suggested another question that wasn’t originally
covered, which some people more familiar with Mozilla code might be wondering.]&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="why-aren-t-you-using-the-code-from-chatzilla"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id5"&gt;Why aren’t you using the code from ChatZilla?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This was a tough one.  Honestly when I first wanted a parsing
algorithm, I looked at the ChatZilla code, I used it.  Then rewrote it
in a fourth as many lines (&lt;a class="reference external" href="http://hg.mozilla.org/chatzilla/file/tip/js/lib/irc.js#l1250"&gt;93&lt;/a&gt; vs. &lt;a class="reference external" href="https://hg.instantbird.org/experiments/file/IRC-JavaScript/components/ircProtocol.js#l208"&gt;20&lt;/a&gt;).  Simply said, the code in
ChatZilla is &lt;em&gt;old&lt;/em&gt;, it doesn’t use many of the features available only
in newer versions of JavaScript.  To that point, the ChatZilla code
hasn’t been updated in over a year!  The last check-in was: 2009-10-03,
below is a &lt;a class="reference external" href="http://hg.mozilla.org/chatzilla/log/tip/js/lib/irc.js"&gt;quick summary&lt;/a&gt; of the number of check-ins per year:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;2010: 0&lt;/li&gt;
&lt;li&gt;2009: 5&lt;/li&gt;
&lt;li&gt;2008: 15&lt;/li&gt;
&lt;li&gt;2007: 11&lt;/li&gt;
&lt;li&gt;2006: 18&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There’s been a pretty steady decline in check-ins.  I could take this
code and attempt to whip it into shape and make huge sweeping changes
and commit them back to ChatZilla, but honestly it was easier to start
over for me.  Regardless of ease, I’m not sure it would work any:
especially since the ChatZilla code seems overly complicated and overly
specific (since it wasn’t really built as a library as far as I can
see), especially since all the code is meant to deal only with &lt;span class="caps"&gt;IRC&lt;/span&gt;.  The
Instantbird code needs to be protocol agnostic to a degree, while is why
it interfaces to purplexpcom.&lt;/p&gt;
&lt;p&gt;A quick example of this is: ChatZilla uses a CIRCUser object, but for
Instantbird I need to create either an imIContact or a
purpleIAccountBuddy (depending on the situation).  It’s possible that’s
can be abstracted and code shared — but I’m not sure it would be worth
the effort.  After all this, I should probably look more into the
ChatZilla code, perhaps more of it could be used.&lt;/p&gt;
&lt;p&gt;(If someone familiar with the ChatZilla code base — I don’t know
who/if there’s a maintainer — is interested in talking with me, please
get in contact here or on #instantbird.  It’s possible we could align
some of what I’ve been working on, but I’m not sure how much could be
shared besides the parsing algorithm).&lt;/p&gt;
&lt;p&gt;&lt;em&gt;[End edit]&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-are-the-specific-advantages-for-an-end-user"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id6"&gt;What are the specific advantages for an end-user?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In terms of the &lt;span class="caps"&gt;IRC&lt;/span&gt; protocol itself, there shouldn’t be any, my goal
is for it to be a drop in replacement for the libpurple implementation
with automatic account migration, etc. For end-users we can hopefully
solve &lt;a class="reference external" href="https://bugzilla.instantbird.org/showdependencytree.cgi?id=574&amp;amp;maxdepth=1&amp;amp;hide_resolved=1"&gt;a few annoying &lt;span class="caps"&gt;IRC&lt;/span&gt; &lt;span class="caps"&gt;UI&lt;/span&gt; issues&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-about-for-developers-anything-cool-there"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id7"&gt;What about for developers?  Anything cool there?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Well, I’m hoping to be able to test this replacement via an extension
that replaces the libpurple &lt;span class="caps"&gt;IRC&lt;/span&gt; to dogfood it before eventual inclusion
in Instantbird.  I’m not sure if that counts as “cool.” though.  If
nothing else there will be an example of how to write a protocol in
JavaScript (using sockets).  So hopefully other people can make some
other cool protocols off of that example.  You might wonder what else we
have planned for JavaScript protocols; there are plans to make at least
a Twitter protocol.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-is-this-being-done"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id8"&gt;How is this being done?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Well I said up above &lt;span class="caps"&gt;IRC&lt;/span&gt; has a specification, right?  Well, yes.
There’s the &lt;a class="reference external" href="http://tools.ietf.org/html/rfc1459"&gt;original specification&lt;/a&gt;, this was superseded by &lt;a class="reference external" href="http://tools.ietf.org/html/rfc2810"&gt;four&lt;/a&gt;
&lt;a class="reference external" href="http://tools.ietf.org/html/rfc2811"&gt;different&lt;/a&gt; &lt;a class="reference external" href="http://tools.ietf.org/html/rfc2812"&gt;specification&lt;/a&gt; &lt;a class="reference external" href="http://tools.ietf.org/html/rfc2813"&gt;documents&lt;/a&gt;.  Of which we only really
care about one: &lt;a class="reference external" href="http://tools.ietf.org/html/rfc2812"&gt;the client protocol&lt;/a&gt;.  So we have this updated
specification (try reading it, it’s rather painful), which is good.
It’s relatively straightforward set of commands and responses/errors.
It’s a bit more confusing than that though since there are a couple of
extensions, etc.  This is summarized below:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;span class="strike"&gt;&lt;span class="caps"&gt;RFC&lt;/span&gt; 1459&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;Extended with &lt;a class="reference external" href="http://www.irchelp.org/irchelp/rfc/dccspec.html"&gt;&lt;span class="strike"&gt;&lt;span class="caps"&gt;DCC&lt;/span&gt; specification (“direct client-to-client”)&lt;/span&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Replaced with &lt;a class="reference external" href="http://www.irchelp.org/irchelp/rfc/dccspec.html"&gt;&lt;span class="strike"&gt;&lt;span class="caps"&gt;CTCP&lt;/span&gt; (“client-to-client protocol”)&lt;/span&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.invlogic.com/irc/ctcp.html"&gt;Draft for a formalized &lt;span class="caps"&gt;CTCP&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;(Apparently some people are working on a &lt;a class="reference external" href="http://www.dcc2.org/"&gt;&lt;span class="caps"&gt;DCC2&lt;/span&gt;&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Officially replaced with RFCs 2810, 2811, 2812, 2813&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A lot of this is being done by reading the specifications and finding
the proper responses, etc.  I’ve also used &lt;a class="reference external" href="http://www.wireshark.org/download.html"&gt;Wireshark&lt;/a&gt; a bit to see how
libpurple sends &lt;span class="caps"&gt;IRC&lt;/span&gt; commands (in particular, in what order it sends them
in).  A lot of my development is happening on live &lt;span class="caps"&gt;IRC&lt;/span&gt; servers, which
isn’t really best practice, but I’m mostly sending commands by hand to
see the responses since a bunch of non-standard responses and extensions
have developed beyond the above.  I have been using &lt;a class="reference external" href="http://ircd.bircd.org/"&gt;beware irc&lt;/a&gt; to run
a daemon on my own machine, however.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="so-how-far-along-are-you"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id9"&gt;So how far along are you?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I’ve started implementing &lt;span class="caps"&gt;RFC&lt;/span&gt; 2812 and have a variety of commands done
(the login sequence occurs automatically, the server connection is kept
alive, messages can be sent to a channel and are parsed when received, a
lot of the initial server information is displayed but unparsed).  But
there’s a lot more to do!  As my last post outlined, I recently was able
to successfully get a chat to work in Instantbird from a silly bug I had
been having.&lt;/p&gt;
&lt;p&gt;It’s rather slow going since I’ll start to implement something from
the &lt;span class="caps"&gt;IRC&lt;/span&gt; side, and then realize the &lt;a class="reference external" href="http://hg.instantbird.org/instantbird/file/tip/purple/purplexpcom/src/jsProtoHelper.jsm"&gt;Instantbird layer&lt;/a&gt; (the jsProtocol
module) is missing a component I need.  One of the major parts of
working on this is extending the Instantbird layer to contain the proper
functions and objects needed to implement chats via JavaScript.  This is
usually the slowest going part of my code, since it involves interfacing
with Instantbird / &lt;a class="reference external" href="http://hg.instantbird.org/instantbird/file/tip/purple/purplexpcom/public/"&gt;purplexpcom&lt;/a&gt;.  Luckily Florian, the main developer
of Instantbird, has been a big help with this (as have other
participants of #instantbird — in particular I know Mic helped track
down a few syntax type bugs).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-s-next"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id10"&gt;What’s next?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Now that have the basics of chat working, I need to start handling the
&lt;span class="caps"&gt;QUIT&lt;/span&gt;, &lt;span class="caps"&gt;PART&lt;/span&gt; and &lt;span class="caps"&gt;JOIN&lt;/span&gt; commands for when other users enter &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; leave chat
rooms.  Once these are complete it should be quite usable, although the
entire preference system still doesn’t exist, including notifying the &lt;span class="caps"&gt;UI&lt;/span&gt;
of what options are available.  In addition, I need to look into doing
&lt;span class="caps"&gt;SSL&lt;/span&gt; sockets.&lt;/p&gt;
&lt;p&gt;Once the protocol plug-in is done, we plan to abstract sections of it
that will be useful for other protocols (in particular the socket
connection aspects).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="where-can-i-see-this-stuff"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id11"&gt;Where can I see this stuff…?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;My work is kept in the “&lt;a class="reference external" href="https://hg.instantbird.org/experiments/file/IRC-JavaScript/"&gt;experiments&lt;/a&gt;” repository on Instantbird’s
&lt;a class="reference external" href="http://mercurial.selenic.com/"&gt;Mercurial&lt;/a&gt; repository.  There’s also a variety of bugs open (they’re
listed above, I’m not going to re-list them), although not a ton is
happening in them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-can-i-help"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id12"&gt;How can I help?!&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Well you can of course feel free to download the code and hack on it,
let me know (via &lt;span class="caps"&gt;IRC&lt;/span&gt; or any of the bugs most likely) if you have a patch
you’d like me to apply.  Or if you just found something that doesn’t
work you can feel free to let me know, although I probably just haven’t
gotten around to fixing it yet.&lt;/p&gt;
&lt;p&gt;Also, if you’ve ever found something annoying / broken in the &lt;span class="caps"&gt;IRC&lt;/span&gt;
implementation in Instantbird / libpurple please let us know (through
any of the above contact sources).&lt;/p&gt;
&lt;p&gt;Hopefully that’s a bit of a better explanation of why we’re spending
time to rewrite the &lt;span class="caps"&gt;IRC&lt;/span&gt; protocol implementation into JavaScript — we
definitely think it’s worth it and can lead to a bunch of new unique
protocol plug-ins for Instantbird.&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Patrick Cloke</dc:creator><pubDate>Wed, 08 Dec 2010 14:29:00 -0500</pubDate><guid isPermaLink="false">tag:patrick.cloke.us,2010-12-08:posts/2010/12/08/why-rewrite-irc-into-javascript/</guid><category>Instantbird</category><category>IRC</category><category>Mozilla</category><category>programming</category></item><item><title>JavaScript IRC in Instantbird</title><link>http://patrick.cloke.us/posts/2010/12/04/javascript-irc-in-instantbird/</link><description>&lt;p&gt;I&amp;#8217;ve been working on rewriting the &lt;span class="caps"&gt;IRC&lt;/span&gt; plugin for &lt;a class="reference external" href="http://www.instantbird.com/"&gt;Instantbird&lt;/a&gt; since
the summer (sometime in August, I can&amp;#8217;t seem to find the exact date &amp;#8212;
at least since Sept. 10th&amp;nbsp;though).&lt;/p&gt;
&lt;p&gt;Since &lt;a class="reference external" href="http://developer.pidgin.im/wiki/WhatIsLibpurple"&gt;libpurple&lt;/a&gt; (used in Pidgin, Adium, etc.) provides the &lt;span class="caps"&gt;IRC&lt;/span&gt;
protocol that we currently use, why do this?&amp;nbsp; One reason is to iron out
(and find) some of the bugs left in implementing protocols in JavaScript
and part of it is so I can learn to code better.&amp;nbsp; Unfortunately during
this semester I was not able to get as much done as I had hoped and
almost everything that had been done was finished in&amp;nbsp;August/September&lt;/p&gt;
&lt;p&gt;Some big milestones I&amp;#8217;ve completed (with dates if I have&amp;nbsp;them):&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Connected to server via sockets in&amp;nbsp;JavaScript&lt;/li&gt;
&lt;li&gt;Generate a conversation that works as a raw connection to the server
(i.e. as if you had opened a telnet connection to the&amp;nbsp;server)&lt;/li&gt;
&lt;li&gt;Parsing messages and automatic ponging when the server&amp;nbsp;pings&lt;/li&gt;
&lt;li&gt;Joining a channel (2010/12/04, i.e.&amp;nbsp;today!)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There had been a bunch of small bugs I had been having in getting this
to work: one error, (which I found quickly) one of the other developers
(&lt;a class="reference external" href="http://queze.net/"&gt;Florian&lt;/a&gt;) was able to help me out with, was that I was not initiating
a &lt;strong&gt;new&lt;/strong&gt; object.&amp;nbsp; And after learning a bit above observers I was able
to get the &lt;span class="caps"&gt;UI&lt;/span&gt; to respond.&amp;nbsp; I even threw in support for op/half-op/voice
After today&amp;#8217;s work I was able to generate the following&amp;nbsp;screenshot:&lt;/p&gt;
&lt;!--  --&gt;
&lt;blockquote class="center"&gt;
&lt;a class="reference external image-reference" href="http://patrick.cloke.us/images/IRCworking2.png"&gt;&lt;img alt="Example conversation using JavaScript IRC." class="center" src="http://patrick.cloke.us/images/IRCworking2.png" style="height: 297px;" /&gt;&lt;/a&gt;
&lt;p&gt;An initial example of Instantbird communicating using JavaScript &lt;span class="caps"&gt;IRC&lt;/span&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This build would be almost fully usable by those who do very little on
&lt;span class="caps"&gt;IRC&lt;/span&gt; (i.e. if you just want to go and chat, it&amp;#8217;d work well), but there&amp;#8217;s
a lot more work to be done.&amp;nbsp; The code can be viewed in the &lt;a class="reference external" href="https://hg.instantbird.org/experiments/file/IRC-JavaScript/"&gt;Experiments
repository&lt;/a&gt;.&amp;nbsp; (Check it out, there&amp;#8217;s a 600+ line switch&amp;nbsp;statement.)&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Patrick Cloke</dc:creator><pubDate>Sat, 04 Dec 2010 17:24:00 -0500</pubDate><guid isPermaLink="false">tag:patrick.cloke.us,2010-12-04:posts/2010/12/04/javascript-irc-in-instantbird/</guid><category>Instantbird</category><category>IRC</category><category>Mozilla</category><category>programming</category></item><item><title>Yahoo &amp; Thunderbird Can Finally Play Nice?</title><link>http://patrick.cloke.us/posts/2010/11/22/yahoo-thunderbird/</link><description>&lt;p&gt;For years I&amp;#8217;ve been dealing with Yahoo&amp;#8217;s lack of support for any sort
of decent (free) &lt;span class="caps"&gt;POP3&lt;/span&gt;/&lt;span class="caps"&gt;IMAP&lt;/span&gt;/&lt;span class="caps"&gt;SMTP&lt;/span&gt; protocol support.&amp;nbsp; Why do I need this?
So I can check my &lt;a class="reference external" href="http://mail.yahoo.com/"&gt;Yahoo mail&lt;/a&gt; in &lt;a class="reference external" href="http://www.mozillamessaging.com/en-US/thunderbird/"&gt;Mozilla Thunderbird&lt;/a&gt; of&amp;nbsp;course!&lt;/p&gt;
&lt;p&gt;At first I used &lt;a class="reference external" href="http://ypopsemail.com/"&gt;&lt;span class="caps"&gt;YPOPS&lt;/span&gt;!&lt;/a&gt;, a program that read the &lt;span class="caps"&gt;HTML&lt;/span&gt; pages provided
by the Yahoo webmail client and served the emails on a local &lt;span class="caps"&gt;POP&lt;/span&gt;
server.&amp;nbsp; Cool, right?&amp;nbsp; Except it always broke whenever Yahoo changed
their pages&amp;nbsp;around.&lt;/p&gt;
&lt;p&gt;After a bit I moved onto using the &lt;a class="reference external" href="http://www.blogger.com/"&gt;WebMail extension&lt;/a&gt; for
Thunderbird.&amp;nbsp; It essentially works the same way, but runs in the
Thunderbird process as an extension instead of as a separate service.
It&amp;#8217;s a little complicated to set up and requires two extensions.&amp;nbsp; The
general WebMail extension and a Yahoo specific one (there&amp;#8217;s also ones
available for Hotmail, Gmail, Libero and &lt;span class="caps"&gt;AOL&lt;/span&gt;).&amp;nbsp; You might wonder why
this exists for some services that have always had &lt;span class="caps"&gt;POP&lt;/span&gt;/&lt;span class="caps"&gt;IMAP&lt;/span&gt; access
(Gmail)?&amp;nbsp; I was too, apparently some people cannot check those ports
because of firewall issues so this essentially allows them to check it
via port 80, over an &lt;span class="caps"&gt;HTTP&lt;/span&gt;&amp;nbsp;connection.&lt;/p&gt;
&lt;p&gt;A few months ago I came across &lt;a class="reference external" href="http://www.emaildiscussions.com/showthread.php?t=59575"&gt;post&lt;/a&gt; describing how a &lt;a class="reference external" href="http://en.wikipedia.org/w/index.php?title=Yahoo%21_Mail&amp;amp;oldid=396914770#Free_IMAP_and_SMTPs_access"&gt;simple
(nonstandard) command&lt;/a&gt; could allow access to the Yahoo &lt;span class="caps"&gt;IMAP&lt;/span&gt; server, but
it required &lt;a class="reference external" href="http://www.crasseux.com/linux/"&gt;patching the Thunderbird source&lt;/a&gt; &amp;#8212; not an option for me
since I&amp;#8217;ve been running nightlies of either Thunderbird 3.1 or 3.2/3.3
for a while now. (I mean sure, I could do it&amp;#8230;but WebMail extension was
working fine.)&amp;nbsp; There was &lt;a class="reference external" href="http://groups.google.com/group/mozilla.dev.apps.thunderbird/browse_thread/thread/546356554c73f8ca"&gt;some discussion&lt;/a&gt; about it and a &lt;a class="reference external" href="https://bugzilla.mozilla.org/show_bug.cgi?id=493064"&gt;bug&lt;/a&gt; was
filed for&amp;nbsp;Thunderbird.&lt;/p&gt;
&lt;p&gt;So how did this lead to free &lt;span class="caps"&gt;IMAP&lt;/span&gt; support?&amp;nbsp; I noticed in the &lt;a class="reference external" href="https://wiki.mozilla.org/Thunderbird/StatusMeetings/2010-11-16#Web_Update"&gt;Weekly
Status Meeting Notes (2010-11-16)&lt;/a&gt; for Thunderbird a mention of &lt;a class="reference external" href="http://trunk.mozillamessaging.com/en-US/thunderbird/features/email_providers.html"&gt;Free
Email Providers&lt;/a&gt; page.&amp;nbsp; Checking it out it said &amp;#8220;Y! Mail is a free
email service provided by Yahoo! It offers webmail supported by targeted
advertising as well as &lt;span class="caps"&gt;IMAP&lt;/span&gt; access.&amp;#8221;&amp;nbsp; Hmm&amp;#8230;but I just said they don&amp;#8217;t
have support this for free! A quick Bing search brought up a &lt;a class="reference external" href="http://www.theanimail.com/imap_server_settings.html"&gt;page with
&lt;span class="caps"&gt;IMAP&lt;/span&gt; server settings&lt;/a&gt;.&amp;nbsp; I figured I&amp;#8217;d check if they work, and sure
enough they did!&amp;nbsp; The settings are copied&amp;nbsp;below:&lt;/p&gt;
&lt;blockquote&gt;
&lt;table class="docutils field-list" frame="void" rules="none"&gt;
&lt;col class="field-name" /&gt;
&lt;col class="field-body" /&gt;
&lt;tbody valign="top"&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;User name:&lt;/th&gt;&lt;td class="field-body"&gt;&lt;span class="strike"&gt;user&amp;#64;yahoo.com&lt;/span&gt; user&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;&lt;span class="caps"&gt;IMAP&lt;/span&gt; server:&lt;/th&gt;&lt;td class="field-body"&gt;&lt;span class="strike"&gt;imap-ssl.mail.yahoo.com&lt;/span&gt; imap.mail.yahoo.com&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;Port:&lt;/th&gt;&lt;td class="field-body"&gt;993&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;Password:&lt;/th&gt;&lt;td class="field-body"&gt;Cleartext/Normal&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;&lt;span class="caps"&gt;SSL&lt;/span&gt;:&lt;/th&gt;&lt;td class="field-body"&gt;yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;&lt;span class="caps"&gt;SMTP&lt;/span&gt; server:&lt;/th&gt;&lt;td class="field-body"&gt;smtp.mail.yahoo.com&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;Port:&lt;/th&gt;&lt;td class="field-body"&gt;465&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;Password:&lt;/th&gt;&lt;td class="field-body"&gt;Cleartext/Normal&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;&lt;span class="caps"&gt;SSL&lt;/span&gt;:&lt;/th&gt;&lt;td class="field-body"&gt;yes&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/blockquote&gt;
&lt;p&gt;Awesome!&amp;nbsp; Anyway, I replied with this info in the aforementioned bug
and &lt;a class="reference external" href="https://bugzilla.mozilla.org/attachment.cgi?id=492550&amp;amp;action=diff"&gt;a patch&lt;/a&gt; was quickly added by Mozilla&amp;#8217;s &lt;a class="reference external" href="http://www.bucksch.org/1/projects/mozilla/"&gt;Ben Bucksch&lt;/a&gt; to support
this in Thunderbird, hopefully it&amp;#8217;ll make it into the next version!&amp;nbsp; It
was also brought to my attention that imap-ssl.mail.yahoo.com provides
an &lt;span class="caps"&gt;SSL&lt;/span&gt; certificate that is valid for imap.mail.yahoo.com only, I&amp;#8217;d
suggest using that&amp;nbsp;former.&lt;/p&gt;
&lt;p&gt;Note that I&amp;#8217;m currently suffering from &lt;a class="reference external" href="https://bugzilla.mozilla.org/show_bug.cgi?id=610264"&gt;another bug&lt;/a&gt; while using
Yahoo &lt;span class="caps"&gt;IMAP&lt;/span&gt;.&amp;nbsp; Everything works, there&amp;#8217;s just an annoying pop-up
occasionally about the error.&amp;nbsp; Hopefully it will be fixed&amp;nbsp;soon.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Patrick Cloke</dc:creator><pubDate>Mon, 22 Nov 2010 23:03:00 -0500</pubDate><guid isPermaLink="false">tag:patrick.cloke.us,2010-11-22:posts/2010/11/22/yahoo-thunderbird/</guid><category>bugs</category><category>email</category><category>IMAP</category><category>Mozilla</category><category>POP3</category><category>programming</category><category>SMTP</category><category>Thunderbird</category><category>Yahoo</category></item></channel></rss>