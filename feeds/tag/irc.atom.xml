<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Like bricks in the sky</title><link href="http://patrick.cloke.us/" rel="alternate"></link><link href="http://patrick.cloke.us/feeds/tag/irc.atom.xml" rel="self"></link><id>http://patrick.cloke.us/</id><updated>2012-08-08T17:08:00-04:00</updated><entry><title>Instantbird 1.2 Released (with awesome new IRC features)!</title><link href="http://patrick.cloke.us/instantbird-12-released-with-awesome-new-irc-features.html" rel="alternate"></link><updated>2012-08-08T17:08:00-04:00</updated><author><name>Patrick Cloke</name></author><id>tag:patrick.cloke.us,2012-08-08:instantbird-12-released-with-awesome-new-irc-features.html</id><summary type="html">&lt;p&gt;If you haven't seen the announcement...&lt;a class="reference external" href="http://blog.instantbird.org/2012/08/instantbird-1-2-released/"&gt;Instantbird 1.2 has been
released&lt;/a&gt;!&amp;nbsp; It's got a ton of great new features that I'm excited for:
&lt;a class="reference external" href="http://blog.instantbird.org/2012/08/tab-completion-in-instantbird-1-2/"&gt;better tab complete&lt;/a&gt;, a marker showing the last viewed messages,
support for Bonjour and more.&amp;nbsp; But the most exciting bits to me are our
JavaScript implementations of &lt;a class="reference external" href="http://lxr.instantbird.org/instantbird/source/chat/protocols/xmpp/"&gt;XMPP&lt;/a&gt; (used for &lt;a class="reference external" href="http://lxr.instantbird.org/instantbird/source/chat/protocols/facebook/"&gt;Facebook Chat&lt;/a&gt; and
&lt;a class="reference external" href="http://lxr.instantbird.org/instantbird/source/chat/protocols/gtalk/"&gt;GTalk&lt;/a&gt;, so far) and &lt;a class="reference external" href="http://lxr.instantbird.org/instantbird/source/chat/protocols/irc/"&gt;IRC&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;Why am I so excited for them? Mostly because they're extendable!
(Well...and I guess because I wrote most of the IRC code.) I've
&lt;a class="reference external" href="http://patrick.cloke.us/irc-auto-performs.html"&gt;written&lt;/a&gt; a bit about this before for IRC...but it will let add-ons do
whatever they want to the IRC protocol.&amp;nbsp; You should check out the
implementations (links above), they're very hackable.&amp;nbsp; Hopefully we can
remove libpurple XMPP and fully switch to Instantbird's XMPP for the
next release, once a few &lt;a class="reference external" href="https://bugzilla.mozilla.org/show_bug.cgi?id=14328"&gt;Mozilla bugs&lt;/a&gt; are fixed.&lt;/p&gt;
&lt;p&gt;Did I also mention that these implementations (including the raw XMPP
and Twitter, which Instantbird has supported since 1.0) are going to be
included in &lt;a class="reference external" href="http://www.mozilla.org/en-US/thunderbird/"&gt;Thunderbird&lt;/a&gt;15, as part of it's new &lt;a class="reference external" href="https://wiki.mozilla.org/Modules/Chat"&gt;chat feature&lt;/a&gt;?
Florian has done a great job of integrating our chat code there and it
gives quite a different user experience than Instantbird, so don't be
worried about Instantbird going away!&lt;/p&gt;
&lt;p&gt;Now of course, we always think of the future here (after all,
releasing itself isn't really exciting when most of the features have
been in nightly builds...forever), so we started making a list of some
of the stuff we'd like to implement in future Instantbirds, you can
check it out &lt;a class="reference external" href="https://etherpad.mozilla.org/ib-1-3"&gt;here&lt;/a&gt;. Some of them are very exciting, feel free to grab
one and work on it.&lt;/p&gt;
</summary><category term="Instantbird"></category><category term="IRC"></category></entry><entry><title>IRC Auto-Performs</title><link href="http://patrick.cloke.us/irc-auto-performs.html" rel="alternate"></link><updated>2012-06-11T02:25:00-04:00</updated><author><name>Patrick Cloke</name></author><id>tag:patrick.cloke.us,2012-06-11:irc-auto-performs.html</id><summary type="html">&lt;p&gt;There have been a &lt;a class="reference external" href="https://bugzilla.mozilla.org/show_bug.cgi?id=742675"&gt;few&lt;/a&gt; &lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=1101"&gt;requests&lt;/a&gt; to support &amp;quot;auto-performs&amp;quot;
(sending commands to the IRC server after connection that the user types
into a box or whatever). Personally I find this to be:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;A fairly awful user experience.&lt;/li&gt;
&lt;li&gt;Confusing to new users.&lt;/li&gt;
&lt;li&gt;Unnecessary.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I additionally don't like this idea since it requires us to have
commands for all the common tasks you'd want to do in an auto-perform
(or support sending absolutely raw messages to the server, which we
actually do already in the /quote command). Essentially what I just
described is writing our own scripting language...that seems pointless
(and frankly, I have better things to do). I'm hoping to convince you
with this post (and maybe a series of posts) that auto-performs aren't
necessary and a trivial restartless extension can replace them.&lt;/p&gt;
&lt;div class="section" id="design"&gt;
&lt;h2&gt;Design&lt;/h2&gt;
&lt;p&gt;Part of the desire to &lt;a class="reference external" href="http://patrick.cloke.us/why-rewrite-the-irc-protocol-plugin-part-2.html"&gt;replace the libpurple IRC protocol plugin&lt;/a&gt;
with a new JavaScript one built specifically for Instantbird (which is
also now used in Thunderbird!) was to make the protocol fully
extensible. There are &lt;a class="reference external" href="http://patrick.cloke.us/the-so-called-irc-specifications.html"&gt;many revisions and unofficial extensions to IRC&lt;/a&gt;
and we might not necessarily want to support them all (especially if
they only apply to a single network). Allowing all parts of the protocol
implementation to be touched and extended seemed like a great way to
handle this.&lt;/p&gt;
&lt;p&gt;Initially I tried to do this by making the IRC account into an XPCOM
component (well it is one already, it's an prplIAccount, but I meant an
IRC specific one: implementing ircIAccount, if you will). Unfortunately,
this seemed to have a lot of overhead and got complicated extremely
quickly. Anything I'd want to touch from a message handler (wait,
wait...what's a handler?! I'll get back to that) would need to have
methods written and exposed to access internal data of the
account...does that sound very extensible to you? Well, it doesn't to
me...&lt;/p&gt;
&lt;p&gt;Onto design two! (Well actually my first design...) Lots of JavaScript
objects! The entire protocol is implemented as a set of JavaScript
objects and the handlers directly touch and modify the account's data
(of course there's methods for abstraction, etc.). This means that an
extension has absolutely FULL access to every about an account...this
also means an extension could seriously mess with and cause the protocol
to stop working or do really crazy things, etc. Unfortunately there
isn't really a way to avoid that. Hopefully people write good code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="messages"&gt;
&lt;h2&gt;Messages&lt;/h2&gt;
&lt;p&gt;I'm going to go into an aside about messages right now, even though it
doesn't quite seem relevent yet. It will. IRC has a bunch of
sub-protocols embedded within the IRC protocol (see the link above about
unofficial extensions). We attempt to parse all the string messages and
make pretty JavaScript objects out of them. I've actually identified
five (yes, count that: five) different sub-&amp;quot;protocols&amp;quot; within IRC that
we deal:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;IRC itself (i.e. &lt;a class="reference external" href="http://tools.ietf.org/html/rfc1459"&gt;RFC 1459&lt;/a&gt; / &lt;a class="reference external" href="http://tools.ietf.org/html/rfc2812"&gt;RFC 2812&lt;/a&gt; / various numeric
extensions)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.irchelp.org/irchelp/rfc/ctcpspec.html"&gt;CTCP (the Client-to-Client Protocol)&lt;/a&gt;,embedded in PRIVMSG commands
of IRC&lt;/li&gt;
&lt;li&gt;DCC (Direct Client-to-Client), a subprotocol of CTCP&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://tools.ietf.org/html/draft-brocklesby-irc-isupport-03"&gt;ISUPPORT&lt;/a&gt; (also known as Numeric 005), a method of negotiating
capabilities between a client and server&lt;/li&gt;
&lt;li&gt;And finally, handling of IRC Services (there's a lot of them and no
specification, but we treat them specially)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Briefly what happens when we receive a raw message over the wire, we
create an &lt;a class="reference external" href="http://hg.instantbird.org/instantbird/file/b8d8b6e60aef/chat/protocols/irc/irc.js#l14"&gt;ircMessage object out of it using a variety of regular
expressions&lt;/a&gt;. This object has a variety of fields (see the link for
details), including the command, who sent the message and the
parameters.&lt;/p&gt;
&lt;p&gt;If the message is identified as a CTCP message, we then morph the
ircMessage into a &lt;a class="reference external" href="http://hg.instantbird.org/instantbird/file/b8d8b6e60aef/chat/protocols/irc/ircCTCP.jsm#l44"&gt;CTCPMessage&lt;/a&gt;, which can be morphed into a
&lt;a class="reference external" href="http://hg.instantbird.org/instantbird/file/b8d8b6e60aef/chat/protocols/irc/ircDCC.jsm#l20"&gt;DCCMessage&lt;/a&gt;. Additionally, a 005 reply can be parsed into a
&lt;a class="reference external" href="http://hg.instantbird.org/instantbird/file/b8d8b6e60aef/chat/protocols/irc/ircISUPPORT.jsm#l22"&gt;isupportMessage&lt;/a&gt;. And last, but not least, a received PRIVMSG can also
be parsed into a &lt;a class="reference external" href="http://hg.instantbird.org/instantbird/file/b8d8b6e60aef/chat/protocols/irc/ircServices.jsm#l19"&gt;ServiceMessage&lt;/a&gt;. Each of these extends the IRC
message without destroying information. (Yes, I'm realizing now that my
choice of whether to use capitals is all messed up...)&lt;/p&gt;
&lt;p&gt;Well, why do we care...? By preparsing the strings into objects (as
defined by any &amp;quot;specifications&amp;quot; that exist), we keep extensions from
having to parse messages over and over again from strings.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="handlers"&gt;
&lt;h2&gt;Handlers&lt;/h2&gt;
&lt;p&gt;A handler is simply what I call the object that contains the methods
to deal with an incoming message. Pretty much, you get to say &amp;quot;Only send
me ISUPPORT messages!&amp;quot; or &amp;quot;Only send me CTCP messages!&amp;quot; and voila, you
only get that type of message. Each message type has a field that is
used to choose the method to run (for the IRC messages, the &amp;quot;command&amp;quot;,
for CTCP the &amp;quot;CTCP command&amp;quot;, ISUPPORT the &amp;quot;parameter&amp;quot;, etc.) This sounds
a lot more complicated than it is, I think a brief &lt;a class="reference external" href="https://bitbucket.org/clokep/irc-extras/src/6f778f17172a/example/bootstrap.js"&gt;example&lt;/a&gt; is in
order:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;ircSimpleExample&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// The name here is really only used in error messages.&lt;/span&gt;
  &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;IRC Simple Example&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="c1"&gt;// Slightly above the default priority so we run before the main IRC handler.&lt;/span&gt;
  &lt;span class="nx"&gt;priority&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ircHandlers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DEFAULT_PRIORITY&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="c1"&gt;// Run this for all accounts (note that the &amp;#39;this&amp;#39; object in this method is&lt;/span&gt;
  &lt;span class="c1"&gt;// the JavaScript account object.&lt;/span&gt;
  &lt;span class="nx"&gt;isEnabled&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

  &lt;span class="c1"&gt;// The commands we want to handle. For each of these, the account object is&lt;/span&gt;
  &lt;span class="c1"&gt;// bound to &amp;#39;this&amp;#39; and the single parameter is of the type that you&amp;#39;ve&lt;/span&gt;
  &lt;span class="c1"&gt;// registered your handle.&lt;/span&gt;
  &lt;span class="nx"&gt;commands&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;001&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aMessage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// At the 001 response we&amp;#39;ve successfully connected to the server.&lt;/span&gt;
      &lt;span class="c1"&gt;// Send an IDENTIFY command to NickServ.&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;PRIVMSG&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;NickServ&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;IDENTIFY &amp;lt;your password&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

      &lt;span class="c1"&gt;// Return false so the default handler still runs.&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Just like that we've designed a handler! Whenever the 001 method is
received from the server, this function will run and attempt to identify
with the NickServ (of course this could use a bit more security on it,
but it's to demonstrate the possibilities). (The sendMessage function
takes the command to send and an array of parameters to send.)&lt;/p&gt;
&lt;p&gt;As this is already a long post, I think I'll cut this off now and
continue this at another time, but I hope I'm beginning to convince you
that allowing directy access to the account and protocol implementation
is a more powerful (and even simpler in many ways, in my opinion)
alternative to &amp;quot;auto-performs&amp;quot;. The one major downside I see to this, is
that it requires a bit more understanding of the actual protocol level
implementation, I don't feel that knowing you need to use &amp;quot;PRIVMSG&amp;quot; as a
command instead of /msg is a huge issue, however.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Instantbird"></category><category term="IRC"></category><category term="Mozilla"></category></entry><entry><title>Why rewrite the IRC protocol plugin? (Part 2)</title><link href="http://patrick.cloke.us/why-rewrite-the-irc-protocol-plugin-part-2.html" rel="alternate"></link><updated>2011-04-30T17:01:00-04:00</updated><author><name>Patrick Cloke</name></author><id>tag:patrick.cloke.us,2011-04-30:why-rewrite-the-irc-protocol-plugin-part-2.html</id><summary type="html">&lt;p&gt;I &lt;a class="reference external" href="http://patrick.cloke.us/why-rewrite-irc-into-javascript-vs-libpurples-vs-chatzillas.html"&gt;previously wrote about&lt;/a&gt; why I'm rewriting the libpurple IRC
implementation into a JavaScript implementation for Instantbird.&amp;nbsp; This
is kind of a follow up, but more focused on what I hope to accomplish
feature wise for IRC in Instantbird.&amp;nbsp; A good overview to look at is the
&lt;a class="reference external" href="https://bugzilla.instantbird.org/showdependencygraph.cgi?id=507&amp;amp;display=web&amp;amp;rankdir=LR"&gt;dependencies of bug 507&lt;/a&gt; (implement IRC in JavaScript) -- you'll want
to look to the left of bug 507, these are the bugs that depend on 507
(as opposed to blocking 507).&lt;/p&gt;
&lt;p&gt;My overall hope is to make Instantbird the easiest and simplest IRC
client to use.&amp;nbsp; I've found that most IRC clients tend to depend a great
deal on commands and essentially being a very thin GUI layer on top of
the protocol.&amp;nbsp; I don't really see the reason for this, we should attempt
to hide the protocol as much as possible from the users.&amp;nbsp; This means
fitting the IRC command responses into the GUI wherever possible and
possibly &amp;quot;losing&amp;quot; some features compared to other IRC clients, although
I think that's a matter of perspective.&amp;nbsp; (For example, there's often an
IRC command to list all the channels available, I &lt;em&gt;do not&lt;/em&gt; think this
should be implemented as a text command, but it should be available via
the join chat GUI).&lt;/p&gt;
&lt;p&gt;Now some more specific plans:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Support for IRC services would be pretty awesome, I'm not sure
whether this would be part of the main protocol or as an extension,
but it should be able to handle NickServ mostly autonomously
(possibly even automatically registering the nick, etc.).&amp;nbsp; MemoServ
could be implemented as a message service once there is UI for that
in Instantbird.&amp;nbsp; I'm not sure how ChanServ could be handled in the
UI, but I'll think more about this.&amp;nbsp; See &lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=720"&gt;bug 720&lt;/a&gt; for more info.
(And yes, there are multiple versions of IRC services, but we can
attempt to support a subset and otherwise just leave it up to the
user.&amp;nbsp; Ideally servers would have supported this stuff...but that's
not how IRC works.)&lt;/li&gt;
&lt;li&gt;The UI should be more responsive to the modes of the user and to the
channel.&amp;nbsp; For example, if the user does not have permission to edit
the topic, it should not be editable in the UI (&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=318"&gt;bug 318&lt;/a&gt;).&amp;nbsp; Also,
if a user is a (half-)operator, there should be UI to have cause
other users to be given (h)op (&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=597"&gt;bug 597&lt;/a&gt;).&amp;nbsp; In terms of channel
modes, there could be UI to show the channel is invite only or that
it's a hidden channel.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There's some not as user visible improvements I'd like to make:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Supporting more authentication methods in IRC (&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=719"&gt;bug 719&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There's also a few &amp;quot;bugs&amp;quot; in the libpurple implementation that this
will fix:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The /msg command doesn't show outgoing messages (&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=188"&gt;bug 188&lt;/a&gt;).&amp;nbsp; I
believe this is actually already fixed.&lt;/li&gt;
&lt;li&gt;IRC channels should automatically rejoin on reconnect (&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=385"&gt;bug 385&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Chats with other users should show whether they are available or not
(&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=613"&gt;bug 613&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These are just some ideas and it's a long ways off for feature parity
with libpurple even.&amp;nbsp; (Although since Instantbird doesn't support all
the features of Pidgin, feature-parity in this case doesn't include
things like DCC transfer, etc. until Instantbird itself supports those.)&lt;/p&gt;
&lt;p&gt;Right now, the code is mostly usable (and I'm finally catching any
exceptions that are thrown so the code shouldn't crash anymore), and
works fine.&amp;nbsp; The one issue I'm having is sometimes I'm unable to
reconnect when the connection is lost, but I think I've finally fixed
that issue and reconnection should happen automatically!&lt;/p&gt;
&lt;p&gt;One last quick note, if you happen to have the &lt;a class="reference external" href="https://hg.instantbird.org/experiments"&gt;repository&lt;/a&gt; checked
out, you'll want to update on the default branch from now on as I've
merged the separate branches together under subfolders.&lt;/p&gt;
</summary><category term="Instantbird"></category><category term="IRC"></category></entry><entry><title>The so-called IRC "specifications"</title><link href="http://patrick.cloke.us/the-so-called-irc-specifications.html" rel="alternate"></link><updated>2011-03-09T01:20:00-05:00</updated><author><name>Patrick Cloke</name></author><id>tag:patrick.cloke.us,2011-03-09:the-so-called-irc-specifications.html</id><summary type="html">&lt;p&gt;In a &lt;a class="reference external" href="http://patrick.cloke.us/why-rewrite-irc-into-javascript-vs-libpurples-vs-chatzillas.html"&gt;previous post&lt;/a&gt; I had briefly gone over the &amp;quot;history of IRC&amp;quot; as
I know it.&amp;nbsp; I'm going to expand on this a bit as I've come to understand
it a bit more while reading through documentation.&amp;nbsp; (Hopefully it won't
sound too much like a rant, as it is all driving me crazy!)&lt;/p&gt;
&lt;div class="section" id="irc-specifications"&gt;
&lt;h2&gt;IRC Specifications&lt;/h2&gt;
&lt;p&gt;So there's the original specification (&lt;a class="reference external" href="http://tools.ietf.org/html/rfc1459"&gt;RFC 1459&lt;/a&gt;) in May 1993; this
was expanded and replaced by four different specifications (&lt;a class="reference external" href="http://tools.ietf.org/html/rfc2810"&gt;RFC 2810&lt;/a&gt;,
&lt;a class="reference external" href="http://tools.ietf.org/html/rfc2811"&gt;2811&lt;/a&gt;, &lt;a class="reference external" href="http://tools.ietf.org/html/rfc2812"&gt;2812&lt;/a&gt;, &lt;a class="reference external" href="http://tools.ietf.org/html/rfc2813"&gt;2813&lt;/a&gt;) in April 2000.&amp;nbsp; Seems pretty straightforward,
right?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="dcc-ctcp"&gt;
&lt;h2&gt;DCC/CTCP&lt;/h2&gt;
&lt;p&gt;Well, kind of...there's also the DCC/CTCP specifications, which is a
separate protocol embedded/hidden within the IRC protocol (e.g. they're
sent as IRC messages and parsed specially by clients, the server sees
them as normal messages).&amp;nbsp; DCC/CTCP is used to send files as well as
other particular messages (ACTION commands for roleplaying, SED for
encrypting conversations, VERSION to get client information, etc.).
Anyway, this get's a bit more complicated -- it starts with the &lt;a class="reference external" href="http://www.irchelp.org/irchelp/rfc/dccspec.html"&gt;DCC
specification&lt;/a&gt;.&amp;nbsp; This was replaced/updated by the &lt;a class="reference external" href="http://www.irchelp.org/irchelp/rfc/ctcpspec.html"&gt;CTCP specification&lt;/a&gt;
(which fully includes the DCC specification) in 1994.&amp;nbsp; An &lt;a class="reference external" href="http://www.invlogic.com/irc/ctcp.html"&gt;&amp;quot;updated&amp;quot;
CTCP specification&lt;/a&gt; was released in February 1997.&amp;nbsp; There's also a
&lt;a class="reference external" href="http://www.invlogic.com/irc/ctcp2_intro.html"&gt;CTCP/2 specification&lt;/a&gt; from October 1998, which was meant to
reformulate a lot of the previous three versions.&amp;nbsp; And &lt;em&gt;finally&lt;/em&gt;,
there's the DCC2 specification (two parts: &lt;a class="reference external" href="http://tools.ietf.org/html/draft-smith-irc-dcc2-negotiation-00"&gt;connection negotiation&lt;/a&gt; and
&lt;a class="reference external" href="http://www.dcc2.org/files/dcc2/draft-smith-irc-dcc2-files-00.txt"&gt;file transfers&lt;/a&gt;) from April 2004.&lt;/p&gt;
&lt;p&gt;But wait!&amp;nbsp; I lied...that's not really the end of DCC/CTCP, there's
also a bunch of extensions to it: &lt;a class="reference external" href="http://www.visualirc.net/tech-tdcc.php"&gt;Turbo DCC&lt;/a&gt;, &lt;a class="reference external" href="http://xa.bi/files/irc/xdcc.3.3.0b.irc"&gt;XDCC (eXtended DCC)&lt;/a&gt;
in 1993, &lt;a class="reference external" href="http://www.visualirc.net/tech-wboard.php"&gt;DCC Whiteboard&lt;/a&gt;, and a few other variations of this: RDCC
(Reverse DCC), SDD (Secure DCC), DCC Voice, etc.&amp;nbsp; Wikipedia has a &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Direct_Client-to-Client"&gt;good
summary&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Something else to note about the whole DCC/CTCP mess...parts of it
just &lt;em&gt;don't&lt;/em&gt; have any documentation.&amp;nbsp; There's &lt;em&gt;none&lt;/em&gt;at all for SED (at
least that I've found, I'd love to be proved wrong) and very little
(really just a mention) for DCC Voice.&lt;/p&gt;
&lt;p&gt;So, we're about halfway through now.&amp;nbsp; There's a bunch of extensions to
the IRC protocol specifications that add new commands to the actual
protocol.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="authentication"&gt;
&lt;h2&gt;Authentication&lt;/h2&gt;
&lt;p&gt;Originally IRC had no authentication ability except the PASS command,
which very few servers seem to use, a variety of mechanisms have
replaced this, including &lt;a class="reference external" href="http://hg.atheme.org/atheme/atheme/raw-file/tip/doc/SASL"&gt;SASL authentication&lt;/a&gt; (both PLAIN and BLOWFISH
methods, although BLOWFISH isn't documented); and SASL itself is covered
by at least &lt;a class="reference external" href="http://tools.ietf.org/html/rfc2222"&gt;four&lt;/a&gt; &lt;a class="reference external" href="http://tools.ietf.org/html/rfc4422"&gt;RFCs&lt;/a&gt; &lt;a class="reference external" href="http://tools.ietf.org/html/rfc2595"&gt;in this&lt;/a&gt; &lt;a class="reference external" href="http://tools.ietf.org/html/rfc4616"&gt;situation&lt;/a&gt;.&amp;nbsp; There also seems
to be a method called &amp;quot;Auth&amp;quot; which I haven't been able to pin down, as
well as Ident (which is a more general protocol authentication method I
haven't looked into yet).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="extension-support"&gt;
&lt;h2&gt;Extension Support&lt;/h2&gt;
&lt;p&gt;This includes a few that generally add a way by which servers are able
to tell their clients exactly what a server supports.&amp;nbsp; The first of
these was RPL_ISUPPORT, which was defined as a &lt;a class="reference external" href="http://tools.ietf.org/html/draft-brocklesby-irc-isupport-03"&gt;draft specification&lt;/a&gt;
in January 2004, and &lt;a class="reference external" href="http://tools.ietf.org/html/draft-hardy-irc-isupport-00"&gt;updated&lt;/a&gt; in January of 2005.&lt;/p&gt;
&lt;p&gt;A similar concept was defined as &lt;a class="reference external" href="http://tools.ietf.org/html/draft-mitchell-irc-capabilities-01"&gt;IRC Capabilities&lt;/a&gt; in March 2005.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="protocol-extensions"&gt;
&lt;h2&gt;Protocol Extensions&lt;/h2&gt;
&lt;p&gt;IRCX, a Microsoft extension to IRC used (at one point) for some of
it's instant messaging products &lt;a class="reference external" href="http://tools.ietf.org/html/draft-pfenning-irc-extensions-04"&gt;exists as a draft&lt;/a&gt; from June 1998.&lt;/p&gt;
&lt;p&gt;There's also:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The &lt;a class="reference external" href="http://hg.atheme.org/charybdis/charybdis/raw-file/tip/doc/monitor.txt"&gt;MONITOR&lt;/a&gt; command.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://hg.atheme.org/charybdis/charybdis/raw-file/tip/doc/modeg.txt"&gt;User mode +g&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://hg.atheme.org/charybdis/charybdis/raw-file/tip/doc/services.txt"&gt;Services compatibility modes&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://hg.atheme.org/charybdis/charybdis/raw-file/tip/doc/account-notify.txt"&gt;Account-notify client capability&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://hg.atheme.org/charybdis/charybdis/raw-file/tip/doc/tgchange.txt"&gt;Target change for messages&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="services"&gt;
&lt;h2&gt;Services&lt;/h2&gt;
&lt;p&gt;To fill in some of the missing features of IRC, services were created
(Wikipedia has a good &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Internet_Relay_Chat_services"&gt;summary&lt;/a&gt; again).&amp;nbsp; This commonly includes
ChanServ, NickServ, OperServ, and MemoServ.&amp;nbsp; Not too hard, but different
server packages include different services (or even the same services
that behave differently), one of more common ones is &lt;a class="reference external" href="http://www.anope.org/docgen/1.8/en_us/"&gt;Anope&lt;/a&gt;, however
(plus they have awesome documentation, so they get a link).&lt;/p&gt;
&lt;p&gt;There was an attempt to standardize how to interact with services
called IRC+, which included three specifications: &lt;a class="reference external" href="http://www.irc-plus.org/specs/confctrl-draft.html"&gt;conference control
protocol&lt;/a&gt;, &lt;a class="reference external" href="http://www.irc-plus.org/specs/identity-draft.html"&gt;identity protocol&lt;/a&gt; and &lt;a class="reference external" href="http://www.irc-plus.org/specs/subscriptions-draft.html"&gt;subscriptions protocol&lt;/a&gt;.&amp;nbsp; I don't
believe this are supported widely (if at all).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="irc-url-scheme"&gt;
&lt;h2&gt;IRC URL Scheme&lt;/h2&gt;
&lt;p&gt;Finally this brings us to the IRC URL scheme of which there are a few
versions.&amp;nbsp; A draft from August 1996 defines the original &lt;a class="reference external" href="http://tools.ietf.org/html/draft-mirashi-url-irc-01"&gt;irc: URL
scheme&lt;/a&gt;.&amp;nbsp; This was updated/replaced by &lt;a class="reference external" href="http://tools.ietf.org/html/draft-butcher-irc-url-04"&gt;another draft&lt;/a&gt; which defines
irc: and ircs: URL schemes.&lt;/p&gt;
&lt;p&gt;As of right now that's all that I've found...an awful lot.&amp;nbsp; Plus it's
not all compatible with each other (and sometimes out right contradicts
each other).&amp;nbsp; Often newer specifications say not to support older
specifications, but who knows what servers/clients you'll end up talking
to!&amp;nbsp; It's difficult to know what's used in practice, especially since
there's an awful lot of &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Comparison_of_IRC_daemons"&gt;IRC servers&lt;/a&gt; out there.&amp;nbsp; Anyway, if someone
does know of another specification, etc. that I missed please let me
know!&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Instantbird"></category><category term="IRC"></category><category term="programming"></category><category term="specifications"></category></entry><entry><title>Status Update - February 17, 2011</title><link href="http://patrick.cloke.us/status-update-february-17-2011.html" rel="alternate"></link><updated>2011-02-17T23:21:00-05:00</updated><author><name>Patrick Cloke</name></author><id>tag:patrick.cloke.us,2011-02-17:status-update-february-17-2011.html</id><summary type="html">&lt;p&gt;Another month has gone by so it's time for another status update.
Unfortunately not as much got done this month as I was hoping, but
here's a quick update of what I've worked on:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=690"&gt;Bug 690&lt;/a&gt; - jsProtoHelper could help registering commands&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=661"&gt;Bug 661&lt;/a&gt; - JavaScript accounts do not automatically set
containsNick field on messages&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=686"&gt;Bug 686&lt;/a&gt; - Implement default chat name for
getChatRoomDefaultFieldValues for js-proto&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Florian also implemented a few things that are really helpful for
JavaScript protocols:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=649"&gt;Bug 649&lt;/a&gt; - purple proxies should not be in the way of JavaScript
protocols&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=118"&gt;Bug 118&lt;/a&gt; - Extensions should be able to register commands.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In addition, Twitter support was added to nightly builds as a
JavaScript protocol (&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=598"&gt;bug 598&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Hopefully next I'll implement most of the commands for IRC (within the
next week) at which point I'll release a sample extension (which will
overwrite the libpurple IRC implementation), allowing people to test
without needing to make a new account, etc.&lt;/p&gt;
</summary><category term="Instantbird"></category><category term="IRC"></category><category term="programming"></category></entry><entry><title>Status Update - January 18, 2011</title><link href="http://patrick.cloke.us/status-update-january-18-2011.html" rel="alternate"></link><updated>2011-01-19T03:17:00-05:00</updated><author><name>Patrick Cloke</name></author><id>tag:patrick.cloke.us,2011-01-19:status-update-january-18-2011.html</id><summary type="html">&lt;p&gt;I haven't had an update in a few weeks (since early December)
actually, so I thought I would post a bit about what I've worked on.
I've fixed a bunch of bugs in the backend of Instantbird that allow work
on JavaScript IRC protocol to continue:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=519"&gt;Bug 519&lt;/a&gt; - Extend jsProtoHelper to implement purpleIConvChat
(&lt;a class="reference external" href="http://hg.instantbird.org/instantbird/rev/0166084ce2ae"&gt;check-in&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=495"&gt;Bug 495&lt;/a&gt; - purpleIAccount cannot access preferences via JavaScript
protocol (&lt;a class="reference external" href="http://hg.instantbird.org/instantbird/rev/a188a5cc3ff1"&gt;check-in&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=648"&gt;Bug 648&lt;/a&gt; -Provide a default JS implementation of
purpleIChatRoomField
(&lt;a class="reference external" href="http://hg.instantbird.org/instantbird/rev/61fc80a569d3"&gt;check-in&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;[Reviewed] &lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=647"&gt;Bug 647&lt;/a&gt; - Username split for JavaScript protocols
(&lt;a class="reference external" href="http://hg.instantbird.org/instantbird/rev/a6c8fbf77e10"&gt;check-in&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;[Reviewed] &amp;lt;no bug&amp;gt; -Share the nsIClassInfo implementation between
all the objects implemented in jsProtoHelper
(&lt;a class="reference external" href="http://hg.instantbird.org/instantbird/rev/035f7d8d7f78"&gt;check-in&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Also a few other random bugs I've worked on:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=625"&gt;Bug 625&lt;/a&gt; - Findbar broken on Windows in Conversation window
(&lt;a class="reference external" href="http://hg.instantbird.org/instantbird/rev/2e8af77af2f2"&gt;check-in&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=629"&gt;Bug 629&lt;/a&gt; - Remove workaround for bug 503048
(&lt;a class="reference external" href="http://hg.instantbird.org/instantbird/rev/ba4b9401791b"&gt;check-in&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=473"&gt;Bug 473&lt;/a&gt; - JS Logger line breaks don't play well on Windows
&lt;a class="reference external" href="http://hg.instantbird.org/instantbird/rev/6a600b8a32c9"&gt;(check-in&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=593"&gt;Bug 593&lt;/a&gt; - JavaScript component does not have a method named:
&amp;quot;onBeforeLinkTraversal&amp;quot;
(&lt;a class="reference external" href="http://hg.instantbird.org/instantbird/rev/1b75f9fa4859"&gt;check-in&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Although none of these are really things that weren't working a few
weeks ago, there are now real APIs for these for JavaScript protocols,
allowing other protocols to use them and to &lt;em&gt;FULLY&lt;/em&gt; implement them
instead of hard coding values.&amp;nbsp; In addition, a lot of the purplexpcom
layer is now hidden from JavaScript protocols.&lt;/p&gt;
&lt;p&gt;There's a few things left to do for the JavaScript protocol layer:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=118"&gt;Bug 118&lt;/a&gt; - Extensions should be able to register commands.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=650"&gt;Bug 650&lt;/a&gt; - JavaScript accounts must be notified of status changes
(a sketchy patch that exists that will work, but a better patch to
core should be done)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=623"&gt;Bug 623&lt;/a&gt; - Auto-Join option field is hard coded for certain
protocols (not &lt;em&gt;really&lt;/em&gt; necessary, since it's still IRC, but it
should be fixed)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=649"&gt;Bug 649&lt;/a&gt; - Proxy should be available to JavaScript protocols
(hopefully being handled by Florian)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A good summary of this is &lt;a class="reference external" href="https://bugzilla.instantbird.org/showdependencygraph.cgi?id=507&amp;amp;display=web&amp;amp;rankdir=LR"&gt;the dependency graph of bug 507&lt;/a&gt;
(Implement IRC in JavaScript).&amp;nbsp; Note that the IRC JavaScript work blocks
&lt;em&gt;a&amp;nbsp; lot&lt;/em&gt; of UI work done for IRC.&amp;nbsp; In particular Mook has been working
on implementing notifications (i.e. Invites, and perhaps a few other
commands), see &lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=628"&gt;Bug 628&lt;/a&gt;.&amp;nbsp; For other bugs, see the link above -- and if
there's a strange UI feature that you think should be added, please file
a bug and let us know about it!&lt;/p&gt;
&lt;p&gt;I've also worked a bit on sending outgoing text with rich formatting
(bold, italics, underline, text size, etc.), this work is being tracked
in &lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=634"&gt;Bug 634&lt;/a&gt;. There's a proof on concept, but a lot of work needs to be
done for it, but it's sort of working right now.&lt;/p&gt;
&lt;p&gt;As I alluded to in my last blog post, the JavaScript protocols would
be used to implement Twitter. Work for this is occurring in &lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=598"&gt;Bug 598&lt;/a&gt;,
where Florian has implemented (very) basic Twitter support.&lt;/p&gt;
&lt;p&gt;My plans for the next bit:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;I'm hoping to finish up some of the work blocking JavaScript
protocols so IRC can be put into a state that needs alpha/beta
testers (if you're interested in testing/hacking please drop me a
line here, on IRC or via email).&lt;/li&gt;
&lt;li&gt;Move into my new apartment&lt;/li&gt;
&lt;li&gt;Start my new job&lt;/li&gt;
&lt;li&gt;Work on richtext messages a bit more&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="Instantbird"></category><category term="IRC"></category><category term="Mozilla"></category><category term="programming"></category></entry><entry><title>Why Rewrite IRC into JavaScript? (vs. libpurple's vs. ChatZilla's)</title><link href="http://patrick.cloke.us/why-rewrite-irc-into-javascript-vs-libpurples-vs-chatzillas.html" rel="alternate"></link><updated>2010-12-08T18:29:00-05:00</updated><author><name>Patrick Cloke</name></author><id>tag:patrick.cloke.us,2010-12-08:why-rewrite-irc-into-javascript-vs-libpurples-vs-chatzillas.html</id><summary type="html">&lt;p&gt;I had a request on IRC (from Mic) to write an in-depth blog post
about &lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=507"&gt;IRC in JavaScript&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;Maybe we could ask clokep if he'd like to write something about
js-irc? Why it is done, what the advantages are once it's done, how
he is working on it (going through the specs), putting the
jsProtocol code to test and adding missing pieces?&amp;quot; -- &lt;a class="reference external" href="http://log.bezut.info/instantbird/101208/#m54"&gt;Mic&lt;/a&gt;&lt;/blockquote&gt;
&lt;div class="section" id="wait-a-second-what-is-irc"&gt;
&lt;h2&gt;Wait a second, what is IRC?&lt;/h2&gt;
&lt;p&gt;I guess this is a good first question, I'll steal from &lt;a class="reference external" href="http://en.wikipedia.org/wiki/IRC"&gt;Wikipedia&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
Internet Relay Chat (IRC) is a form of real-time [...] chat [...] It
is mainly designed for group communication [...] but also allows
[...for...] private message as well as chat and data transfers.&lt;/blockquote&gt;
&lt;p&gt;Awesome, what's that really mean?&amp;nbsp; It's an instant messaging protocol
with an actual specification (i.e. it's not owned by some large, unnamed
company), with open-source libraries for clients and servers.&amp;nbsp; It's
usually used by more computer-oriented types of people and centers
around group conversation.&amp;nbsp; Personally most of what I use it for is
open-source software I use (I'm almost always in &lt;a class="reference external" href="irc://irc.mozilla.org/#instantbird"&gt;#instantbird&lt;/a&gt;,
&lt;a class="reference external" href="irc://irc.mozilla.org/#maildev"&gt;#maildev&lt;/a&gt;, and &lt;a class="reference external" href="irc://irc.mozilla.org/#songbird"&gt;#songbird&lt;/a&gt; on &lt;a class="reference external" href="http://irc.mozilla.org/"&gt;Mozilla's IRC servers&lt;/a&gt;.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="why-it-is-done-what-advantages-are-there-once-this-is-done"&gt;
&lt;h2&gt;Why it is done?&amp;nbsp; What advantages are there once this is done?&lt;/h2&gt;
&lt;p&gt;I touched upon this a little in my &lt;a class="reference external" href="http://patrick.cloke.us/javascript-irc-in-instantbird.html"&gt;last post&lt;/a&gt;.&amp;nbsp; In terms of
Instantbird: there's an idea of switching some / all of the protocols
(eventually) to be JavaScript protocols instead of the libpurple
versions (libpurple is written mostly in C and is cross-platform, but
recent gains in speed in JavaScript allow this advantage of libpurple to
not matter as much).&amp;nbsp; This would unfortunately mean we need to maintain
a lot more code, but it would allow us to integrate protocols in any way
that we see fit, instead of only using APIs / methods provided by
libpurple.&amp;nbsp; Hopefully this would allow us to &lt;a class="reference external" href="https://bugzilla.instantbird.org/showdependencytree.cgi?id=507&amp;amp;maxdepth=2&amp;amp;hide_resolved=1"&gt;enhance our IRC
implementation&lt;/a&gt; a bit.&lt;/p&gt;
&lt;p&gt;Also, Instantbird (nightlies) currently have limited support for
generating a protocol plug-in in JavaScript.&amp;nbsp; A couple of &amp;quot;test&amp;quot;
protocols have be done, but nothing in &amp;quot;real&amp;quot; (in particular, none that
used a multi-user chat).&amp;nbsp; This would allow us to iron out &lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=519"&gt;some&lt;/a&gt;
&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=118"&gt;bugs&lt;/a&gt; in the implementation of JavaScript protocols.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;[Edit: Florian suggested another question that wasn't originally
covered, which some people more familiar with Mozilla code might be
wondering.]&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="why-aren-t-you-using-the-code-from-chatzilla"&gt;
&lt;h2&gt;Why aren't you using the code from ChatZilla?&lt;/h2&gt;
&lt;p&gt;This was a tough one.&amp;nbsp; Honestly when I first wanted a parsing
algorithm, I looked at the ChatZilla code, I used it.&amp;nbsp; Then rewrote it
in a fourth as many lines (&lt;a class="reference external" href="http://hg.mozilla.org/chatzilla/file/tip/js/lib/irc.js#l1250"&gt;93&lt;/a&gt; vs. &lt;a class="reference external" href="https://hg.instantbird.org/experiments/file/IRC-JavaScript/components/ircProtocol.js#l208"&gt;20&lt;/a&gt;).&amp;nbsp; Simply said, the code in
ChatZilla is &lt;em&gt;old&lt;/em&gt;, it doesn't use many of the features available only
in newer versions of JavaScript.&amp;nbsp; To that point, the ChatZilla code
hasn't been updated in over a year!&amp;nbsp; The last check-in was: 2009-10-03,
below is a &lt;a class="reference external" href="http://hg.mozilla.org/chatzilla/log/tip/js/lib/irc.js"&gt;quick summary&lt;/a&gt; of the number of check-ins per year:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;2010: 0&lt;/li&gt;
&lt;li&gt;2009: 5&lt;/li&gt;
&lt;li&gt;2008: 15&lt;/li&gt;
&lt;li&gt;2007: 11&lt;/li&gt;
&lt;li&gt;2006: 18&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There's been a pretty steady decline in check-ins.&amp;nbsp; I could take this
code and attempt to whip it into shape and make huge sweeping changes
and commit them back to ChatZilla, but honestly it was easier to start
over for me.&amp;nbsp; Regardless of ease, I'm not sure it would work any:
especially since the ChatZilla code seems overly complicated and overly
specific (since it wasn't really built as a library as far as I can
see), especially since all the code is meant to deal only with IRC.&amp;nbsp; The
Instantbird code needs to be protocol agnostic to a degree, while is why
it interfaces to purplexpcom.&lt;/p&gt;
&lt;p&gt;A quick example of this is: ChatZilla uses a CIRCUser object, but for
Instantbird I need to create either an imIContact or a
purpleIAccountBuddy (depending on the situation).&amp;nbsp; It's possible that's
can be abstracted and code shared -- but I'm not sure it would be worth
the effort.&amp;nbsp; After all this, I should probably look more into the
ChatZilla code, perhaps more of it could be used.&lt;/p&gt;
&lt;p&gt;(If someone familiar with the ChatZilla code base -- I don't know
who/if there's a maintainer -- is interested in talking with me, please
get in contact here or on #instantbird.&amp;nbsp; It's possible we could align
some of what I've been working on, but I'm not sure how much could be
shared besides the parsing algorithm).&lt;/p&gt;
&lt;p&gt;&lt;em&gt;[End edit]&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-are-the-specific-advantages-for-an-end-user"&gt;
&lt;h2&gt;What are the specific advantages for an end-user?&lt;/h2&gt;
&lt;p&gt;In terms of the IRC protocol itself, there shouldn't be any, my goal
is for it to be a drop in replacement for the libpurple implementation
with automatic account migration, etc. For end-users we can hopefully
solve &lt;a class="reference external" href="https://bugzilla.instantbird.org/showdependencytree.cgi?id=574&amp;amp;maxdepth=1&amp;amp;hide_resolved=1"&gt;a few annoying IRC UI issues&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-about-for-developers-anything-cool-there"&gt;
&lt;h2&gt;What about for developers?&amp;nbsp; Anything cool there?&lt;/h2&gt;
&lt;p&gt;Well, I'm hoping to be able to test this replacement via an extension
that replaces the libpurple IRC to dogfood it before eventual inclusion
in Instantbird.&amp;nbsp; I'm not sure if that counts as &amp;quot;cool.&amp;quot; though.&amp;nbsp; If
nothing else there will be an example of how to write a protocol in
JavaScript (using sockets).&amp;nbsp; So hopefully other people can make some
other cool protocols off of that example.&amp;nbsp; You might wonder what else we
have planned for JavaScript protocols; there are plans to make at least
a Twitter protocol.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-is-this-being-done"&gt;
&lt;h2&gt;How is this being done?&lt;/h2&gt;
&lt;p&gt;Well I said up above IRC has a specification, right?&amp;nbsp; Well, yes.
There's the &lt;a class="reference external" href="http://tools.ietf.org/html/rfc1459"&gt;original specification&lt;/a&gt;, this was superseded by &lt;a class="reference external" href="http://tools.ietf.org/html/rfc2810"&gt;four&lt;/a&gt;
&lt;a class="reference external" href="http://tools.ietf.org/html/rfc2811"&gt;different&lt;/a&gt; &lt;a class="reference external" href="http://tools.ietf.org/html/rfc2812"&gt;specification&lt;/a&gt; &lt;a class="reference external" href="http://tools.ietf.org/html/rfc2813"&gt;documents&lt;/a&gt;.&amp;nbsp; Of which we only really
care about one: &lt;a class="reference external" href="http://tools.ietf.org/html/rfc2812"&gt;the client protocol&lt;/a&gt;.&amp;nbsp; So we have this updated
specification (try reading it, it's rather painful), which is good.
It's relatively straightforward set of commands and responses/errors.
It's a bit more confusing than that though since there are a couple of
extensions, etc.&amp;nbsp; This is summarized below:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;[STRIKEOUT:RFC 1459]&lt;ul&gt;
&lt;li&gt;Extended with &lt;a class="reference external" href="http://www.irchelp.org/irchelp/rfc/dccspec.html"&gt;[STRIKEOUT:DCC specification (&amp;quot;direct client-to-client&amp;quot;)]&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Replaced with [STRIKEOUT:&lt;a class="reference external" href="http://www.irchelp.org/irchelp/rfc/dccspec.html"&gt;CTCP (&amp;quot;client-to-client protocol&amp;quot;)&lt;/a&gt;]&lt;ul&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.invlogic.com/irc/ctcp.html"&gt;Draft for a formalized CTCP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;(Apparently some people are working on a &lt;a class="reference external" href="http://www.dcc2.org/"&gt;DCC2&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Officially replaced with RFCs 2810, 2811, 2812, 2813&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A lot of this is being done by reading the specifications and finding
the proper responses, etc.&amp;nbsp; I've also used &lt;a class="reference external" href="http://www.wireshark.org/download.html"&gt;Wireshark&lt;/a&gt; a bit to see how
libpurple sends IRC commands (in particular, in what order it sends them
in).&amp;nbsp; A lot of my development is happening on live IRC servers, which
isn't really best practice, but I'm mostly sending commands by hand to
see the responses since a bunch of non-standard responses and extensions
have developed beyond the above.&amp;nbsp; I have been using &lt;a class="reference external" href="http://ircd.bircd.org/"&gt;beware irc&lt;/a&gt; to run
a daemon on my own machine, however.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="so-how-far-along-are-you"&gt;
&lt;h2&gt;So how far along are you?&lt;/h2&gt;
&lt;p&gt;I've started implementing RFC 2812 and have a variety of commands done
(the login sequence occurs automatically, the server connection is kept
alive, messages can be sent to a channel and are parsed when received, a
lot of the initial server information is displayed but unparsed).&amp;nbsp; But
there's a lot more to do!&amp;nbsp; As my last post outlined, I recently was able
to successfully get a chat to work in Instantbird from a silly bug I had
been having.&lt;/p&gt;
&lt;p&gt;It's rather slow going since I'll start to implement something from
the IRC side, and then realize the &lt;a class="reference external" href="http://hg.instantbird.org/instantbird/file/tip/purple/purplexpcom/src/jsProtoHelper.jsm"&gt;Instantbird layer&lt;/a&gt; (the jsProtocol
module) is missing a component I need.&amp;nbsp; One of the major parts of
working on this is extending the Instantbird layer to contain the proper
functions and objects needed to implement chats via JavaScript.&amp;nbsp; This is
usually the slowest going part of my code, since it involves interfacing
with Instantbird / &lt;a class="reference external" href="http://hg.instantbird.org/instantbird/file/tip/purple/purplexpcom/public/"&gt;purplexpcom&lt;/a&gt;.&amp;nbsp; Luckily Florian, the main developer
of Instantbird, has been a big help with this (as have other
participants of #instantbird -- in particular I know Mic helped track
down a few syntax type bugs).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-s-next"&gt;
&lt;h2&gt;What's next?&lt;/h2&gt;
&lt;p&gt;Now that have the basics of chat working, I need to start handling the
QUIT, PART and JOIN commands for when other users enter &amp;amp; leave chat
rooms.&amp;nbsp; Once these are complete it should be quite usable, although the
entire preference system still doesn't exist, including notifying the UI
of what options are available.&amp;nbsp; In addition, I need to look into doing
SSL sockets.&lt;/p&gt;
&lt;p&gt;Once the protocol plug-in is done, we plan to abstract sections of it
that will be useful for other protocols (in particular the socket
connection aspects).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="where-can-i-see-this-stuff"&gt;
&lt;h2&gt;Where can I see this stuff...?&lt;/h2&gt;
&lt;p&gt;My work is kept in the &amp;quot;&lt;a class="reference external" href="https://hg.instantbird.org/experiments/file/IRC-JavaScript/"&gt;experiments&lt;/a&gt;&amp;quot; repository on Instantbird's
&lt;a class="reference external" href="http://mercurial.selenic.com/"&gt;Mercurial&lt;/a&gt; repository.&amp;nbsp; There's also a variety of bugs open (they're
listed above, I'm not going to re-list them), although not a ton is
happening in them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-can-i-help"&gt;
&lt;h2&gt;How can I help?!&lt;/h2&gt;
&lt;p&gt;Well you can of course feel free to download the code and hack on it,
let me know (via IRC or any of the bugs most likely) if you have a patch
you'd like me to apply.&amp;nbsp; Or if you just found something that doesn't
work you can feel free to let me know, although I probably just haven't
gotten around to fixing it yet.&lt;/p&gt;
&lt;p&gt;Also, if you've ever found something annoying / broken in the IRC
implementation in Instantbird / libpurple please let us know (through
any of the above contact sources).&lt;/p&gt;
&lt;p&gt;Hopefully that's a bit of a better explanation of why we're spending
time to rewrite the IRC protocol implementation into JavaScript -- we
definitely think it's worth it and can lead to a bunch of new unique
protocol plug-ins for Instantbird.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Instantbird"></category><category term="IRC"></category><category term="Mozilla"></category><category term="programming"></category></entry><entry><title>JavaScript IRC in Instantbird</title><link href="http://patrick.cloke.us/javascript-irc-in-instantbird.html" rel="alternate"></link><updated>2010-12-04T21:24:00-05:00</updated><author><name>Patrick Cloke</name></author><id>tag:patrick.cloke.us,2010-12-04:javascript-irc-in-instantbird.html</id><summary type="html">&lt;p&gt;I've been working on rewriting the IRC plugin for &lt;a class="reference external" href="http://www.instantbird.com/"&gt;Instantbird&lt;/a&gt; since
the summer (sometime in August, I can't seem to find the exact date --
at least since Sept. 10th though).&lt;/p&gt;
&lt;p&gt;Since &lt;a class="reference external" href="http://developer.pidgin.im/wiki/WhatIsLibpurple"&gt;libpurple&lt;/a&gt; (used in Pidgin, Adium, etc.) provides the IRC
protocol that we currently use, why do this?&amp;nbsp; One reason is to iron out
(and find) some of the bugs left in implementing protocols in JavaScript
and part of it is so I can learn to code better.&amp;nbsp; Unfortunately during
this semester I was not able to get as much done as I had hoped and
almost everything that had been done was finished in August/September&lt;/p&gt;
&lt;p&gt;Some big milestones I've completed (with dates if I have them):&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Connected to server via sockets in JavaScript&lt;/li&gt;
&lt;li&gt;Generate a conversation that works as a raw connection to the server
(i.e. as if you had opened a telnet connection to the server)&lt;/li&gt;
&lt;li&gt;Parsing messages and automatic ponging when the server pings&lt;/li&gt;
&lt;li&gt;Joining a channel (2010/12/04, i.e. today!)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There had been a bunch of small bugs I had been having in getting this
to work: one error, (which I found quickly) one of the other developers
(&lt;a class="reference external" href="http://queze.net/"&gt;Florian&lt;/a&gt;) was able to help me out with, was that I was not initiating
a &lt;strong&gt;new&lt;/strong&gt; object.&amp;nbsp; And after learning a bit above observers I was able
to get the UI to respond.&amp;nbsp; I even threw in support for op/half-op/voice
After today's work I was able to generate the following screenshot:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://patrick.cloke.us/images/IRCworking2.png"&gt;&lt;img alt="IRCworking" src="http://patrick.cloke.us/images/IRCworking2.png" style="height: 297px;" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This build would be almost fully usable by those who do very little on
IRC (i.e. if you just want to go and chat, it'd work well), but there's
a lot more work to be done.&amp;nbsp; The code can be viewed in the &lt;a class="reference external" href="https://hg.instantbird.org/experiments/file/IRC-JavaScript/"&gt;Experiments
repository&lt;/a&gt;.&amp;nbsp; (Check it out, there's a 600+ line switch statement.)&lt;/p&gt;
</summary><category term="Instantbird"></category><category term="IRC"></category><category term="Mozilla"></category><category term="programming"></category></entry></feed>