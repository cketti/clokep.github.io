<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Like bricks in the sky</title><link href="https://clokep.github.io/" rel="alternate"></link><link href="https://clokep.github.io/feeds/tag/programming.atom.xml" rel="self"></link><id>https://clokep.github.io/</id><updated>2014-04-27T17:46:00-04:00</updated><entry><title>Extending JavaScript Maps (or other built-in objects)</title><link href="https://clokep.github.io/extending-javascript-maps-or-other-built-in-objects.html" rel="alternate"></link><updated>2014-04-27T17:46:00-04:00</updated><author><name>Patrick Cloke</name></author><id>tag:https://clokep.github.io,2014-04-27:extending-javascript-maps-or-other-built-in-objects.html</id><summary type="html">&lt;p&gt;Finally another technical post, this one is about my adventures in
attempting to extend the built-in &lt;a class="reference external" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map"&gt;Map&lt;/a&gt; object in JavaScript to extend
the functionality. As background, there are two reasons we'd want this:&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;In the chat backend we currently use JavaScript &lt;a class="reference external" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object"&gt;objects&lt;/a&gt; (&lt;tt class="docutils literal"&gt;{}&lt;/tt&gt;) as
hashes/maps to keep track of various things (i.e. there's a &lt;a class="reference external" href="https://mxr.mozilla.org/comm-central/source/chat/protocols/irc/irc.js#789"&gt;hash of
conversations&lt;/a&gt; which map from conversation name to prplIConversation
objects in the IRC code). Whenever checking to see if something is in
this map we have to use &lt;a class="reference external" href="https://mxr.mozilla.org/comm-central/source/chat/protocols/irc/irc.js#1509"&gt;hasOwnProperty&lt;/a&gt;. This has to be the
&lt;a class="reference external" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty"&gt;version from Object.prototype&lt;/a&gt; in case the map has a conversation
named hasOwnProperty. This is &lt;a class="reference external" href="https://mxr.mozilla.org/comm-central/source/chat/modules/imXPCOMUtils.jsm#166"&gt;super simple code&lt;/a&gt;, but annoying:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// Similar to Object.hasOwnProperty, but doesn&amp;#39;t fail if the object&lt;/span&gt;
&lt;span class="c1"&gt;// has a hasOwnProperty property set.&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;hasOwnProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aObject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;aPropertyName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hasOwnProperty&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aObject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;aPropertyName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a class="reference external" href="https://bugzilla.mozilla.org/show_bug.cgi?id=955366"&gt;Replacing these custom objects with a Map&lt;/a&gt; would alleviate this
funky dance.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Frequently in the chat backend we have to &amp;quot;normalize&amp;quot; &lt;a class="footnote-reference" href="#id4" id="id1"&gt;[1]&lt;/a&gt; strings
(e.g. #INsTanTBIrd and #instantbird are the same on IRC &lt;a class="footnote-reference" href="#id5" id="id2"&gt;[2]&lt;/a&gt;). This is
almost always done for sane storage of data received from the network
(or from the user). I figured it'd be great if, instead of having to
&lt;a class="reference external" href="https://mxr.mozilla.org/comm-central/source/chat/protocols/irc/irc.js#1510"&gt;manually&lt;/a&gt; &lt;a class="reference external" href="https://mxr.mozilla.org/comm-central/source/chat/protocols/irc/irc.js#1514"&gt;handle&lt;/a&gt; &lt;a class="reference external" href="https://mxr.mozilla.org/comm-central/source/chat/protocols/irc/irc.js#1528"&gt;this&lt;/a&gt; normalization each time we tried to
access data, the keys were magically normalized when accessing the
data.
(Note that although normalization is generally more complicated, just
consider to be &lt;a class="reference external" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase"&gt;String.prototype.toLowerCase()&lt;/a&gt; for the rest of this
post!)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This has been explored before by &lt;a class="reference external" href="http://perfectionkills.com/how-ecmascript-5-still-does-not-allow-to-subclass-an-array/"&gt;others&lt;/a&gt;, but generally in the
context of web sites / cross browser compatibility. Which are concerns
that don't really limit us for backend code.&lt;/p&gt;
&lt;div class="section" id="goals"&gt;
&lt;h2&gt;Goals&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Replace objects with Maps for safe access. This is pretty easily
fixed by switching all &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;obj[&amp;quot;foo&amp;quot;]&lt;/span&gt;&lt;/tt&gt; calls to &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;obj.get(&amp;quot;foo&amp;quot;)&lt;/span&gt;&lt;/tt&gt; (or the
appropriate other method: set, delete, etc.)&lt;/li&gt;
&lt;li&gt;Automatically &amp;quot;normalize&amp;quot; keys in the some user defined way, e.g.
such that &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;obj.get(&amp;quot;foo&amp;quot;)&lt;/span&gt;&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;obj.get(&amp;quot;FoO&amp;quot;)&lt;/span&gt;&lt;/tt&gt; return the same value.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="first-approach-setting-proto-to-map-prototype"&gt;
&lt;h2&gt;First Approach (setting __proto__ to Map.prototype)&lt;/h2&gt;
&lt;p&gt;My first naive approach was to create an object with &lt;tt class="docutils literal"&gt;__proto__&lt;/tt&gt; set
to Map.prototype and overwrite anything that uses keys to appropriately
call a normalization function.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;NormalizedMap&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;NormalizedMap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;__proto__&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;_normalize&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aStr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;aStr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;

    &lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aStr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_normalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aStr&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
    &lt;span class="nx"&gt;set&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aStr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;aVal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;set&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_normalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aStr&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;aVal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;NormalizedMap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Throws TypeError: set method called on incompatible Object&lt;/span&gt;
&lt;span class="nx"&gt;m&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="nx"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// true . . . wat . . .&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This throws an error and does not work. Apparently there are plans to
&lt;a class="reference external" href="https://bugzilla.mozilla.org/show_bug.cgi?id=838540"&gt;support something like this&lt;/a&gt;. The totally fun thing, in my opinion, is
that m is an instance of a Map!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="second-approach-modifying-proto-after-instance-creation"&gt;
&lt;h2&gt;Second Approach (modifying __proto__ after instance creation)&lt;/h2&gt;
&lt;p&gt;My second approach was to generate a real Map and then override the
&lt;tt class="docutils literal"&gt;__proto__&lt;/tt&gt; to give it the properties I wanted:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;NormalizedMap&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;  &lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;__proto__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;NormalizedMap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;NormalizedMap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;__proto__&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;_normalize&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aStr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;aStr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aStr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_normalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aStr&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
    &lt;span class="nx"&gt;set&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aStr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;aVal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;set&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_normalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aStr&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;aVal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;NormalizedMap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;FOO&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 1&lt;/span&gt;
&lt;span class="nx"&gt;m&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="nx"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This actually works! But will &lt;a class="reference external" href="https://bugzilla.mozilla.org/show_bug.cgi?id=963519"&gt;throw a warning&lt;/a&gt; each time it is
created since changing an objects &lt;tt class="docutils literal"&gt;__proto__&lt;/tt&gt; is generally a bad idea.
I also thought of overriding individual methods, but this seemed
cumbersome and would increase the time in the constructor calls. (Which
occur during the start up of each account and is generally a resource
constrained time. No, I didn't profile this, it just seemed like bad
design.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="solution-wrapping-a-map"&gt;
&lt;h2&gt;Solution (wrapping a Map)&lt;/h2&gt;
&lt;p&gt;Finally I settled on the simple solution of just wrapping the Map in a
custom object. Initially I thought this would be frustrating to
re-declare every function (and prone to breakage in the future if new
methods are added), but there's a nice magic method
&lt;a class="reference external" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/noSuchMethod"&gt;__noSuchMethod__&lt;/a&gt; that fixes this! (Note that this is a
non-standard feature of SpiderMonkey.) &lt;tt class="docutils literal"&gt;__noSuchMethod__&lt;/tt&gt; allows an
object to intercept a call to a non-existent method (and in this case
call that same method on the internal Map object).&lt;/p&gt;
&lt;p&gt;Below is the final version that seems to act magically like a Map when
necessary (e.g. iterating the map works, all functions and properties
exist, the constructor works &lt;a class="footnote-reference" href="#id6" id="id3"&gt;[3]&lt;/a&gt;). I need to thank aleth (another chat
developer) who helped out quite a bit with this (and will ultimately be
reviewing this code)!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// A Map that automatically normalizes keys before accessing the values.&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;NormalizedMap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aNormalizeFunction&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;aIt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aNormalizeFunction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;function&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;NormalizedMap must have a normalize function!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_normalize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;aNormalizeFunction&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_map&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;([[&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_normalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;aIt&lt;/span&gt;&lt;span class="p"&gt;)]);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;NormalizedMap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;_map&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="c1"&gt;// The function to apply to all keys.&lt;/span&gt;
  &lt;span class="nx"&gt;_normalize&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

  &lt;span class="c1"&gt;// Anything that accepts a key as an input needs to be manually overridden.&lt;/span&gt;
  &lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aKey&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_normalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aKey&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
  &lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aKey&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_normalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aKey&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
  &lt;span class="nx"&gt;has&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aKey&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;has&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_normalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aKey&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
  &lt;span class="nx"&gt;set&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;aValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_normalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aKey&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;aValue&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;

  &lt;span class="c1"&gt;// Properties must be manually forwarded.&lt;/span&gt;
  &lt;span class="nx"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

  &lt;span class="c1"&gt;// Here&amp;#39;s where the magic happens. If a method is called that isn&amp;#39;t defined&lt;/span&gt;
  &lt;span class="c1"&gt;// here, just pass it to the internal _map object.&lt;/span&gt;
  &lt;span class="nx"&gt;__noSuchMethod__&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;aArgs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;aId&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_map&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;aArgs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The one downside of see of this is that properties must be declared
manually to forward to the internal &lt;tt class="docutils literal"&gt;_map&lt;/tt&gt; object. Maybe there is a
matching &lt;tt class="docutils literal"&gt;__noSuchProperty__&lt;/tt&gt; method I'm missing? Overall, I'm happy
with this solution, but please leave a comment if you can think of an
easier / better way to do this! (Or see a glaring way this will break!)&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id4" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;This is always a little bit of a sore subject in &lt;a class="reference external" href="irc://irc.mozilla.org/#instantbird"&gt;#instantbird&lt;/a&gt;
since we've had a variety of issues with this over the years. I think
we've fixed most of them at this point though!&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id5" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;As I've &lt;a class="reference external" href="https://clokep.github.io/the-so-called-irc-specifications.html"&gt;written before&lt;/a&gt;, IRC tends to have crazy specifications.
In IRC, &lt;a class="reference external" href="https://tools.ietf.org/html/rfc2812#section-2.2"&gt;the characters of A-Z[]\~ are considered the upper case of a-z{}|^&lt;/a&gt;
(&amp;quot;because of IRC's Scandinavian origin&amp;quot;). Oh, also this can
change based on an &lt;a class="reference external" href="http://tools.ietf.org/html/draft-brocklesby-irc-isupport-03#section-3.1"&gt;ISUPPORT response&lt;/a&gt; from the server to pure ASCII or
RFC 1459 casemapping (A-Z[]\ map to a-z{}|). It seems like this could
theoretically change at any point on a live server too, although that
would be INSANE and I hope no one ever does that.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id6" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id3"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;I wrote some xpcshell tests to ensure these properties work as
expected, but they're uhh...not up anywhere yet though. Oops.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</summary><category term="IM"></category><category term="Instantbird"></category><category term="programming"></category><category term="specifications"></category><category term="Thunderbird"></category><category term="Wat"></category></entry><entry><title>Instantbird Contact List Hack #2</title><link href="https://clokep.github.io/instantbird-contact-list-hack-2.html" rel="alternate"></link><updated>2012-01-15T14:00:00-05:00</updated><author><name>Patrick Cloke</name></author><id>tag:https://clokep.github.io,2012-01-15:instantbird-contact-list-hack-2.html</id><summary type="html">&lt;p&gt;There was a &lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=987"&gt;request&lt;/a&gt; on the Instantbird Bugzilla to always show
contacts in the contact list as the &amp;quot;big&amp;quot; contact (as shown when a
contact is selected).&amp;nbsp; Similarly to my &lt;a class="reference external" href="https://clokep.github.io/instantbird-contact-list-hack.html"&gt;last post&lt;/a&gt;, this can easily be
done with userChrome.css.&amp;nbsp; See the post if you don't know what
userChrome.css is.&lt;/p&gt;
&lt;p&gt;Again, we're simply going to always apply a specific CSS style to the
contacts, namely we'll be modifying the behavior of &lt;a class="reference external" href="http://lxr.instantbird.org/instantbird/source/instantbird/content/blist.css#38"&gt;blist.css&lt;/a&gt;.&amp;nbsp; I'm
sure you don't really care about that and just want the code, well I'll
oblige:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/* Expand all contacts to the big contact. */&lt;/span&gt;
&lt;span class="nx"&gt;contact&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;moz&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;binding&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;chrome://instantbird/content/contact.xml#contact-big&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;moz&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;box&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;orient&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;vertical&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;moz&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;box&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;align&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;stretch&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And that's it!&amp;nbsp; Restart Instantbird and you should always have big
contacts.&amp;nbsp; I haven't seen any issues of using this (missing or wrong
behavior), but of course your mileage might vary.&amp;nbsp; Have fun!&lt;/p&gt;
</summary><category term="customizing"></category><category term="Instantbird"></category><category term="programming"></category></entry><entry><title>Instantbird Contact List Hack</title><link href="https://clokep.github.io/instantbird-contact-list-hack.html" rel="alternate"></link><updated>2011-11-01T00:20:00-04:00</updated><author><name>Patrick Cloke</name></author><id>tag:https://clokep.github.io,2011-11-01:instantbird-contact-list-hack.html</id><summary type="html">&lt;p&gt;A friend of mine asked me if there was a way to have selected contacts
in the contact list NOT expand to two lines (where the status goes onto
the second line) in Instantbird.&lt;/p&gt;
&lt;p&gt;There's actually no option to do this in Instantbird, but with a
little &lt;a class="reference external" href="http://www-archive.mozilla.org/unix/customizing.html"&gt;userChrome&lt;/a&gt; tweak, we can easily get this behavior (although
with a couple caveats).&amp;nbsp; You should be able to add a new folder &lt;a class="reference external" href="http://instantbird.com/faq.html#profilefolder"&gt;inside
your profile&lt;/a&gt; called chrome.&amp;nbsp; Inside of this make a new file called
userChrome.css and place the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;#buddylistbox&lt;/span&gt;&lt;span class="nd"&gt;:focus&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;contact&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;selected&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;moz&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;binding&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url(&amp;quot;chrome://instantbird/content/contact.xml#contact&amp;quot;)&lt;/span&gt; &lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;moz&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;box&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;orient&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;horizontal&lt;/span&gt; &lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Save the file and restart...and that's it! Now your selected contacts
should be on one line, just like your unselected contacts.&lt;/p&gt;
&lt;p&gt;I did mention there was a caveat though! If you want to expand a
contact (to see all the protocols, etc. that you've merged together)
you'll need to use the arrow keys: right arrow expands a contact, left
arrow collapses a contact.&amp;nbsp; (You need to do this since the chevron icon
that lets you expand/collapse isn't shown on a non-selected contact.)&lt;/p&gt;
&lt;p&gt;(Some more technical details: we're forcing the standard contact
template to be used instead of the contact-big template, even when the
contact is expanded; i.e. we're overwriting the command given
&lt;a class="reference external" href="http://lxr.instantbird.org/instantbird/source/instantbird/content/blist.css#44"&gt;blist.css&lt;/a&gt;.)&lt;/p&gt;
</summary><category term="customizing"></category><category term="Instantbird"></category><category term="programming"></category></entry><entry><title>Adding a protocol to Instantbird (Part 2)</title><link href="https://clokep.github.io/adding-a-protocol-to-instantbird-part-2.html" rel="alternate"></link><updated>2011-09-03T14:31:00-04:00</updated><author><name>Patrick Cloke</name></author><id>tag:https://clokep.github.io,2011-09-03:adding-a-protocol-to-instantbird-part-2.html</id><summary type="html">&lt;p&gt;I had &lt;a class="reference external" href="https://clokep.github.io/adding-a-new-protocol-sipeoffice-communicator-to-instantbird-part-1.html"&gt;previously talked about adding a protocol to Instantbird&lt;/a&gt;,
that focused on adding SIPE (Microsoft Office Communicator support).
Since then I've been slowly working on defeating SIPE.&amp;nbsp; Fortunately I
found a few flags that help us compile it easily in Instantbird: we can
declare that we do &lt;em&gt;not&lt;/em&gt; have gmime and the standard libpurple MIME
functions will be used (they might not be as good, but it keeps from
adding &amp;gt;10 MB of source to Instantbird).&lt;/p&gt;
&lt;p&gt;Some modifications to the SIPE source were made to compile it in
Instantbird (note that most of the changes were probably more based on
using MSVC, than having to do with Instantbird).&amp;nbsp; The code is also
broken up into a few different sections the core, api, and purple are
ones we care about (they're working on making a general Office
Communicator protocol library, so the purple folder contains the
libpurple bindings that use the api, while the core is private).&lt;/p&gt;
&lt;div class="section" id="purple"&gt;
&lt;h2&gt;Purple&lt;/h2&gt;
&lt;p&gt;Changes to purple consisted mostly of ifdefs that remove some header
files not supported on Windows.&amp;nbsp; For example, I encountered a few of:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
#include &amp;lt;unistd.h&amp;gt;
&lt;/pre&gt;
&lt;p&gt;Luckily there was already a define &lt;tt class="docutils literal"&gt;HAVE_UNISTD_H&lt;/tt&gt;, so I just needed
to add:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
#ifdef HAVE_UNISTD_H
#include &amp;lt;unistd.h&amp;gt;
#endif
&lt;/pre&gt;
&lt;p&gt;Easy!&amp;nbsp; There were also a couple other issues, but those were rather
trivial.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="core"&gt;
&lt;h2&gt;Core&lt;/h2&gt;
&lt;p&gt;There isn't a specific issue in the core I'd like to highlight, it did
use a few glib functions which we didn't have (we removed the files, as
they were unused), they were all reimplemented in libpurple though, so
we were able to just define the function calls to the libpurple
variants.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="api"&gt;
&lt;h2&gt;API&lt;/h2&gt;
&lt;p&gt;This had similar issues the core (in particular, there was a function
which used &lt;tt class="docutils literal"&gt;g_usleep&lt;/tt&gt;, which is blocking and a definite no-no for a
protocol plug-in, I've removed that...hopefully it doesn't break
anything!)&amp;nbsp; In addition to that, we needed to use the libpurple l10n
system instead of glib's gi18n.h, this was easily copied from
libpurple's internal API though.&lt;/p&gt;
&lt;p&gt;So at this point...I have a copy of SIPE compiled!&amp;nbsp; Unfortunately
since I'm using Visual Studio Express I cannot compile on my computer
and deploy to other computers for testing (a Mozilla issue with how it
uses some of the header files, etc., I believe).&amp;nbsp; I'm looking into
trying to get this to work though, apparently using the exact same copy
of MSVC Redistributable might help.&amp;nbsp; Once this is tested, hopefully
it'll land in Instantbird for use!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="sametime-support"&gt;
&lt;h2&gt;Sametime support&lt;/h2&gt;
&lt;p&gt;Unrelated to SIPE, but recently I landed a patch in Instantbird to add
back Sametime support (Sametime is Lotus Notes' equivalent to Office
Communicator).&amp;nbsp; You can see the gory details in &lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=102"&gt;bug 102&lt;/a&gt;, but in
general it's similar to what I've (not gone into great detail about)
here. Most of getting Sametime to work was rewriting some C code
that doesn't compile in MSVC.&amp;nbsp; There's also a &lt;a class="reference external" href="https://bugzilla.instantbird.org/attachment.cgi?id=797&amp;amp;action=diff"&gt;diff&lt;/a&gt; of all the
changes I made to the libpurple Sametime plugin and the external library
(called &lt;a class="reference external" href="http://meanwhile.sourceforge.net/"&gt;Meanwhile&lt;/a&gt;) to get it to work.&amp;nbsp; Once I get Monotone (a version
control system) set up I'll look into getting these changes pushed back
to libpurple to avoid diverging code bases.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Instantbird"></category><category term="programming"></category><category term="SIPE"></category></entry><entry><title>Adding a new protocol (SIPE/Office Communicator) to Instantbird (part 1)</title><link href="https://clokep.github.io/adding-a-new-protocol-sipeoffice-communicator-to-instantbird-part-1.html" rel="alternate"></link><updated>2011-06-19T01:53:00-04:00</updated><author><name>Patrick Cloke</name></author><id>tag:https://clokep.github.io,2011-06-19:adding-a-new-protocol-sipeoffice-communicator-to-instantbird-part-1.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Office_Communicator"&gt;Microsoft Office Communicator&lt;/a&gt; is an instant messaging client that
integrates into the &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Microsoft_Exchange_Server"&gt;Exchange Messaging Server&lt;/a&gt; (the protocol behind it
is an extended version of SIP/SIMPLE).&amp;nbsp; Anyway, there's a &lt;a class="reference external" href="http://developer.pidgin.im/wiki/WhatIsLibpurple"&gt;libpurple&lt;/a&gt;
(i.e. the backend of &lt;a class="reference external" href="http://instantbird.com/"&gt;Instantbird&lt;/a&gt; and &lt;a class="reference external" href="http://pidgin.im/"&gt;Pidgin&lt;/a&gt;) protocol plug-in for
OCS (Office Communicator Server) called &lt;a class="reference external" href="http://sipe.sourceforge.net/"&gt;SIPE&lt;/a&gt;.&amp;nbsp; (It's also striving
for a generic library to connect to OCS, but that's not quite there
yet.)&lt;/p&gt;
&lt;p&gt;I've been interested in getting this to compile in the Instantbird
framework for a while now, adding a new protocol to Instantbird.&amp;nbsp; First
of course I need the SIPE source, I chose to grab a release &lt;a class="reference external" href="http://sourceforge.net/projects/sipe/files/sipe/pidgin-sipe-1.11.2/"&gt;source
bundle&lt;/a&gt; instead of using the &lt;a class="reference external" href="http://sourceforge.net/apps/mediawiki/sipe/index.php?title=Windows_Build"&gt;git repository&lt;/a&gt;, just for ease moving
files around, etc.&amp;nbsp; There's a rather vague &lt;a class="reference external" href="http://sourceforge.net/apps/mediawiki/sipe/index.php?title=Windows_Build"&gt;Windows build&lt;/a&gt; page on the
wiki that I started with, says I need:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;libpurple &amp;gt;2.4.0 (we have 2.7.11)&lt;/li&gt;
&lt;li&gt;libglib &amp;gt;2.12.0 (we have 2.28.6)&lt;/li&gt;
&lt;li&gt;libxml2 (we have this)&lt;/li&gt;
&lt;li&gt;gmime &amp;gt;2.4 (not currently used)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So great, &lt;a class="reference external" href="https://wiki.instantbird.org/Instantbird:Third_party_code"&gt;we have most of the dependencies&lt;/a&gt;! We just need one more.
So I go grab, &lt;a class="reference external" href="http://developer.gnome.org/gmime/"&gt;gmime&lt;/a&gt;from the GNOME website (2.5.7, which is the
newest stable, currently), again as a source bundle and put the
necessary files in purple/libraries/gmime and edit the makefile so it
will (attempt) to compile.&amp;nbsp; But great -- it requires &lt;a class="reference external" href="http://www.gnu.org/software/libiconv/"&gt;libiconv&lt;/a&gt;, which
apparently is very difficult to compile, especially on Windows.&amp;nbsp; Luckily
for me there's a Windows version (not a port, but one that uses the
native Win32 APIs with the same interface): &lt;a class="reference external" href="http://code.google.com/p/win-iconv/"&gt;win-iconv&lt;/a&gt;.&amp;nbsp; This compiled
like a champ when added as purple/libraries/iconv.&lt;/p&gt;
&lt;p&gt;Unfortunately when I went back to compiling gmime, it attempts to
access parts of glib we're not using (gio, in particular) and thus is
not in our source code.&amp;nbsp; I can grab the &lt;a class="reference external" href="http://developer.gnome.org/glib/"&gt;glib&lt;/a&gt; source (2.28.6 to match,
of course) and add the gio subfolder, but first we should check if this
part of gmime is even used by SIPE! (My guess is that it is &lt;em&gt;not&lt;/em&gt;, but
that's where I'm at now.&amp;nbsp; I'll post back when I get further.&lt;/p&gt;
</summary><category term="Instantbird"></category><category term="programming"></category><category term="SIPE"></category></entry><entry><title>Compiling Instantbird</title><link href="https://clokep.github.io/compiling-instantbird.html" rel="alternate"></link><updated>2011-05-17T01:30:00-04:00</updated><author><name>Patrick Cloke</name></author><id>tag:https://clokep.github.io,2011-05-17:compiling-instantbird.html</id><summary type="html">&lt;p&gt;In the past I've tried to compile a few different programs that use
the Mozilla toolkit to various levels of success.&amp;nbsp; I've tried to compile
Thunderbird, Songbird and Instantbird at various points.&amp;nbsp; I got
Thunderbird to compile, but it only worked sporadically (although I
think that was Firefox moving so fast that Thunderbird couldn't keep
up), Songbird I gave up on rather quickly and Instantbird I've tried a
few times.&lt;/p&gt;
&lt;p&gt;Last summer I had Instantbird compiling on my old laptop (a Lenovo
T60), which is &amp;gt;5 years old at this point and has had the heatsink / fan
replaced twice -- a known issue with that model laptop.&amp;nbsp; Needless to
say, that laptop didn't like compiling something on Windows that took
approximately an hour with a large number of reads and writes to the
hard drive.&amp;nbsp; This mixed with it being an old dual core + a 5400 RPM
meant I'd be waiting a LONG time for my code to compile.&amp;nbsp; I got a
Thinkpad X201 this past summer, so I finally got around to setting up a
development environment on it and was able to get Instantbird to compile
fully today.&amp;nbsp; I've outlined the steps I've followed: kind of to mirror
the &lt;a class="reference external" href="https://developer.mozilla.org/En/Simple_Thunderbird_build"&gt;Simple Thunderbird Build&lt;/a&gt; page on MDC.&lt;/p&gt;
&lt;p&gt;I've done this using Microsoft Windows 7 Professional (64-bit) with
Service Pack 1. (4.00 GB of RAM, Intel Core i7 M620 2.67 GHz).
Throughout these steps, the defaults locations and options are used in
the installers.&lt;/p&gt;
&lt;div class="section" id="build-requirements"&gt;
&lt;h2&gt;Build Requirements:&lt;/h2&gt;
&lt;div class="section" id="visual-studio-express"&gt;
&lt;h3&gt;Visual Studio Express:&lt;/h3&gt;
&lt;p&gt;We need to install Visual Studio Express, specifically VC8 (2005) with
Service Pack 1.&amp;nbsp; (Mozilla compiles with VC9 and VC10 to various degrees,
but it seems libpurple only compiles with VC8, also this is what's on
the Instantbird buildbot, so I like having the same version.)&amp;nbsp; I
couldn't find this on Microsoft's website but I found it on &lt;a class="reference external" href="http://www.softpedia.com/get/Programming/Other-Programming-Files/Microsoft-Visual-C-Toolkit.shtml"&gt;Softpedia&lt;/a&gt;
(which is a legitimate site).&amp;nbsp; Anyway, download the installer and
install it (which will download the actual compiler from Microsoft),
ensure that you also install the IDE (which is checked by default).&lt;/p&gt;
&lt;p&gt;This will only install VC8, the initial release.&amp;nbsp; We also need to
install &lt;a class="reference external" href="http://www.microsoft.com/downloads/en/details.aspx?FamilyID=7b0b0339-613a-46e6-ab4d-080d4d4a8c4e"&gt;Service Pack 1&lt;/a&gt;.&amp;nbsp; I personally did this using Windows Update,
but one of the installers from there should also work.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="microsoft-windows-sdk"&gt;
&lt;h3&gt;Microsoft Windows SDK:&lt;/h3&gt;
&lt;p&gt;Specifically we need the &lt;a class="reference external" href="http://www.microsoft.com/downloads/en/details.aspx?FamilyID=c17ba869-9671-4330-a63e-1fd44e0e2505&amp;amp;displaylang=en"&gt;Windows 7 SDK&lt;/a&gt; (for Jumplist, Aero, etc.
support).&amp;nbsp; Download and install the SDK, this one took a while for me to
install.&amp;nbsp; I ate dinner while it was installing (pasta, if you're curious
-- I already had sauce made).&lt;/p&gt;
&lt;p&gt;There's a linker error when using VC8 and the Windows 7 SDK, so we'll
need to install a &lt;a class="reference external" href="http://support.microsoft.com/kb/949009/"&gt;hotfix&lt;/a&gt;for that (I tried without it and I ran into
the issue).&amp;nbsp; I had to download the &amp;quot;VS80sp1-KB949009-IA64-INTL.exe&amp;quot;
version (there's also an X86 and an X64 version).&amp;nbsp; Choose the one that
works.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="microsoft-macro-assembler"&gt;
&lt;h3&gt;Microsoft Macro Assembler:&lt;/h3&gt;
&lt;p&gt;In order to properly assemble the code we need to &lt;a class="reference external" href="http://www.microsoft.com/downloads/en/details.aspx?familyid=7A1C9DA0-0510-44A2-B042-7EF370530C64&amp;amp;displaylang=en"&gt;install MASM&lt;/a&gt;
(which I think will eventually be included in MozillaBuild, but it isn't
currently).&amp;nbsp; Again, just install it with the defaults.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="mozillabuild"&gt;
&lt;h3&gt;MozillaBuild:&lt;/h3&gt;
&lt;p&gt;Almost there, I promise.&amp;nbsp; In order to get a *nix type shell to run
make, etc. in we'll use a package from Mozilla that includes MSYS, make,
Mercurial, etc.&amp;nbsp; Download and &lt;a class="reference external" href="http://ftp.mozilla.org/pub/mozilla.org/mozilla/libraries/win32/MozillaBuildSetup-Latest.exe"&gt;install MozillaBuild&lt;/a&gt;, the latest should
work fine.&lt;/p&gt;
&lt;p&gt;Now, an unknown step: you might require the &lt;a class="reference external" href="http://www.microsoft.com/downloads/en/details.aspx?FamilyID=a5c84275-3b97-4ab7-a40d-3802b2af5fc2&amp;amp;displaylang=en"&gt;Microsoft Visual C++ 2008
SP1 Redistributable Package&lt;/a&gt;.&amp;nbsp; I don't know if you need this or not
since I &lt;em&gt;already&lt;/em&gt; had it, most likely from a previous program I've
installed.&lt;/p&gt;
&lt;p&gt;We should be ready to build now pretty much.&amp;nbsp; For some more
information for this stuff you can check out the Mozilla Developer
Network pages I used to get this information: &lt;a class="reference external" href="https://developer.mozilla.org/En/Developer_Guide/Build_Instructions"&gt;Build Instructions&lt;/a&gt;,
&lt;a class="reference external" href="https://developer.mozilla.org/En/Developer_Guide/Build_Instructions/Windows_Prerequisites"&gt;Windows Build Prerequisites&lt;/a&gt; and &lt;a class="reference external" href="https://developer.mozilla.org/cn/VC8_Build_Instructions"&gt;MSVC8 Build Instructions&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="checkout-the-code"&gt;
&lt;h2&gt;Checkout the Code:&lt;/h2&gt;
&lt;p&gt;We need to checkout the code.&amp;nbsp; I originally checked out the code with
TortoiseHg (which is what I normally use), but the version of Mercurial
included is significantly greater than the one included in MozillaBuild
and this caused me issues later on.&amp;nbsp; Thus, we'll check out the code on
the command line.&amp;nbsp; Start by launching the bash shell, which is at
C:\mozilla-build\start-msvc8.bat (don't use the x64 version).&amp;nbsp; There's
a version here which corresponds to each version of VS.&lt;/p&gt;
&lt;p&gt;Once this finishes loading you'll be in the home directory (which is
in the root of your user's documents and settings folder, i.e. for me:
C:\Users\clokep).&amp;nbsp; You'll want to do the following:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
hg clone https://hg.instantbird.org/instantbird
&lt;/pre&gt;
&lt;p&gt;This might take a few minutes depending on how good your internet
connection is.&amp;nbsp; (The Instantbird source isn't THAT big though, it
shouldn't take too long.)&lt;/p&gt;
&lt;p&gt;Then we'll need to change into the instantbird directory that was just
created and download the Mozilla source code:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
cd instantbird
python client.py checkout
&lt;/pre&gt;
&lt;p&gt;Now this step?&amp;nbsp; This one is gonna take a while.&amp;nbsp; It took me like a
couple of hours.&amp;nbsp; It pulls the Mozilla source code, which is large and
has many changesets.&amp;nbsp; Just let it go, it'll give you progress
occasionally (changes, manifests, files, etc.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;Compiling Instantbird:&lt;/h2&gt;
&lt;p&gt;We need to set up the options we want to build with.&amp;nbsp; These are
read from a .mozconfig (don't miss the &amp;quot;.&amp;quot; in the front!).&amp;nbsp; The contents
of the .mozconfig that worked for me are:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
ac_add_options --enable-application=instantbird
mk_add_options MOZ_OBJDIR=&amp;#64;TOPSRCDIR&amp;#64;/objdir-ib-release
ac_add_options --disable-accessibility
&lt;/pre&gt;
&lt;p&gt;The first option says to build Instantbird, the second gives an output
directory and the third &lt;a class="reference external" href="https://developer.mozilla.org/en/atlbase.h"&gt;disables accessibility&lt;/a&gt; (not really sure why
we need to do this, but we'll get that error at that link otherwise).&lt;/p&gt;
&lt;p&gt;Finally (back in the bash shell) type:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
make -f client.mk build
&lt;/pre&gt;
&lt;p&gt;Now sit back and relax.&amp;nbsp; My build took about an hour to finish, maybe
a bit less -- I wasn't fully paying attention.&amp;nbsp; Once it's done you
should see something like:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Processed 1 file, writing output:

Output:
&amp;quot;c:\\Users\\clokep\\instantbird\\objdir-ib-release\\instantbird\\installer\\windows\\instgen\\helper.exe&amp;quot;
Install: 2 pages (128 bytes), 1 section (16416 bytes), 2579
instructions (72212 bytes), 369 strings (10198 bytes), 1 language table (230 bytes).
Uninstall: 5 pages (320 bytes),
1 section (16416 bytes), 2063 instructions (57764 bytes), 388 strings
(10828 bytes), 1 language table (314 bytes).
Datablock optimizer saved 123940 bytes (~17.6%).
Using zlib compression.
EXE header size:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 63488 / 39424 bytes
Install code:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 99564 / 99560 bytes
Install data:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 118002 / 241950 bytes
Uninstall code+data:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 398654 / 398646 bytes
CRC (0x062AF3F5):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 4 / 4 bytes
Total size:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 679712 / 779584 bytes (87.1%)
c:/Users/clokep/instantbird/objdir-ib-release/mozilla/config/nsinstall.exe -D ../../../mozilla/dist/bin/uninstall
cp instgen/helper.exe ../../../mozilla/dist/bin/uninstall
make[5]: Leaving directory `/c/Users/clokep/instantbird/objdir-ib-release/instantbird/installer/windows'
make[4]: Leaving directory `/c/Users/clokep/instantbird/objdir-ib-release/instantbird'
make[3]: Leaving directory `/c/Users/clokep/instantbird/objdir-ib-release'
make[2]: Leaving directory `/c/Users/clokep/instantbird/objdir-ib-release'
make[1]: Leaving directory `/c/Users/clokep/instantbird/objdir-ib-release'
&lt;/pre&gt;
&lt;p&gt;Now, to test that the build actually worked we can browse to the
compiled executable and run it:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
cd objdir-ib-release/mozilla/dist/bin/instantbird.exe -P dev -no-remote
&lt;/pre&gt;
&lt;p&gt;The -P option specifies a profile name (dev), the second option
(-no-remote) allows you to run a second Instantbird instance (since I
assume you use Instantbird to IM...you probably want to be able to run a
second one, if you don't use it...shame on you. Try not to close the
wrong Instantbird when you're working on stuff).&lt;/p&gt;
&lt;p&gt;Hopefully this will help someone else get started on hacking
Instantbird.&amp;nbsp; There's other good ways you can hack too if your computer
can't handle compiling, including unpacking omni.jar.&lt;/p&gt;
&lt;p&gt;One last tidbit is to possibly add the option to your .mozconfig:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
--enable-chrome-format=flat
&lt;/pre&gt;
&lt;p&gt;This will not package anything in JARs (which pretty much just get in
the way while developing).&amp;nbsp; See&amp;nbsp;&lt;a class="reference external" href="https://developer.mozilla.org/en/JAR_Packaging"&gt;here&lt;/a&gt; for more info.&lt;/p&gt;
&lt;p&gt;Edit: Fixed the path to the executable thanks to Florian. And fixed a
spelling error in the title.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Instantbird"></category><category term="Mozilla"></category><category term="programming"></category></entry><entry><title>The so-called IRC "specifications"</title><link href="https://clokep.github.io/the-so-called-irc-specifications.html" rel="alternate"></link><updated>2011-03-09T01:20:00-05:00</updated><author><name>Patrick Cloke</name></author><id>tag:https://clokep.github.io,2011-03-09:the-so-called-irc-specifications.html</id><summary type="html">&lt;p&gt;In a &lt;a class="reference external" href="https://clokep.github.io/why-rewrite-irc-into-javascript-vs-libpurples-vs-chatzillas.html"&gt;previous post&lt;/a&gt; I had briefly gone over the &amp;quot;history of IRC&amp;quot; as
I know it.&amp;nbsp; I'm going to expand on this a bit as I've come to understand
it a bit more while reading through documentation.&amp;nbsp; (Hopefully it won't
sound too much like a rant, as it is all driving me crazy!)&lt;/p&gt;
&lt;div class="section" id="irc-specifications"&gt;
&lt;h2&gt;IRC Specifications&lt;/h2&gt;
&lt;p&gt;So there's the original specification (&lt;a class="reference external" href="http://tools.ietf.org/html/rfc1459"&gt;RFC 1459&lt;/a&gt;) in May 1993; this
was expanded and replaced by four different specifications (&lt;a class="reference external" href="http://tools.ietf.org/html/rfc2810"&gt;RFC 2810&lt;/a&gt;,
&lt;a class="reference external" href="http://tools.ietf.org/html/rfc2811"&gt;2811&lt;/a&gt;, &lt;a class="reference external" href="http://tools.ietf.org/html/rfc2812"&gt;2812&lt;/a&gt;, &lt;a class="reference external" href="http://tools.ietf.org/html/rfc2813"&gt;2813&lt;/a&gt;) in April 2000.&amp;nbsp; Seems pretty straightforward,
right?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="dcc-ctcp"&gt;
&lt;h2&gt;DCC/CTCP&lt;/h2&gt;
&lt;p&gt;Well, kind of...there's also the DCC/CTCP specifications, which is a
separate protocol embedded/hidden within the IRC protocol (e.g. they're
sent as IRC messages and parsed specially by clients, the server sees
them as normal messages).&amp;nbsp; DCC/CTCP is used to send files as well as
other particular messages (ACTION commands for roleplaying, SED for
encrypting conversations, VERSION to get client information, etc.).
Anyway, this get's a bit more complicated -- it starts with the &lt;a class="reference external" href="http://www.irchelp.org/irchelp/rfc/dccspec.html"&gt;DCC
specification&lt;/a&gt;.&amp;nbsp; This was replaced/updated by the &lt;a class="reference external" href="http://www.irchelp.org/irchelp/rfc/ctcpspec.html"&gt;CTCP specification&lt;/a&gt;
(which fully includes the DCC specification) in 1994.&amp;nbsp; An &lt;a class="reference external" href="http://www.invlogic.com/irc/ctcp.html"&gt;&amp;quot;updated&amp;quot;
CTCP specification&lt;/a&gt; was released in February 1997.&amp;nbsp; There's also a
&lt;a class="reference external" href="http://www.invlogic.com/irc/ctcp2_intro.html"&gt;CTCP/2 specification&lt;/a&gt; from October 1998, which was meant to
reformulate a lot of the previous three versions.&amp;nbsp; And &lt;em&gt;finally&lt;/em&gt;,
there's the DCC2 specification (two parts: &lt;a class="reference external" href="http://tools.ietf.org/html/draft-smith-irc-dcc2-negotiation-00"&gt;connection negotiation&lt;/a&gt; and
&lt;a class="reference external" href="http://www.dcc2.org/files/dcc2/draft-smith-irc-dcc2-files-00.txt"&gt;file transfers&lt;/a&gt;) from April 2004.&lt;/p&gt;
&lt;p&gt;But wait!&amp;nbsp; I lied...that's not really the end of DCC/CTCP, there's
also a bunch of extensions to it: &lt;a class="reference external" href="http://www.visualirc.net/tech-tdcc.php"&gt;Turbo DCC&lt;/a&gt;, &lt;a class="reference external" href="http://xa.bi/files/irc/xdcc.3.3.0b.irc"&gt;XDCC (eXtended DCC)&lt;/a&gt;
in 1993, &lt;a class="reference external" href="http://www.visualirc.net/tech-wboard.php"&gt;DCC Whiteboard&lt;/a&gt;, and a few other variations of this: RDCC
(Reverse DCC), SDD (Secure DCC), DCC Voice, etc.&amp;nbsp; Wikipedia has a &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Direct_Client-to-Client"&gt;good
summary&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Something else to note about the whole DCC/CTCP mess...parts of it
just &lt;em&gt;don't&lt;/em&gt; have any documentation.&amp;nbsp; There's &lt;em&gt;none&lt;/em&gt;at all for SED (at
least that I've found, I'd love to be proved wrong) and very little
(really just a mention) for DCC Voice.&lt;/p&gt;
&lt;p&gt;So, we're about halfway through now.&amp;nbsp; There's a bunch of extensions to
the IRC protocol specifications that add new commands to the actual
protocol.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="authentication"&gt;
&lt;h2&gt;Authentication&lt;/h2&gt;
&lt;p&gt;Originally IRC had no authentication ability except the PASS command,
which very few servers seem to use, a variety of mechanisms have
replaced this, including &lt;a class="reference external" href="http://hg.atheme.org/atheme/atheme/raw-file/tip/doc/SASL"&gt;SASL authentication&lt;/a&gt; (both PLAIN and BLOWFISH
methods, although BLOWFISH isn't documented); and SASL itself is covered
by at least &lt;a class="reference external" href="http://tools.ietf.org/html/rfc2222"&gt;four&lt;/a&gt; &lt;a class="reference external" href="http://tools.ietf.org/html/rfc4422"&gt;RFCs&lt;/a&gt; &lt;a class="reference external" href="http://tools.ietf.org/html/rfc2595"&gt;in this&lt;/a&gt; &lt;a class="reference external" href="http://tools.ietf.org/html/rfc4616"&gt;situation&lt;/a&gt;.&amp;nbsp; There also seems
to be a method called &amp;quot;Auth&amp;quot; which I haven't been able to pin down, as
well as Ident (which is a more general protocol authentication method I
haven't looked into yet).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="extension-support"&gt;
&lt;h2&gt;Extension Support&lt;/h2&gt;
&lt;p&gt;This includes a few that generally add a way by which servers are able
to tell their clients exactly what a server supports.&amp;nbsp; The first of
these was RPL_ISUPPORT, which was defined as a &lt;a class="reference external" href="http://tools.ietf.org/html/draft-brocklesby-irc-isupport-03"&gt;draft specification&lt;/a&gt;
in January 2004, and &lt;a class="reference external" href="http://tools.ietf.org/html/draft-hardy-irc-isupport-00"&gt;updated&lt;/a&gt; in January of 2005.&lt;/p&gt;
&lt;p&gt;A similar concept was defined as &lt;a class="reference external" href="http://tools.ietf.org/html/draft-mitchell-irc-capabilities-01"&gt;IRC Capabilities&lt;/a&gt; in March 2005.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="protocol-extensions"&gt;
&lt;h2&gt;Protocol Extensions&lt;/h2&gt;
&lt;p&gt;IRCX, a Microsoft extension to IRC used (at one point) for some of
it's instant messaging products &lt;a class="reference external" href="http://tools.ietf.org/html/draft-pfenning-irc-extensions-04"&gt;exists as a draft&lt;/a&gt; from June 1998.&lt;/p&gt;
&lt;p&gt;There's also:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The &lt;a class="reference external" href="http://hg.atheme.org/charybdis/charybdis/raw-file/tip/doc/monitor.txt"&gt;MONITOR&lt;/a&gt; command.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://hg.atheme.org/charybdis/charybdis/raw-file/tip/doc/modeg.txt"&gt;User mode +g&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://hg.atheme.org/charybdis/charybdis/raw-file/tip/doc/services.txt"&gt;Services compatibility modes&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://hg.atheme.org/charybdis/charybdis/raw-file/tip/doc/account-notify.txt"&gt;Account-notify client capability&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://hg.atheme.org/charybdis/charybdis/raw-file/tip/doc/tgchange.txt"&gt;Target change for messages&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="services"&gt;
&lt;h2&gt;Services&lt;/h2&gt;
&lt;p&gt;To fill in some of the missing features of IRC, services were created
(Wikipedia has a good &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Internet_Relay_Chat_services"&gt;summary&lt;/a&gt; again).&amp;nbsp; This commonly includes
ChanServ, NickServ, OperServ, and MemoServ.&amp;nbsp; Not too hard, but different
server packages include different services (or even the same services
that behave differently), one of more common ones is &lt;a class="reference external" href="http://www.anope.org/docgen/1.8/en_us/"&gt;Anope&lt;/a&gt;, however
(plus they have awesome documentation, so they get a link).&lt;/p&gt;
&lt;p&gt;There was an attempt to standardize how to interact with services
called IRC+, which included three specifications: &lt;a class="reference external" href="http://www.irc-plus.org/specs/confctrl-draft.html"&gt;conference control
protocol&lt;/a&gt;, &lt;a class="reference external" href="http://www.irc-plus.org/specs/identity-draft.html"&gt;identity protocol&lt;/a&gt; and &lt;a class="reference external" href="http://www.irc-plus.org/specs/subscriptions-draft.html"&gt;subscriptions protocol&lt;/a&gt;.&amp;nbsp; I don't
believe this are supported widely (if at all).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="irc-url-scheme"&gt;
&lt;h2&gt;IRC URL Scheme&lt;/h2&gt;
&lt;p&gt;Finally this brings us to the IRC URL scheme of which there are a few
versions.&amp;nbsp; A draft from August 1996 defines the original &lt;a class="reference external" href="http://tools.ietf.org/html/draft-mirashi-url-irc-01"&gt;irc: URL
scheme&lt;/a&gt;.&amp;nbsp; This was updated/replaced by &lt;a class="reference external" href="http://tools.ietf.org/html/draft-butcher-irc-url-04"&gt;another draft&lt;/a&gt; which defines
irc: and ircs: URL schemes.&lt;/p&gt;
&lt;p&gt;As of right now that's all that I've found...an awful lot.&amp;nbsp; Plus it's
not all compatible with each other (and sometimes out right contradicts
each other).&amp;nbsp; Often newer specifications say not to support older
specifications, but who knows what servers/clients you'll end up talking
to!&amp;nbsp; It's difficult to know what's used in practice, especially since
there's an awful lot of &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Comparison_of_IRC_daemons"&gt;IRC servers&lt;/a&gt; out there.&amp;nbsp; Anyway, if someone
does know of another specification, etc. that I missed please let me
know!&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Instantbird"></category><category term="IRC"></category><category term="programming"></category><category term="specifications"></category></entry><entry><title>Status Update - February 17, 2011</title><link href="https://clokep.github.io/status-update-february-17-2011.html" rel="alternate"></link><updated>2011-02-17T23:21:00-05:00</updated><author><name>Patrick Cloke</name></author><id>tag:https://clokep.github.io,2011-02-17:status-update-february-17-2011.html</id><summary type="html">&lt;p&gt;Another month has gone by so it's time for another status update.
Unfortunately not as much got done this month as I was hoping, but
here's a quick update of what I've worked on:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=690"&gt;Bug 690&lt;/a&gt; - jsProtoHelper could help registering commands&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=661"&gt;Bug 661&lt;/a&gt; - JavaScript accounts do not automatically set
containsNick field on messages&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=686"&gt;Bug 686&lt;/a&gt; - Implement default chat name for
getChatRoomDefaultFieldValues for js-proto&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Florian also implemented a few things that are really helpful for
JavaScript protocols:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=649"&gt;Bug 649&lt;/a&gt; - purple proxies should not be in the way of JavaScript
protocols&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=118"&gt;Bug 118&lt;/a&gt; - Extensions should be able to register commands.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In addition, Twitter support was added to nightly builds as a
JavaScript protocol (&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=598"&gt;bug 598&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Hopefully next I'll implement most of the commands for IRC (within the
next week) at which point I'll release a sample extension (which will
overwrite the libpurple IRC implementation), allowing people to test
without needing to make a new account, etc.&lt;/p&gt;
</summary><category term="Instantbird"></category><category term="IRC"></category><category term="programming"></category></entry><entry><title>Status Update - January 18, 2011</title><link href="https://clokep.github.io/status-update-january-18-2011.html" rel="alternate"></link><updated>2011-01-19T03:17:00-05:00</updated><author><name>Patrick Cloke</name></author><id>tag:https://clokep.github.io,2011-01-19:status-update-january-18-2011.html</id><summary type="html">&lt;p&gt;I haven't had an update in a few weeks (since early December)
actually, so I thought I would post a bit about what I've worked on.
I've fixed a bunch of bugs in the backend of Instantbird that allow work
on JavaScript IRC protocol to continue:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=519"&gt;Bug 519&lt;/a&gt; - Extend jsProtoHelper to implement purpleIConvChat
(&lt;a class="reference external" href="http://hg.instantbird.org/instantbird/rev/0166084ce2ae"&gt;check-in&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=495"&gt;Bug 495&lt;/a&gt; - purpleIAccount cannot access preferences via JavaScript
protocol (&lt;a class="reference external" href="http://hg.instantbird.org/instantbird/rev/a188a5cc3ff1"&gt;check-in&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=648"&gt;Bug 648&lt;/a&gt; -Provide a default JS implementation of
purpleIChatRoomField
(&lt;a class="reference external" href="http://hg.instantbird.org/instantbird/rev/61fc80a569d3"&gt;check-in&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;[Reviewed] &lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=647"&gt;Bug 647&lt;/a&gt; - Username split for JavaScript protocols
(&lt;a class="reference external" href="http://hg.instantbird.org/instantbird/rev/a6c8fbf77e10"&gt;check-in&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;[Reviewed] &amp;lt;no bug&amp;gt; -Share the nsIClassInfo implementation between
all the objects implemented in jsProtoHelper
(&lt;a class="reference external" href="http://hg.instantbird.org/instantbird/rev/035f7d8d7f78"&gt;check-in&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Also a few other random bugs I've worked on:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=625"&gt;Bug 625&lt;/a&gt; - Findbar broken on Windows in Conversation window
(&lt;a class="reference external" href="http://hg.instantbird.org/instantbird/rev/2e8af77af2f2"&gt;check-in&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=629"&gt;Bug 629&lt;/a&gt; - Remove workaround for bug 503048
(&lt;a class="reference external" href="http://hg.instantbird.org/instantbird/rev/ba4b9401791b"&gt;check-in&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=473"&gt;Bug 473&lt;/a&gt; - JS Logger line breaks don't play well on Windows
&lt;a class="reference external" href="http://hg.instantbird.org/instantbird/rev/6a600b8a32c9"&gt;(check-in&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=593"&gt;Bug 593&lt;/a&gt; - JavaScript component does not have a method named:
&amp;quot;onBeforeLinkTraversal&amp;quot;
(&lt;a class="reference external" href="http://hg.instantbird.org/instantbird/rev/1b75f9fa4859"&gt;check-in&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Although none of these are really things that weren't working a few
weeks ago, there are now real APIs for these for JavaScript protocols,
allowing other protocols to use them and to &lt;em&gt;FULLY&lt;/em&gt; implement them
instead of hard coding values.&amp;nbsp; In addition, a lot of the purplexpcom
layer is now hidden from JavaScript protocols.&lt;/p&gt;
&lt;p&gt;There's a few things left to do for the JavaScript protocol layer:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=118"&gt;Bug 118&lt;/a&gt; - Extensions should be able to register commands.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=650"&gt;Bug 650&lt;/a&gt; - JavaScript accounts must be notified of status changes
(a sketchy patch that exists that will work, but a better patch to
core should be done)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=623"&gt;Bug 623&lt;/a&gt; - Auto-Join option field is hard coded for certain
protocols (not &lt;em&gt;really&lt;/em&gt; necessary, since it's still IRC, but it
should be fixed)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=649"&gt;Bug 649&lt;/a&gt; - Proxy should be available to JavaScript protocols
(hopefully being handled by Florian)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A good summary of this is &lt;a class="reference external" href="https://bugzilla.instantbird.org/showdependencygraph.cgi?id=507&amp;amp;display=web&amp;amp;rankdir=LR"&gt;the dependency graph of bug 507&lt;/a&gt;
(Implement IRC in JavaScript).&amp;nbsp; Note that the IRC JavaScript work blocks
&lt;em&gt;a&amp;nbsp; lot&lt;/em&gt; of UI work done for IRC.&amp;nbsp; In particular Mook has been working
on implementing notifications (i.e. Invites, and perhaps a few other
commands), see &lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=628"&gt;Bug 628&lt;/a&gt;.&amp;nbsp; For other bugs, see the link above -- and if
there's a strange UI feature that you think should be added, please file
a bug and let us know about it!&lt;/p&gt;
&lt;p&gt;I've also worked a bit on sending outgoing text with rich formatting
(bold, italics, underline, text size, etc.), this work is being tracked
in &lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=634"&gt;Bug 634&lt;/a&gt;. There's a proof on concept, but a lot of work needs to be
done for it, but it's sort of working right now.&lt;/p&gt;
&lt;p&gt;As I alluded to in my last blog post, the JavaScript protocols would
be used to implement Twitter. Work for this is occurring in &lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=598"&gt;Bug 598&lt;/a&gt;,
where Florian has implemented (very) basic Twitter support.&lt;/p&gt;
&lt;p&gt;My plans for the next bit:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;I'm hoping to finish up some of the work blocking JavaScript
protocols so IRC can be put into a state that needs alpha/beta
testers (if you're interested in testing/hacking please drop me a
line here, on IRC or via email).&lt;/li&gt;
&lt;li&gt;Move into my new apartment&lt;/li&gt;
&lt;li&gt;Start my new job&lt;/li&gt;
&lt;li&gt;Work on richtext messages a bit more&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="Instantbird"></category><category term="IRC"></category><category term="Mozilla"></category><category term="programming"></category></entry><entry><title>Why Rewrite IRC into JavaScript? (vs. libpurple's vs. ChatZilla's)</title><link href="https://clokep.github.io/why-rewrite-irc-into-javascript-vs-libpurples-vs-chatzillas.html" rel="alternate"></link><updated>2010-12-08T18:29:00-05:00</updated><author><name>Patrick Cloke</name></author><id>tag:https://clokep.github.io,2010-12-08:why-rewrite-irc-into-javascript-vs-libpurples-vs-chatzillas.html</id><summary type="html">&lt;p&gt;I had a request on IRC (from Mic) to write an in-depth blog post
about &lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=507"&gt;IRC in JavaScript&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;Maybe we could ask clokep if he'd like to write something about
js-irc? Why it is done, what the advantages are once it's done, how
he is working on it (going through the specs), putting the
jsProtocol code to test and adding missing pieces?&amp;quot; -- &lt;a class="reference external" href="http://log.bezut.info/instantbird/101208/#m54"&gt;Mic&lt;/a&gt;&lt;/blockquote&gt;
&lt;div class="section" id="wait-a-second-what-is-irc"&gt;
&lt;h2&gt;Wait a second, what is IRC?&lt;/h2&gt;
&lt;p&gt;I guess this is a good first question, I'll steal from &lt;a class="reference external" href="http://en.wikipedia.org/wiki/IRC"&gt;Wikipedia&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
Internet Relay Chat (IRC) is a form of real-time [...] chat [...] It
is mainly designed for group communication [...] but also allows
[...for...] private message as well as chat and data transfers.&lt;/blockquote&gt;
&lt;p&gt;Awesome, what's that really mean?&amp;nbsp; It's an instant messaging protocol
with an actual specification (i.e. it's not owned by some large, unnamed
company), with open-source libraries for clients and servers.&amp;nbsp; It's
usually used by more computer-oriented types of people and centers
around group conversation.&amp;nbsp; Personally most of what I use it for is
open-source software I use (I'm almost always in &lt;a class="reference external" href="irc://irc.mozilla.org/#instantbird"&gt;#instantbird&lt;/a&gt;,
&lt;a class="reference external" href="irc://irc.mozilla.org/#maildev"&gt;#maildev&lt;/a&gt;, and &lt;a class="reference external" href="irc://irc.mozilla.org/#songbird"&gt;#songbird&lt;/a&gt; on &lt;a class="reference external" href="http://irc.mozilla.org/"&gt;Mozilla's IRC servers&lt;/a&gt;.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="why-it-is-done-what-advantages-are-there-once-this-is-done"&gt;
&lt;h2&gt;Why it is done?&amp;nbsp; What advantages are there once this is done?&lt;/h2&gt;
&lt;p&gt;I touched upon this a little in my &lt;a class="reference external" href="https://clokep.github.io/javascript-irc-in-instantbird.html"&gt;last post&lt;/a&gt;.&amp;nbsp; In terms of
Instantbird: there's an idea of switching some / all of the protocols
(eventually) to be JavaScript protocols instead of the libpurple
versions (libpurple is written mostly in C and is cross-platform, but
recent gains in speed in JavaScript allow this advantage of libpurple to
not matter as much).&amp;nbsp; This would unfortunately mean we need to maintain
a lot more code, but it would allow us to integrate protocols in any way
that we see fit, instead of only using APIs / methods provided by
libpurple.&amp;nbsp; Hopefully this would allow us to &lt;a class="reference external" href="https://bugzilla.instantbird.org/showdependencytree.cgi?id=507&amp;amp;maxdepth=2&amp;amp;hide_resolved=1"&gt;enhance our IRC
implementation&lt;/a&gt; a bit.&lt;/p&gt;
&lt;p&gt;Also, Instantbird (nightlies) currently have limited support for
generating a protocol plug-in in JavaScript.&amp;nbsp; A couple of &amp;quot;test&amp;quot;
protocols have be done, but nothing in &amp;quot;real&amp;quot; (in particular, none that
used a multi-user chat).&amp;nbsp; This would allow us to iron out &lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=519"&gt;some&lt;/a&gt;
&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=118"&gt;bugs&lt;/a&gt; in the implementation of JavaScript protocols.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;[Edit: Florian suggested another question that wasn't originally
covered, which some people more familiar with Mozilla code might be
wondering.]&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="why-aren-t-you-using-the-code-from-chatzilla"&gt;
&lt;h2&gt;Why aren't you using the code from ChatZilla?&lt;/h2&gt;
&lt;p&gt;This was a tough one.&amp;nbsp; Honestly when I first wanted a parsing
algorithm, I looked at the ChatZilla code, I used it.&amp;nbsp; Then rewrote it
in a fourth as many lines (&lt;a class="reference external" href="http://hg.mozilla.org/chatzilla/file/tip/js/lib/irc.js#l1250"&gt;93&lt;/a&gt; vs. &lt;a class="reference external" href="https://hg.instantbird.org/experiments/file/IRC-JavaScript/components/ircProtocol.js#l208"&gt;20&lt;/a&gt;).&amp;nbsp; Simply said, the code in
ChatZilla is &lt;em&gt;old&lt;/em&gt;, it doesn't use many of the features available only
in newer versions of JavaScript.&amp;nbsp; To that point, the ChatZilla code
hasn't been updated in over a year!&amp;nbsp; The last check-in was: 2009-10-03,
below is a &lt;a class="reference external" href="http://hg.mozilla.org/chatzilla/log/tip/js/lib/irc.js"&gt;quick summary&lt;/a&gt; of the number of check-ins per year:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;2010: 0&lt;/li&gt;
&lt;li&gt;2009: 5&lt;/li&gt;
&lt;li&gt;2008: 15&lt;/li&gt;
&lt;li&gt;2007: 11&lt;/li&gt;
&lt;li&gt;2006: 18&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There's been a pretty steady decline in check-ins.&amp;nbsp; I could take this
code and attempt to whip it into shape and make huge sweeping changes
and commit them back to ChatZilla, but honestly it was easier to start
over for me.&amp;nbsp; Regardless of ease, I'm not sure it would work any:
especially since the ChatZilla code seems overly complicated and overly
specific (since it wasn't really built as a library as far as I can
see), especially since all the code is meant to deal only with IRC.&amp;nbsp; The
Instantbird code needs to be protocol agnostic to a degree, while is why
it interfaces to purplexpcom.&lt;/p&gt;
&lt;p&gt;A quick example of this is: ChatZilla uses a CIRCUser object, but for
Instantbird I need to create either an imIContact or a
purpleIAccountBuddy (depending on the situation).&amp;nbsp; It's possible that's
can be abstracted and code shared -- but I'm not sure it would be worth
the effort.&amp;nbsp; After all this, I should probably look more into the
ChatZilla code, perhaps more of it could be used.&lt;/p&gt;
&lt;p&gt;(If someone familiar with the ChatZilla code base -- I don't know
who/if there's a maintainer -- is interested in talking with me, please
get in contact here or on #instantbird.&amp;nbsp; It's possible we could align
some of what I've been working on, but I'm not sure how much could be
shared besides the parsing algorithm).&lt;/p&gt;
&lt;p&gt;&lt;em&gt;[End edit]&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-are-the-specific-advantages-for-an-end-user"&gt;
&lt;h2&gt;What are the specific advantages for an end-user?&lt;/h2&gt;
&lt;p&gt;In terms of the IRC protocol itself, there shouldn't be any, my goal
is for it to be a drop in replacement for the libpurple implementation
with automatic account migration, etc. For end-users we can hopefully
solve &lt;a class="reference external" href="https://bugzilla.instantbird.org/showdependencytree.cgi?id=574&amp;amp;maxdepth=1&amp;amp;hide_resolved=1"&gt;a few annoying IRC UI issues&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-about-for-developers-anything-cool-there"&gt;
&lt;h2&gt;What about for developers?&amp;nbsp; Anything cool there?&lt;/h2&gt;
&lt;p&gt;Well, I'm hoping to be able to test this replacement via an extension
that replaces the libpurple IRC to dogfood it before eventual inclusion
in Instantbird.&amp;nbsp; I'm not sure if that counts as &amp;quot;cool.&amp;quot; though.&amp;nbsp; If
nothing else there will be an example of how to write a protocol in
JavaScript (using sockets).&amp;nbsp; So hopefully other people can make some
other cool protocols off of that example.&amp;nbsp; You might wonder what else we
have planned for JavaScript protocols; there are plans to make at least
a Twitter protocol.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-is-this-being-done"&gt;
&lt;h2&gt;How is this being done?&lt;/h2&gt;
&lt;p&gt;Well I said up above IRC has a specification, right?&amp;nbsp; Well, yes.
There's the &lt;a class="reference external" href="http://tools.ietf.org/html/rfc1459"&gt;original specification&lt;/a&gt;, this was superseded by &lt;a class="reference external" href="http://tools.ietf.org/html/rfc2810"&gt;four&lt;/a&gt;
&lt;a class="reference external" href="http://tools.ietf.org/html/rfc2811"&gt;different&lt;/a&gt; &lt;a class="reference external" href="http://tools.ietf.org/html/rfc2812"&gt;specification&lt;/a&gt; &lt;a class="reference external" href="http://tools.ietf.org/html/rfc2813"&gt;documents&lt;/a&gt;.&amp;nbsp; Of which we only really
care about one: &lt;a class="reference external" href="http://tools.ietf.org/html/rfc2812"&gt;the client protocol&lt;/a&gt;.&amp;nbsp; So we have this updated
specification (try reading it, it's rather painful), which is good.
It's relatively straightforward set of commands and responses/errors.
It's a bit more confusing than that though since there are a couple of
extensions, etc.&amp;nbsp; This is summarized below:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;[STRIKEOUT:RFC 1459]&lt;ul&gt;
&lt;li&gt;Extended with &lt;a class="reference external" href="http://www.irchelp.org/irchelp/rfc/dccspec.html"&gt;[STRIKEOUT:DCC specification (&amp;quot;direct client-to-client&amp;quot;)]&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Replaced with [STRIKEOUT:&lt;a class="reference external" href="http://www.irchelp.org/irchelp/rfc/dccspec.html"&gt;CTCP (&amp;quot;client-to-client protocol&amp;quot;)&lt;/a&gt;]&lt;ul&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.invlogic.com/irc/ctcp.html"&gt;Draft for a formalized CTCP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;(Apparently some people are working on a &lt;a class="reference external" href="http://www.dcc2.org/"&gt;DCC2&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Officially replaced with RFCs 2810, 2811, 2812, 2813&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A lot of this is being done by reading the specifications and finding
the proper responses, etc.&amp;nbsp; I've also used &lt;a class="reference external" href="http://www.wireshark.org/download.html"&gt;Wireshark&lt;/a&gt; a bit to see how
libpurple sends IRC commands (in particular, in what order it sends them
in).&amp;nbsp; A lot of my development is happening on live IRC servers, which
isn't really best practice, but I'm mostly sending commands by hand to
see the responses since a bunch of non-standard responses and extensions
have developed beyond the above.&amp;nbsp; I have been using &lt;a class="reference external" href="http://ircd.bircd.org/"&gt;beware irc&lt;/a&gt; to run
a daemon on my own machine, however.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="so-how-far-along-are-you"&gt;
&lt;h2&gt;So how far along are you?&lt;/h2&gt;
&lt;p&gt;I've started implementing RFC 2812 and have a variety of commands done
(the login sequence occurs automatically, the server connection is kept
alive, messages can be sent to a channel and are parsed when received, a
lot of the initial server information is displayed but unparsed).&amp;nbsp; But
there's a lot more to do!&amp;nbsp; As my last post outlined, I recently was able
to successfully get a chat to work in Instantbird from a silly bug I had
been having.&lt;/p&gt;
&lt;p&gt;It's rather slow going since I'll start to implement something from
the IRC side, and then realize the &lt;a class="reference external" href="http://hg.instantbird.org/instantbird/file/tip/purple/purplexpcom/src/jsProtoHelper.jsm"&gt;Instantbird layer&lt;/a&gt; (the jsProtocol
module) is missing a component I need.&amp;nbsp; One of the major parts of
working on this is extending the Instantbird layer to contain the proper
functions and objects needed to implement chats via JavaScript.&amp;nbsp; This is
usually the slowest going part of my code, since it involves interfacing
with Instantbird / &lt;a class="reference external" href="http://hg.instantbird.org/instantbird/file/tip/purple/purplexpcom/public/"&gt;purplexpcom&lt;/a&gt;.&amp;nbsp; Luckily Florian, the main developer
of Instantbird, has been a big help with this (as have other
participants of #instantbird -- in particular I know Mic helped track
down a few syntax type bugs).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-s-next"&gt;
&lt;h2&gt;What's next?&lt;/h2&gt;
&lt;p&gt;Now that have the basics of chat working, I need to start handling the
QUIT, PART and JOIN commands for when other users enter &amp;amp; leave chat
rooms.&amp;nbsp; Once these are complete it should be quite usable, although the
entire preference system still doesn't exist, including notifying the UI
of what options are available.&amp;nbsp; In addition, I need to look into doing
SSL sockets.&lt;/p&gt;
&lt;p&gt;Once the protocol plug-in is done, we plan to abstract sections of it
that will be useful for other protocols (in particular the socket
connection aspects).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="where-can-i-see-this-stuff"&gt;
&lt;h2&gt;Where can I see this stuff...?&lt;/h2&gt;
&lt;p&gt;My work is kept in the &amp;quot;&lt;a class="reference external" href="https://hg.instantbird.org/experiments/file/IRC-JavaScript/"&gt;experiments&lt;/a&gt;&amp;quot; repository on Instantbird's
&lt;a class="reference external" href="http://mercurial.selenic.com/"&gt;Mercurial&lt;/a&gt; repository.&amp;nbsp; There's also a variety of bugs open (they're
listed above, I'm not going to re-list them), although not a ton is
happening in them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-can-i-help"&gt;
&lt;h2&gt;How can I help?!&lt;/h2&gt;
&lt;p&gt;Well you can of course feel free to download the code and hack on it,
let me know (via IRC or any of the bugs most likely) if you have a patch
you'd like me to apply.&amp;nbsp; Or if you just found something that doesn't
work you can feel free to let me know, although I probably just haven't
gotten around to fixing it yet.&lt;/p&gt;
&lt;p&gt;Also, if you've ever found something annoying / broken in the IRC
implementation in Instantbird / libpurple please let us know (through
any of the above contact sources).&lt;/p&gt;
&lt;p&gt;Hopefully that's a bit of a better explanation of why we're spending
time to rewrite the IRC protocol implementation into JavaScript -- we
definitely think it's worth it and can lead to a bunch of new unique
protocol plug-ins for Instantbird.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Instantbird"></category><category term="IRC"></category><category term="Mozilla"></category><category term="programming"></category></entry><entry><title>JavaScript IRC in Instantbird</title><link href="https://clokep.github.io/javascript-irc-in-instantbird.html" rel="alternate"></link><updated>2010-12-04T21:24:00-05:00</updated><author><name>Patrick Cloke</name></author><id>tag:https://clokep.github.io,2010-12-04:javascript-irc-in-instantbird.html</id><summary type="html">&lt;p&gt;I've been working on rewriting the IRC plugin for &lt;a class="reference external" href="http://www.instantbird.com/"&gt;Instantbird&lt;/a&gt; since
the summer (sometime in August, I can't seem to find the exact date --
at least since Sept. 10th though).&lt;/p&gt;
&lt;p&gt;Since &lt;a class="reference external" href="http://developer.pidgin.im/wiki/WhatIsLibpurple"&gt;libpurple&lt;/a&gt; (used in Pidgin, Adium, etc.) provides the IRC
protocol that we currently use, why do this?&amp;nbsp; One reason is to iron out
(and find) some of the bugs left in implementing protocols in JavaScript
and part of it is so I can learn to code better.&amp;nbsp; Unfortunately during
this semester I was not able to get as much done as I had hoped and
almost everything that had been done was finished in August/September&lt;/p&gt;
&lt;p&gt;Some big milestones I've completed (with dates if I have them):&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Connected to server via sockets in JavaScript&lt;/li&gt;
&lt;li&gt;Generate a conversation that works as a raw connection to the server
(i.e. as if you had opened a telnet connection to the server)&lt;/li&gt;
&lt;li&gt;Parsing messages and automatic ponging when the server pings&lt;/li&gt;
&lt;li&gt;Joining a channel (2010/12/04, i.e. today!)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There had been a bunch of small bugs I had been having in getting this
to work: one error, (which I found quickly) one of the other developers
(&lt;a class="reference external" href="http://queze.net/"&gt;Florian&lt;/a&gt;) was able to help me out with, was that I was not initiating
a &lt;strong&gt;new&lt;/strong&gt; object.&amp;nbsp; And after learning a bit above observers I was able
to get the UI to respond.&amp;nbsp; I even threw in support for op/half-op/voice
After today's work I was able to generate the following screenshot:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://clokep.github.io/images/IRCworking2.png"&gt;&lt;img alt="IRCworking" src="https://clokep.github.io/images/IRCworking2.png" style="height: 297px;" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This build would be almost fully usable by those who do very little on
IRC (i.e. if you just want to go and chat, it'd work well), but there's
a lot more work to be done.&amp;nbsp; The code can be viewed in the &lt;a class="reference external" href="https://hg.instantbird.org/experiments/file/IRC-JavaScript/"&gt;Experiments
repository&lt;/a&gt;.&amp;nbsp; (Check it out, there's a 600+ line switch statement.)&lt;/p&gt;
</summary><category term="Instantbird"></category><category term="IRC"></category><category term="Mozilla"></category><category term="programming"></category></entry><entry><title>Yahoo &amp; Thunderbird Can Finally Play Nice?</title><link href="https://clokep.github.io/yahoo-thunderbird-can-finally-play-nice.html" rel="alternate"></link><updated>2010-11-23T03:03:00-05:00</updated><author><name>Patrick Cloke</name></author><id>tag:https://clokep.github.io,2010-11-23:yahoo-thunderbird-can-finally-play-nice.html</id><summary type="html">&lt;p&gt;For years I've been dealing with Yahoo's lack of support for any sort
of decent (free) POP3/IMAP/SMTP protocol support.&amp;nbsp; Why do I need this?
So I can check my &lt;a class="reference external" href="http://mail.yahoo.com/"&gt;Yahoo mail&lt;/a&gt; in &lt;a class="reference external" href="http://www.mozillamessaging.com/en-US/thunderbird/"&gt;Mozilla Thunderbird&lt;/a&gt; of course!&lt;/p&gt;
&lt;p&gt;At first I used &lt;a class="reference external" href="http://ypopsemail.com/"&gt;YPOPS!&lt;/a&gt;, a program that read the HTML pages provided
by the Yahoo webmail client and served the emails on a local POP
server.&amp;nbsp; Cool, right?&amp;nbsp; Except it always broke whenever Yahoo changed
their pages around.&lt;/p&gt;
&lt;p&gt;After a bit I moved onto using the &lt;a class="reference external" href="http://www.blogger.com/"&gt;WebMail extension&lt;/a&gt; for
Thunderbird.&amp;nbsp; It essentially works the same way, but runs in the
Thunderbird process as an extension instead of as a separate service.
It's a little complicated to set up and requires two extensions.&amp;nbsp; The
general WebMail extension and a Yahoo specific one (there's also ones
available for Hotmail, Gmail, Libero and AOL).&amp;nbsp; You might wonder why
this exists for some services that have always had POP/IMAP access
(Gmail)?&amp;nbsp; I was too, apparently some people cannot check those ports
because of firewall issues so this essentially allows them to check it
via port 80, over an HTTP connection.&lt;/p&gt;
&lt;p&gt;A few months ago I came across &lt;a class="reference external" href="http://www.emaildiscussions.com/showthread.php?t=59575"&gt;post&lt;/a&gt; describing how a &lt;a class="reference external" href="http://en.wikipedia.org/w/index.php?title=Yahoo%21_Mail&amp;amp;oldid=396914770#Free_IMAP_and_SMTPs_access"&gt;simple
(nonstandard) command&lt;/a&gt; could allow access to the Yahoo IMAP server, but
it required &lt;a class="reference external" href="http://www.crasseux.com/linux/"&gt;patching the Thunderbird source&lt;/a&gt; -- not an option for me
since I've been running nightlies of either Thunderbird 3.1 or 3.2/3.3
for a while now. (I mean sure, I could do it...but WebMail extension was
working fine.)&amp;nbsp; There was &lt;a class="reference external" href="http://groups.google.com/group/mozilla.dev.apps.thunderbird/browse_thread/thread/546356554c73f8ca"&gt;some discussion&lt;/a&gt; about it and a &lt;a class="reference external" href="https://bugzilla.mozilla.org/show_bug.cgi?id=493064"&gt;bug&lt;/a&gt; was
filed for Thunderbird.&lt;/p&gt;
&lt;p&gt;So how did this lead to free IMAP support?&amp;nbsp; I noticed in the &lt;a class="reference external" href="https://wiki.mozilla.org/Thunderbird/StatusMeetings/2010-11-16#Web_Update"&gt;Weekly
Status Meeting Notes (2010-11-16)&lt;/a&gt; for Thunderbird a mention of &lt;a class="reference external" href="http://trunk.mozillamessaging.com/en-US/thunderbird/features/email_providers.html"&gt;Free
Email Providers&lt;/a&gt; page.&amp;nbsp; Checking it out it said &amp;quot;Y! Mail is a free
email service provided by Yahoo! It offers webmail supported by targeted
advertising as well as IMAP access.&amp;quot;&amp;nbsp; Hmm...but I just said they don't
have support this for free! A quick Bing search brought up a &lt;a class="reference external" href="http://www.theanimail.com/imap_server_settings.html"&gt;page with
IMAP server settings&lt;/a&gt;.&amp;nbsp; I figured I'd check if they work, and sure
enough they did!&amp;nbsp; The settings are copied below:&lt;/p&gt;
&lt;blockquote&gt;
&lt;table class="docutils field-list" frame="void" rules="none"&gt;
&lt;col class="field-name" /&gt;
&lt;col class="field-body" /&gt;
&lt;tbody valign="top"&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;User name:&lt;/th&gt;&lt;td class="field-body"&gt;[STRIKEOUT:user&amp;#64;yahoo.com] user&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;IMAP server:&lt;/th&gt;&lt;td class="field-body"&gt;[STRIKEOUT:imap-ssl.mail.yahoo.com] imap.mail.yahoo.com&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;Port:&lt;/th&gt;&lt;td class="field-body"&gt;993&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;Password:&lt;/th&gt;&lt;td class="field-body"&gt;Cleartext/Normal&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;SSL:&lt;/th&gt;&lt;td class="field-body"&gt;yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;SMTP server:&lt;/th&gt;&lt;td class="field-body"&gt;smtp.mail.yahoo.com&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;Port:&lt;/th&gt;&lt;td class="field-body"&gt;465&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;Password:&lt;/th&gt;&lt;td class="field-body"&gt;Cleartext/Normal&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;SSL:&lt;/th&gt;&lt;td class="field-body"&gt;yes&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/blockquote&gt;
&lt;p&gt;Awesome!&amp;nbsp; Anyway, I replied with this info in the aforementioned bug
and &lt;a class="reference external" href="https://bugzilla.mozilla.org/attachment.cgi?id=492550&amp;amp;action=diff"&gt;a patch&lt;/a&gt; was quickly added by Mozilla's &lt;a class="reference external" href="http://www.bucksch.org/1/projects/mozilla/"&gt;Ben Bucksch&lt;/a&gt; to support
this in Thunderbird, hopefully it'll make it into the next version!&amp;nbsp; It
was also brought to my attention that imap-ssl.mail.yahoo.com provides
an SSL certificate that is valid for imap.mail.yahoo.com only, I'd
suggest using that former.&lt;/p&gt;
&lt;p&gt;Note that I'm currently suffering from &lt;a class="reference external" href="https://bugzilla.mozilla.org/show_bug.cgi?id=610264"&gt;another bug&lt;/a&gt; while using
Yahoo IMAP.&amp;nbsp; Everything works, there's just an annoying pop-up
occasionally about the error.&amp;nbsp; Hopefully it will be fixed soon.&lt;/p&gt;
</summary><category term="bugs"></category><category term="email"></category><category term="IMAP"></category><category term="Mozilla"></category><category term="POP3"></category><category term="programming"></category><category term="SMTP"></category><category term="Thunderbird"></category><category term="Yahoo"></category></entry></feed>