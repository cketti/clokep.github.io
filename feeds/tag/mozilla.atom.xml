<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Like bricks in the sky</title><link href="https://clokep.github.io/" rel="alternate"></link><link href="https://clokep.github.io/feeds/tag/mozilla.atom.xml" rel="self"></link><id>https://clokep.github.io/</id><updated>2014-04-16T16:34:00-04:00</updated><entry><title>Community and Volunteers</title><link href="https://clokep.github.io/community-and-volunteers.html" rel="alternate"></link><updated>2014-04-16T16:34:00-04:00</updated><author><name>Patrick Cloke</name></author><id>tag:https://clokep.github.io,2014-04-16:community-and-volunteers.html</id><summary type="html">&lt;p&gt;It was suggested that I cross-post this from mozilla.dev.planning onto
my blog. This is in reply to a thread entitled &amp;quot;&lt;a class="reference external" href="https://groups.google.com/forum/#%21topic/mozilla.dev.planning/P8oHKTCWSiQ"&gt;Proposal: Move
Thunderbird and SeaMonkey to mozilla-central&lt;/a&gt;&amp;quot; about (essentially)
merging comm-central back into mozilla-central. There have been many
technical concerns raised in the thread (that I'm not going to rehash
here). What I'm more interested in is the lack of community feeling
there. As Nicholas Nethercote said in that thread:&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;I am surprised [...] by how heartless the discussion has been.&amp;quot;&lt;/blockquote&gt;
&lt;p&gt;I should note that I did have some help editing this down from my
original post. Turns out I tend to write inflammatory statements that
don't help get me point across. Who knew? Anyway, thanks to all of you
who helped me out there!&lt;/p&gt;
&lt;p&gt;My full post is below (with a few links added and plaintext formatting
converted to HTML formatting):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;On Monday, April 14, 2014 4:52:53 PM UTC-4, Nicholas Nethercote
wrote:&lt;/p&gt;
&lt;p&gt;&amp;gt; The technical aspects of this decision have been discussed to death,
&amp;gt; so I won't say anything about that. I am surprised, however, by how
&amp;gt; heartless the discussion has been.&lt;/p&gt;
&lt;p&gt;I agree, the technical bitshere seem to have solutions suggested by
Joshua and others, but the non-technical parts of this discussion
have left mefeeling disheartened and confused with the Mozilla
community.&lt;/p&gt;
&lt;p&gt;I find it ironic/amusing/sad/upsetting that a few threads above this
is a thread entitled &amp;quot;&lt;a class="reference external" href="https://groups.google.com/forum/#!topic/mozilla.dev.planning/1kbZsYoQcng"&gt;Contributor pathways, engagement points and
bug mentoring&lt;/a&gt;&amp;quot; while in this thread I see community contributors
being blocked at every turn!&lt;/p&gt;
&lt;p&gt;Here I don't see people attempting to foster a community by putting
their best foot forward. I see people trying to get their &lt;strong&gt;job&lt;/strong&gt;
done; with an attitude of &amp;quot;if this doesn't help me, get it outta my
way!&amp;quot; I don't think this is the right way to grow a community. I
don't think this is how Mozilla HAS grown it's community. I don't
think it's in line with what Mozilla expects from it's community
members (both employees and volunteers!)&lt;/p&gt;
&lt;p&gt;Personally, I dislike the amount of Mozilla &lt;strong&gt;Corporation&lt;/strong&gt; goals
focus in this thread. Can we have a discussion aspart ofa larger
community? Why must it focus on Corporate goals? I'm not part of the
corporation, I don't really care what its goals are or are not. I
care about Mozilla, I care about providing high-quality, free, open
source softwareto improve the experience of the Internet for
everyone. And no, I'm not talking about Firefox. I'm talking about
Thunderbird. I understand that Mozilla's goals arecurrently Firefox
and Firefox OS, but these are not my personal goals.&lt;/p&gt;
&lt;p&gt;At the Summit I had a few conversations with people about
&amp;quot;on-boarding&amp;quot; new employees and getting them to understand how the
community works and that interacting with the community in a
positive manner is an important part of Mozilla. I don't remember
the exact context, but part of it wasthat it is important that new
employees don't think of it as &amp;quot;How can I &lt;em&gt;use&lt;/em&gt; the community?&amp;quot;, for
that implies taking advtange of them, but &amp;quot;How can I work with the
community?&amp;quot;&lt;/p&gt;
&lt;p&gt;Please don't see this as an &amp;quot;employees vs. volunteers&amp;quot; argument. I
believe that I'm expected to live up to these same goals. If I, as a
volunteer, can help an employee achieve his goals; I'm
[STRIKEOUT:more than willing], no...I'm EXPECTED to do that. I think
this is a two-way relationship that must be fostered. It has seemed
to me that over the past couple of years that I've been hanging
around here there's been less and less focus on the community and
more and more on the Corporation.&lt;/p&gt;
&lt;p&gt;I understand Thunderbird and SeaMonkey may not be important to you,
but it is important tome! (And otherswho contribute
totheThunderbird/SeaMonkey community, including employees who
contribute on their spare time.) When Mozilla stopped directly
supporting development of Thunderbird it was widely announced that
&amp;quot;Thunderbird is dead!&amp;quot;. We, as part of the Mozilla community, have
been fighting to prove this wrong.Could you please respect our
efforts? Merging c-c into m-c will help us focus our efforts on
building a great product instead of spending significant effort on
keeping a dying one on life-support. (And prove to all that
&amp;quot;Thunderbird is dead!&amp;quot; was just a sensational headline.)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I don't have much else to say beyond that (besides thanks for reading
this far!)&lt;/p&gt;
</summary><category term="community"></category><category term="crosspost"></category><category term="Mozilla"></category><category term="Thunderbird"></category></entry><entry><title>GSoc Lessons: Part Deux: The Arms Race</title><link href="https://clokep.github.io/gsoc-lessons-part-deux-the-arms-race.html" rel="alternate"></link><updated>2013-12-04T13:17:00-05:00</updated><author><name>Patrick Cloke</name></author><id>tag:https://clokep.github.io,2013-12-04:gsoc-lessons-part-deux-the-arms-race.html</id><summary type="html">&lt;p&gt;This post title might be a little excessive, but I'll blame &lt;a class="reference external" href="http://en.wikipedia.org/wiki/The_Sum_of_All_Fears_%28film%29"&gt;The Sum
of All Fears&lt;/a&gt; that I was watching last night. This is the second part
of a set of posts about ideas I heard at the Google Summer of Code 2013
Mentor Summit (you can read &lt;a class="reference external" href="https://clokep.github.io/gsoc-lessons-part-1-application-period.html"&gt;the first part about the application
process&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;This will explore an interesting anecdote I heard about the
interaction between applicants from another organization that, on
reflection, seemed to resonate somewhat with what I had seen in my
corner of the Mozilla community.&lt;/p&gt;
&lt;p&gt;The organization these students were applying to required patches to
be fixed for a student's application to be accepted (as discussed in my
previous post). For a particular project there existed multiple highly
motivated and skilled students, but only one slot. Thus, a &amp;quot;patch race&amp;quot;
of sorts occurred where the students competed by continually providing
more patches that were increasingly complex. (Note that this wasn't a in
response to a challenge from community members, it was a spontaneous
situation.) Once a single student started to submit extra patches the
other students felt they must also submit more patches to be considered
equal/superior (hence my allusion to an &amp;quot;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Arms_race#Nuclear_arms_race"&gt;arms race&lt;/a&gt;&amp;quot;).
Interestingly, they would also sometimes work on the same bug in a sort
of race to see who could fix it first.&lt;/p&gt;
&lt;p&gt;There's a couple things I took away from this:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Great, the project just had a lot of things fixed!&lt;/li&gt;
&lt;li&gt;The students were investing escalating amounts of time &lt;em&gt;during the
application phase&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;The students were not working in an open manner.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I won't really expand much more about the first point, it's always
good to fix things.&lt;/p&gt;
&lt;p&gt;Although submitting patches might showcase a student's skill, it also
relates to how much time the student is willing and able to put into the
application period. This, in particular, matters since different areas
of the world end their school year at different times. A student that
has already finished his semester during the application period may have
a lot of free time to attempt to get a GSoC slot (but will most likely
not have as much time during the actual summer!) This something that
mentors should keep in mind while reviewing applications.&lt;/p&gt;
&lt;p&gt;A downside of increasing amounts of time invested is that the
rejection is that much harder for both the mentor (especially if the
student is now part of the community!), as well as for the student who
has now vested a large amount of time in the project.&lt;/p&gt;
&lt;p&gt;The realization that actually upset me, however, is that these
students were not working in an open manner! Instead of collaborating,
they were competing! To me, this would set off a very poor tone for the
rest of GSoC. In fact, one of the biggest challenges I've had with GSoC
students is getting them to work in the open (i.e. &amp;quot;show me the code&amp;quot;,
anyone in &lt;a class="reference external" href="irc://irc.mozilla.org/#instantbird"&gt;#instantbird&lt;/a&gt; is probably tired of hearing me say that).&lt;/p&gt;
&lt;p&gt;At this point you &lt;em&gt;might&lt;/em&gt; think this is a hypothetical case I made up!
Upon letting it sink in and reflecting on it...I realized I had actually
seen similar situations during the application periods I've been
involved with. This year, we found a bug in Instantbird's IRC code (CTCP
quoting and dequoting); after referencing some &lt;a class="reference external" href="https://clokep.github.io/the-so-called-irc-specifications.html"&gt;specifications&lt;/a&gt;, I was
pretty quickly able to figure out the vague areas where people should
look for a fix. A couple of GSoC students in the room started looking
into it and exhibited a greatly reduced form of the behavior I discussed
above. The students were sharing information, but were not comfortable
sharing code. Unfortunately, this led to some very vague questions which
I was unable to answer (or answered incorrectly) and led to me coining
my catchphrase from above.&lt;/p&gt;
&lt;p&gt;I by no means think this reflects poorly on our students! I think this
is some what natural and expected for most students unfamiliar with open
development. (Extrapolating from my experiences in school...) Students
generally work individually (or in small groups) on projects and are
directly competing for grades (at least if the course is graded on a
curve). This would foster a sense of competition as opposed to
cooperation! Luckily the students working with us understood (with very
little prompting, I might add!) that we'd prefer they work together and
help each other. We were able to successfully fix the dequoting bug
(which then caused a bug in the quoting code to be visible...sigh...).&lt;/p&gt;
&lt;p&gt;My &lt;strong&gt;short take away&lt;/strong&gt; from all this: remember that students are not
yet a community and they're competing with each other until they've been
accepted. (And that they're used to competing, e.g. homework and exams,
not collaborating!) I don't really know whether I feel the above
situation is good or bad, but it's certainly an interesting effect from
the way the GSoC process works.&lt;/p&gt;
</summary><category term="community"></category><category term="GSoC"></category><category term="Mozilla"></category></entry><entry><title>GSoC Lessons: Part 1: Application Period</title><link href="https://clokep.github.io/gsoc-lessons-part-1-application-period.html" rel="alternate"></link><updated>2013-12-02T00:55:00-05:00</updated><author><name>Patrick Cloke</name></author><id>tag:https://clokep.github.io,2013-12-02:gsoc-lessons-part-1-application-period.html</id><summary type="html">&lt;p&gt;I briefly talked about &lt;a class="reference external" href="https://clokep.github.io/google-summer-of-code-mentor-summit-2013.html"&gt;my experiences&lt;/a&gt; at the Google Summer of Code
2013 Mentor Summit. I've been pretty remiss in sharing what was actually
discussed there and for that I must apologize! This will hopefully be
one of a few posts about what I learned and discussed at the Summit.&lt;/p&gt;
&lt;p&gt;The first part I'd like to talk about is the application period:
welcoming students, requirements for student applications, etc. Much of
what I say on here is just ideas I've heard other organizations
implement (with my personal opinion on them, please don't think this
represents what Mozilla is suggesting students do, or even what I'm
suggesting Mozilla should ask students to do!)&lt;/p&gt;
&lt;p&gt;I had many separate conversations about what is required for an
application to be accepted. It seems that Mozilla is actually on the
side of one of the easier organizations to apply to. We don't (to my
knowledge) require that students have contributed at all to the
community beforehand. It is possible that some smaller communities
inside of Mozilla require more than just an application, but there does
not seem to be any rule across Mozilla. I said I wouldn't offer my
opinion above...but I lied: I think Mozilla should make it clearer to
applicants what is expected of them before the application.&lt;/p&gt;
&lt;p&gt;There seem to be a variety of things different organizations &amp;quot;require&amp;quot;
before accepting a student application, for example:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A patch / pull request&lt;/li&gt;
&lt;li&gt;IRC / email involvement / idling&lt;/li&gt;
&lt;li&gt;File a bug (I mean this in the &amp;quot;Mozilla&amp;quot; sense: an actual bug, a
feature request, etc.)&lt;/li&gt;
&lt;li&gt;Fix a bug / make a commit&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I think all of these have pros and cons and making any a hard and fast
rule would probably be a bad idea. Personally for Instantbird, we
greatly encourage students to idle on IRC and get to know us; and to fix
a minor bug or two or three. What I'm always looking for is: use,
passion, and skill.&lt;/p&gt;
&lt;p&gt;Asking for a &lt;strong&gt;patch / pull request&lt;/strong&gt; (I include these together since
they really just depend on how an organization accepts changes) can be a
bit intimidating for a new user. I think this can be a pretty rough
thing to ask for new contributors that might not want to share their
work publicly with a large group of people (on a mailing list, public
bug tracker, etc.) where they might be wrong. Even after being part of
the community, I find that GSoC students are often very unwilling to
publicly share code unless it's &amp;quot;perfect&amp;quot;, but I digress. Anyway, if
you're considering &amp;quot;requiring&amp;quot; this, I think it should be pretty clear
that this changeset doesn't need to be &lt;em&gt;perfect&lt;/em&gt;, it just needs to show
that the student is able to read code, understand a bug report, provide
a fix and test it.&lt;/p&gt;
&lt;p&gt;I think it's perfect reasonable to ask students to &lt;strong&gt;idle on IRC and
join mailing lists&lt;/strong&gt;. They should definitely be trying to understand the
community before attempting to join it. It isn't just a matter of if the
community thinks the student would be a good fit, but also the student
must ensure they can fit into the community.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Filing a bug&lt;/strong&gt; is a great way for a student to show a few different
things: they've used your software; they've used your software enough to
find a bug in it (and there most likely is one!); they're able to
express themselves in a clear and concise matter. If you're lucky
they'll find something that actually annoys them and fix it themselves!&lt;/p&gt;
&lt;p&gt;I have &lt;strong&gt;fix a bug&lt;/strong&gt; listed last. You might ask how this differs from
submitting a patch...and it does! Fixing a bug requires a patch to go
through whatever review process your project uses, but builds upon just
submitting a patch. My thoughts on this are pretty similar to just
submitting a patch, but it depends on how large the bug is.&lt;/p&gt;
&lt;p&gt;Something I found interesting is that almost everyone I talked to
didn't treat their GSoC students any differently than they would treat a
new contributor to their project. They still had to prove they were
worthy of commit access, etc. Is there anything else you ask of your
students before they apply to GSoC? I'd love to hear it!&lt;/p&gt;
&lt;p&gt;Some other topics I'll hopefully find some time to write about
include: community lessons, and handling a failing student. The
community one will be very not-GSoC focused and could apply to just
trying to incorporate new contributors...but I'll include it in this
series.&lt;/p&gt;
</summary><category term="community"></category><category term="GSoC"></category><category term="Mozilla"></category></entry><entry><title>Google Summer of Code Mentor Summit 2013</title><link href="https://clokep.github.io/google-summer-of-code-mentor-summit-2013.html" rel="alternate"></link><updated>2013-10-21T02:18:00-04:00</updated><author><name>Patrick Cloke</name></author><id>tag:https://clokep.github.io,2013-10-21:google-summer-of-code-mentor-summit-2013.html</id><summary type="html">&lt;p&gt;Not only was I lucky enough to mentor a great student for this year's
Google Summer of Code, but Mozilla asked me to represent them at the
Google Summer of Code Mentor Summit!&amp;nbsp; This was located at Google's
offices in Mountain View, California this past weekend (Friday, Oct.
18th - Sunday, Oct. 20th, 2013).&lt;/p&gt;
&lt;p&gt;Before actually heading over to the Summit, &lt;a class="reference external" href="http://mykzilla.org/"&gt;Myk Melez&lt;/a&gt; and &lt;a class="reference external" href="http://nickdesaulniers.github.io/"&gt;Nick
Desaulniers&lt;/a&gt; were kind enough to show me around the Mozilla Mountain
View office!&amp;nbsp; (Thanks to Daniel Holbert for setting that up!)&lt;/p&gt;
&lt;p&gt;The GSoC Mentor Summit is run as an &amp;quot;unconference&amp;quot;, the open sessions
were chosen by conference attendees and run as discussions with no
keynote speakers.&amp;nbsp; This was an interesting experience and how good each
session was varied quite a bit by who was taking part in the discussion,
but overall it was great to hear the experiences of other projects with
their GSoC students, as well as to hear about lots of projects I had
never heard of before!&amp;nbsp; In general the session I attended were about
community building and managing GSoC students, I took lots of notes and
will digest all of this in further detail at some point.&lt;/p&gt;
&lt;p&gt;I was able to meet lots of great people from different projects, just
a few of which were: &lt;a class="reference external" href="http://pidgin.im/"&gt;Pidgin&lt;/a&gt;, &lt;a class="reference external" href="http://www.debian.org/"&gt;Debian&lt;/a&gt;, &lt;a class="reference external" href="http://buildbot.net/"&gt;Buildbot&lt;/a&gt;, the &lt;a class="reference external" href="http://www.opendmx.net/"&gt;Open
Lighting Project&lt;/a&gt;, the &lt;a class="reference external" href="https://www.torproject.org/"&gt;Tor Project&lt;/a&gt;, &lt;a class="reference external" href="https://www.phpbb.com/%E2%80%8E"&gt;phpBB&lt;/a&gt;, etc.&amp;nbsp; Unfortunately
being from Mozilla, most people already know what you do...or they think
you do at least!&amp;nbsp; Many people were surprised when I said I work on
Thunderbird and Instantbird.&amp;nbsp; I heard &amp;quot;Thunderbird is dead&amp;quot; at least
twenty times, which was quite disappointing that those in the open
source community don't even understand the current status of
Thunderbird.&amp;nbsp; Many were happy to hear that it is still being maintained
and developed by the community, however.&amp;nbsp; I even had some people thank
me (which I don't really deserve) for helping to continue maintain
Thunderbird!&amp;nbsp; It was great to hear things like this at the Mozilla
Summit, but it was really invigorating to hear people outside of the
Mozilla community excited that their favorite email client was still
being developed.&lt;/p&gt;
&lt;p&gt;People were further surprised to hear that Thunderbird now includes
instant messaging / chat (since Thunderbird 15 or 17) and that there is
a Gecko based instant messaging client: Instantbird.&amp;nbsp; It seemed like
some people were excited by this and hopefully they'll try it out!&lt;/p&gt;
&lt;p&gt;Anyway, I've gone a little off-topic, but overall the Mentor Summit
was great and I'd like to thank both Mozilla and Google for giving me
this opportunity.&amp;nbsp; If I find any really great gems in my notes I'll
write further blog posts about them.&lt;/p&gt;
</summary><category term="Google"></category><category term="GSoC"></category><category term="Mozilla"></category></entry><entry><title>JavaScript typed arrays pain</title><link href="https://clokep.github.io/javascript-typed-arrays-pain.html" rel="alternate"></link><updated>2012-11-29T03:11:00-05:00</updated><author><name>Patrick Cloke</name></author><id>tag:https://clokep.github.io,2012-11-29:javascript-typed-arrays-pain.html</id><summary type="html">&lt;p&gt;If you've ever tried to deal with binary data in JavaScript you know
it isn't much fun and you usually resort to using strings lots of
charCodeAt and related functions.&amp;nbsp; &lt;a class="reference external" href="https://developer.mozilla.org/en-US/docs/JavaScript_typed_arrays"&gt;Typed arrays&lt;/a&gt; are supposed to solve
this though!&amp;nbsp; The typed array API consists of creating a buffer of bytes
(called an &lt;a class="reference external" href="https://developer.mozilla.org/en-US/docs/JavaScript_typed_arrays/ArrayBuffer"&gt;ArrayBuffer&lt;/a&gt;) and then manipulating those bytes via
different views (&lt;a class="reference external" href="https://developer.mozilla.org/en-US/docs/JavaScript_typed_arrays/ArrayBufferView"&gt;ArrayBufferView&lt;/a&gt;s).&amp;nbsp; You can have multiple views of
the same buffer, starting at different offsets, of different lengths and
types...which is all neat from a technical point of view, but is it
really useful?&amp;nbsp; It is kind of nice working with the views as if they
were normal arrays though.&lt;/p&gt;
&lt;p&gt;I've been playing with these ArrayBuffers quite a bit as I'm working
on an implementation of the &lt;a class="reference external" href="http://en.wikipedia.org/wiki/OSCAR_protocol"&gt;OSCAR protocol&lt;/a&gt; (used for &lt;a class="reference external" href="http://en.wikipedia.org/wiki/AOL_Instant_Messenger"&gt;AOL Instant
Messenger&lt;/a&gt; and &lt;a class="reference external" href="http://en.wikipedia.org/wiki/ICQ"&gt;ICQ&lt;/a&gt;) in the chat backend (for Instantbird /
Thunderbird).&amp;nbsp; (As an aside, the OSCAR protocol Wikipedia page has
surprisingly good documentation of some of the underlying data
structures of the protocol...)&amp;nbsp; I started by writing some test code
using ArrayBuffers and views, which have been around a while: since
Gecko 2.0 in fact!&amp;nbsp; I quickly ran into some tedious issues with
repetitive code such as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt; * A TLV (Type, Length and Value) data structure:&lt;/span&gt;
&lt;span class="cm"&gt; *  Unsigned Short  type    Describes what the value represents.&lt;/span&gt;
&lt;span class="cm"&gt; *  Unsigned Short  length  The length of the data block.&lt;/span&gt;
&lt;span class="cm"&gt; *  Bytes           value   The raw payload.&lt;/span&gt;
&lt;span class="cm"&gt; *&lt;/span&gt;
&lt;span class="cm"&gt; * The overall length of a TlvBlock is length + 4.&lt;/span&gt;
&lt;span class="cm"&gt; *&lt;/span&gt;
&lt;span class="cm"&gt; * The inputs to this are:&lt;/span&gt;
&lt;span class="cm"&gt; *  aType    The type of the TLV Block.&lt;/span&gt;
&lt;span class="cm"&gt; *  aValue   An ArrayBuffer containing the data.&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;TlvBlock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;aValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ArrayBuffer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aValue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;byteLength&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;// The first two bytes are unsigned shorts.&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;view&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Uint16Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;view&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;aType&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;view&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;aValue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;byteLength&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// The rest just gets the data copied into it.&lt;/span&gt;
  &lt;span class="nx"&gt;view&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Uint8Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;view&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Uint8Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aValue&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This actually illustrates two annoying issues I have:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;I end up with extra lines of code defining a new view every time I
switch data types.&lt;/li&gt;
&lt;li&gt;There's no simple way to copy an ArrayBuffer into a part of an
ArrayBuffer. In the above example I create a Uint8Array view of the
target location, a Uint8Array view of the source location and then
set the source to the target. Seems simple once you figure it out,
but it took a while to figure out.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;(As an aside, some of you might find the following function helpful,
it is essentially a &lt;a class="reference external" href="http://en.cppreference.com/w/cpp/string/byte/memcpy"&gt;memcpy&lt;/a&gt; for ArrayBuffers...this isn't really
tested heavily at all, however.)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt; * aTarget / aSource are ArrayBuffers&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;copyBytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aTarget&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;aSource&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;aTargetOffset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;aSourceOffset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;aLength&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;aSource&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;byteLength&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// The rest just gets the data copied into it.&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;view&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Uint8Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aTarget&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;aTargetOffset&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;view&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Uint8Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aSource&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;aSourceOffset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;aLength&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;OK, so typed arrays seem good, but kind of annoying, right?
Wrong...the OSCAR protocol is a &amp;quot;network order&amp;quot; protocol (aka it is big
endian). At this point you're probably thinking &amp;quot;OK, so the ArrayBuffer
constructor must take an endianess flag!&amp;quot;&amp;nbsp; Wrong, it does no such
thing.&amp;nbsp; &amp;quot;Hmmm...Well do the ArrayBufferViews take an endianess flag?&amp;quot;
Nope, wrong again.&amp;nbsp; The only way to specify the endianess of the data is
to use a &lt;a class="reference external" href="https://developer.mozilla.org/en-US/docs/JavaScript_typed_arrays/DataView"&gt;DataView&lt;/a&gt;, a slightly different interface to the underlying
bytes.&amp;nbsp; It offers an API to individually set different data elements via
their offset and endianess.&amp;nbsp; (If you're too lazy to read the
documentation all the way through, DataView assumes big endian: makes my
life easier!)&lt;/p&gt;
&lt;p&gt;For the curious, JavaScript typed arrays use the system endianess,
which in my opinion is pretty much useless (at least if you plan on
sharing data) since you can never guarantee the endianess to be either
big or little endian.&amp;nbsp; (The fun part is that this isn't even documented,
I found it on &lt;a class="reference external" href="http://stackoverflow.com/questions/7869752/javascript-typed-arrays-and-endianness"&gt;Stack Overflow&lt;/a&gt; and verified.)&lt;/p&gt;
&lt;p&gt;So, in summary...if you plan on networking at all with ArrayBuffers,
don't use ArrayBufferViews, use DataViews.&amp;nbsp; (Although Uint8Arrays and
Int8Arrays should work fine!)&lt;/p&gt;
&lt;p&gt;And to not rant the &lt;em&gt;entire&lt;/em&gt; time, working with typed arrays certainly
does beat strings + charCodeAt!&lt;/p&gt;
</summary><category term="IM"></category><category term="Instantbird"></category><category term="Mozilla"></category><category term="OSCAR"></category><category term="Thunderbird"></category><category term="Wat"></category></entry><entry><title>IRC Auto-Performs</title><link href="https://clokep.github.io/irc-auto-performs.html" rel="alternate"></link><updated>2012-06-11T02:25:00-04:00</updated><author><name>Patrick Cloke</name></author><id>tag:https://clokep.github.io,2012-06-11:irc-auto-performs.html</id><summary type="html">&lt;p&gt;There have been a &lt;a class="reference external" href="https://bugzilla.mozilla.org/show_bug.cgi?id=742675"&gt;few&lt;/a&gt; &lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=1101"&gt;requests&lt;/a&gt; to support &amp;quot;auto-performs&amp;quot;
(sending commands to the IRC server after connection that the user types
into a box or whatever). Personally I find this to be:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;A fairly awful user experience.&lt;/li&gt;
&lt;li&gt;Confusing to new users.&lt;/li&gt;
&lt;li&gt;Unnecessary.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I additionally don't like this idea since it requires us to have
commands for all the common tasks you'd want to do in an auto-perform
(or support sending absolutely raw messages to the server, which we
actually do already in the /quote command). Essentially what I just
described is writing our own scripting language...that seems pointless
(and frankly, I have better things to do). I'm hoping to convince you
with this post (and maybe a series of posts) that auto-performs aren't
necessary and a trivial restartless extension can replace them.&lt;/p&gt;
&lt;div class="section" id="design"&gt;
&lt;h2&gt;Design&lt;/h2&gt;
&lt;p&gt;Part of the desire to &lt;a class="reference external" href="https://clokep.github.io/why-rewrite-the-irc-protocol-plugin-part-2.html"&gt;replace the libpurple IRC protocol plugin&lt;/a&gt;
with a new JavaScript one built specifically for Instantbird (which is
also now used in Thunderbird!) was to make the protocol fully
extensible. There are &lt;a class="reference external" href="https://clokep.github.io/the-so-called-irc-specifications.html"&gt;many revisions and unofficial extensions to IRC&lt;/a&gt;
and we might not necessarily want to support them all (especially if
they only apply to a single network). Allowing all parts of the protocol
implementation to be touched and extended seemed like a great way to
handle this.&lt;/p&gt;
&lt;p&gt;Initially I tried to do this by making the IRC account into an XPCOM
component (well it is one already, it's an prplIAccount, but I meant an
IRC specific one: implementing ircIAccount, if you will). Unfortunately,
this seemed to have a lot of overhead and got complicated extremely
quickly. Anything I'd want to touch from a message handler (wait,
wait...what's a handler?! I'll get back to that) would need to have
methods written and exposed to access internal data of the
account...does that sound very extensible to you? Well, it doesn't to
me...&lt;/p&gt;
&lt;p&gt;Onto design two! (Well actually my first design...) Lots of JavaScript
objects! The entire protocol is implemented as a set of JavaScript
objects and the handlers directly touch and modify the account's data
(of course there's methods for abstraction, etc.). This means that an
extension has absolutely FULL access to every about an account...this
also means an extension could seriously mess with and cause the protocol
to stop working or do really crazy things, etc. Unfortunately there
isn't really a way to avoid that. Hopefully people write good code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="messages"&gt;
&lt;h2&gt;Messages&lt;/h2&gt;
&lt;p&gt;I'm going to go into an aside about messages right now, even though it
doesn't quite seem relevent yet. It will. IRC has a bunch of
sub-protocols embedded within the IRC protocol (see the link above about
unofficial extensions). We attempt to parse all the string messages and
make pretty JavaScript objects out of them. I've actually identified
five (yes, count that: five) different sub-&amp;quot;protocols&amp;quot; within IRC that
we deal:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;IRC itself (i.e. &lt;a class="reference external" href="http://tools.ietf.org/html/rfc1459"&gt;RFC 1459&lt;/a&gt; / &lt;a class="reference external" href="http://tools.ietf.org/html/rfc2812"&gt;RFC 2812&lt;/a&gt; / various numeric
extensions)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.irchelp.org/irchelp/rfc/ctcpspec.html"&gt;CTCP (the Client-to-Client Protocol)&lt;/a&gt;,embedded in PRIVMSG commands
of IRC&lt;/li&gt;
&lt;li&gt;DCC (Direct Client-to-Client), a subprotocol of CTCP&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://tools.ietf.org/html/draft-brocklesby-irc-isupport-03"&gt;ISUPPORT&lt;/a&gt; (also known as Numeric 005), a method of negotiating
capabilities between a client and server&lt;/li&gt;
&lt;li&gt;And finally, handling of IRC Services (there's a lot of them and no
specification, but we treat them specially)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Briefly what happens when we receive a raw message over the wire, we
create an &lt;a class="reference external" href="http://hg.instantbird.org/instantbird/file/b8d8b6e60aef/chat/protocols/irc/irc.js#l14"&gt;ircMessage object out of it using a variety of regular
expressions&lt;/a&gt;. This object has a variety of fields (see the link for
details), including the command, who sent the message and the
parameters.&lt;/p&gt;
&lt;p&gt;If the message is identified as a CTCP message, we then morph the
ircMessage into a &lt;a class="reference external" href="http://hg.instantbird.org/instantbird/file/b8d8b6e60aef/chat/protocols/irc/ircCTCP.jsm#l44"&gt;CTCPMessage&lt;/a&gt;, which can be morphed into a
&lt;a class="reference external" href="http://hg.instantbird.org/instantbird/file/b8d8b6e60aef/chat/protocols/irc/ircDCC.jsm#l20"&gt;DCCMessage&lt;/a&gt;. Additionally, a 005 reply can be parsed into a
&lt;a class="reference external" href="http://hg.instantbird.org/instantbird/file/b8d8b6e60aef/chat/protocols/irc/ircISUPPORT.jsm#l22"&gt;isupportMessage&lt;/a&gt;. And last, but not least, a received PRIVMSG can also
be parsed into a &lt;a class="reference external" href="http://hg.instantbird.org/instantbird/file/b8d8b6e60aef/chat/protocols/irc/ircServices.jsm#l19"&gt;ServiceMessage&lt;/a&gt;. Each of these extends the IRC
message without destroying information. (Yes, I'm realizing now that my
choice of whether to use capitals is all messed up...)&lt;/p&gt;
&lt;p&gt;Well, why do we care...? By preparsing the strings into objects (as
defined by any &amp;quot;specifications&amp;quot; that exist), we keep extensions from
having to parse messages over and over again from strings.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="handlers"&gt;
&lt;h2&gt;Handlers&lt;/h2&gt;
&lt;p&gt;A handler is simply what I call the object that contains the methods
to deal with an incoming message. Pretty much, you get to say &amp;quot;Only send
me ISUPPORT messages!&amp;quot; or &amp;quot;Only send me CTCP messages!&amp;quot; and voila, you
only get that type of message. Each message type has a field that is
used to choose the method to run (for the IRC messages, the &amp;quot;command&amp;quot;,
for CTCP the &amp;quot;CTCP command&amp;quot;, ISUPPORT the &amp;quot;parameter&amp;quot;, etc.) This sounds
a lot more complicated than it is, I think a brief &lt;a class="reference external" href="https://bitbucket.org/clokep/irc-extras/src/6f778f17172a/example/bootstrap.js"&gt;example&lt;/a&gt; is in
order:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;ircSimpleExample&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// The name here is really only used in error messages.&lt;/span&gt;
  &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;IRC Simple Example&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="c1"&gt;// Slightly above the default priority so we run before the main IRC handler.&lt;/span&gt;
  &lt;span class="nx"&gt;priority&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ircHandlers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DEFAULT_PRIORITY&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="c1"&gt;// Run this for all accounts (note that the &amp;#39;this&amp;#39; object in this method is&lt;/span&gt;
  &lt;span class="c1"&gt;// the JavaScript account object.&lt;/span&gt;
  &lt;span class="nx"&gt;isEnabled&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

  &lt;span class="c1"&gt;// The commands we want to handle. For each of these, the account object is&lt;/span&gt;
  &lt;span class="c1"&gt;// bound to &amp;#39;this&amp;#39; and the single parameter is of the type that you&amp;#39;ve&lt;/span&gt;
  &lt;span class="c1"&gt;// registered your handle.&lt;/span&gt;
  &lt;span class="nx"&gt;commands&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;001&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aMessage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// At the 001 response we&amp;#39;ve successfully connected to the server.&lt;/span&gt;
      &lt;span class="c1"&gt;// Send an IDENTIFY command to NickServ.&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;PRIVMSG&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;NickServ&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;IDENTIFY &amp;lt;your password&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

      &lt;span class="c1"&gt;// Return false so the default handler still runs.&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Just like that we've designed a handler! Whenever the 001 method is
received from the server, this function will run and attempt to identify
with the NickServ (of course this could use a bit more security on it,
but it's to demonstrate the possibilities). (The sendMessage function
takes the command to send and an array of parameters to send.)&lt;/p&gt;
&lt;p&gt;As this is already a long post, I think I'll cut this off now and
continue this at another time, but I hope I'm beginning to convince you
that allowing directy access to the account and protocol implementation
is a more powerful (and even simpler in many ways, in my opinion)
alternative to &amp;quot;auto-performs&amp;quot;. The one major downside I see to this, is
that it requires a bit more understanding of the actual protocol level
implementation, I don't feel that knowing you need to use &amp;quot;PRIVMSG&amp;quot; as a
command instead of /msg is a huge issue, however.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Instantbird"></category><category term="IRC"></category><category term="Mozilla"></category></entry><entry><title>Shared Lightning profile across Linux and Windows</title><link href="https://clokep.github.io/shared-lightning-profile-across-linux-and-windows.html" rel="alternate"></link><updated>2011-07-08T00:46:00-04:00</updated><author><name>Patrick Cloke</name></author><id>tag:https://clokep.github.io,2011-07-08:shared-lightning-profile-across-linux-and-windows.html</id><summary type="html">&lt;p&gt;In &lt;a class="reference external" href="irc://irc.mozilla.org/calendar"&gt;#calendar on Mozilla IRC&lt;/a&gt; the past few days a user has been
asking about using a shared profile on Thunderbird between Linux and
Windows (&amp;quot;shared&amp;quot; meaning a dual boot system of Linux/Windows, but not
at the same time, obviously).&amp;nbsp; Generally this isn't a big deal UNLESS
you have a binary extension, in which case you'd have to reinstall the
extension every time! That's awfully lame.&lt;/p&gt;
&lt;p&gt;BUT there should be a way to make a unified extension for all
operating systems.&amp;nbsp; In fact &lt;a class="reference external" href="https://wiki.mozilla.org/User:Ssitter/UnifiedLightning"&gt;ssitter had written an article to do
that&lt;/a&gt;.&amp;nbsp; It needs some updating to account for the Mozilla 2 XPCOM
changes, however.&lt;/p&gt;
&lt;p&gt;The steps are mostly the same, with some added.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Download whatever versions you want (&lt;a class="reference external" href="http://releases.mozilla.org/pub/mozilla.org/calendar/lightning/releases/1.0b4/"&gt;perhaps 1.0b4&lt;/a&gt;?).&lt;/li&gt;
&lt;li&gt;Unzip them all and choose which one will be your &amp;quot;unified&amp;quot; version.&lt;/li&gt;
&lt;li&gt;Find the &amp;lt;em:targetPlatform&amp;gt; section in the install.rdfs and include
all the necessary ones.&lt;/li&gt;
&lt;li&gt;Find the libcalbasecomps.* (where * is dll, dylib, so, etc. for
your platform) inside the components directories.&lt;/li&gt;
&lt;li&gt;Copy the libraries together into one directory.&lt;/li&gt;
&lt;li&gt;Copy the lines from each components.manifest together into one
manifest.&lt;/li&gt;
&lt;li&gt;For some systems you'll need to specify the ABI (and possibly change
the path), note that the ABI is just what was inside the
&amp;lt;em:targetPlatform&amp;gt;.&lt;/li&gt;
&lt;li&gt;Rezip this up into an XPI and you should be good to go!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In my test I ended up with an XPI that was approximately 10% bigger
after combining Mac (x86 and x64), Linux (x86 and x64), Win32, Solaris
Sparc and Solaris x86.&amp;nbsp; Why is this not done by default?&amp;nbsp; Probably just
cause no one has done it...there is a &lt;a class="reference external" href="https://bugzilla.mozilla.org/show_bug.cgi?id=352543"&gt;bug about it&lt;/a&gt; though.&amp;nbsp; One issue
that might be encountered using this method is pre-processing of some
script files (as is discussed in that big) but hopefully it should
&amp;quot;mostly&amp;quot; work.&amp;nbsp; (Note that this is mostly untested.)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; I should also mention that you would need to do something
similar with the themes folders if they differ dramatically (it seems
there's &lt;a class="reference external" href="http://mxr.mozilla.org/comm-central/source/calendar/lightning/themes/"&gt;just two&lt;/a&gt;: winstripe and pinstripe: i.e. Windows &amp;amp; Mac; Linux
and Solaris most likely also use winstripe).&lt;/p&gt;
</summary><category term="Lightning"></category><category term="Mozilla"></category></entry><entry><title>Compiling Instantbird</title><link href="https://clokep.github.io/compiling-instantbird.html" rel="alternate"></link><updated>2011-05-17T01:30:00-04:00</updated><author><name>Patrick Cloke</name></author><id>tag:https://clokep.github.io,2011-05-17:compiling-instantbird.html</id><summary type="html">&lt;p&gt;In the past I've tried to compile a few different programs that use
the Mozilla toolkit to various levels of success.&amp;nbsp; I've tried to compile
Thunderbird, Songbird and Instantbird at various points.&amp;nbsp; I got
Thunderbird to compile, but it only worked sporadically (although I
think that was Firefox moving so fast that Thunderbird couldn't keep
up), Songbird I gave up on rather quickly and Instantbird I've tried a
few times.&lt;/p&gt;
&lt;p&gt;Last summer I had Instantbird compiling on my old laptop (a Lenovo
T60), which is &amp;gt;5 years old at this point and has had the heatsink / fan
replaced twice -- a known issue with that model laptop.&amp;nbsp; Needless to
say, that laptop didn't like compiling something on Windows that took
approximately an hour with a large number of reads and writes to the
hard drive.&amp;nbsp; This mixed with it being an old dual core + a 5400 RPM
meant I'd be waiting a LONG time for my code to compile.&amp;nbsp; I got a
Thinkpad X201 this past summer, so I finally got around to setting up a
development environment on it and was able to get Instantbird to compile
fully today.&amp;nbsp; I've outlined the steps I've followed: kind of to mirror
the &lt;a class="reference external" href="https://developer.mozilla.org/En/Simple_Thunderbird_build"&gt;Simple Thunderbird Build&lt;/a&gt; page on MDC.&lt;/p&gt;
&lt;p&gt;I've done this using Microsoft Windows 7 Professional (64-bit) with
Service Pack 1. (4.00 GB of RAM, Intel Core i7 M620 2.67 GHz).
Throughout these steps, the defaults locations and options are used in
the installers.&lt;/p&gt;
&lt;div class="section" id="build-requirements"&gt;
&lt;h2&gt;Build Requirements:&lt;/h2&gt;
&lt;div class="section" id="visual-studio-express"&gt;
&lt;h3&gt;Visual Studio Express:&lt;/h3&gt;
&lt;p&gt;We need to install Visual Studio Express, specifically VC8 (2005) with
Service Pack 1.&amp;nbsp; (Mozilla compiles with VC9 and VC10 to various degrees,
but it seems libpurple only compiles with VC8, also this is what's on
the Instantbird buildbot, so I like having the same version.)&amp;nbsp; I
couldn't find this on Microsoft's website but I found it on &lt;a class="reference external" href="http://www.softpedia.com/get/Programming/Other-Programming-Files/Microsoft-Visual-C-Toolkit.shtml"&gt;Softpedia&lt;/a&gt;
(which is a legitimate site).&amp;nbsp; Anyway, download the installer and
install it (which will download the actual compiler from Microsoft),
ensure that you also install the IDE (which is checked by default).&lt;/p&gt;
&lt;p&gt;This will only install VC8, the initial release.&amp;nbsp; We also need to
install &lt;a class="reference external" href="http://www.microsoft.com/downloads/en/details.aspx?FamilyID=7b0b0339-613a-46e6-ab4d-080d4d4a8c4e"&gt;Service Pack 1&lt;/a&gt;.&amp;nbsp; I personally did this using Windows Update,
but one of the installers from there should also work.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="microsoft-windows-sdk"&gt;
&lt;h3&gt;Microsoft Windows SDK:&lt;/h3&gt;
&lt;p&gt;Specifically we need the &lt;a class="reference external" href="http://www.microsoft.com/downloads/en/details.aspx?FamilyID=c17ba869-9671-4330-a63e-1fd44e0e2505&amp;amp;displaylang=en"&gt;Windows 7 SDK&lt;/a&gt; (for Jumplist, Aero, etc.
support).&amp;nbsp; Download and install the SDK, this one took a while for me to
install.&amp;nbsp; I ate dinner while it was installing (pasta, if you're curious
-- I already had sauce made).&lt;/p&gt;
&lt;p&gt;There's a linker error when using VC8 and the Windows 7 SDK, so we'll
need to install a &lt;a class="reference external" href="http://support.microsoft.com/kb/949009/"&gt;hotfix&lt;/a&gt;for that (I tried without it and I ran into
the issue).&amp;nbsp; I had to download the &amp;quot;VS80sp1-KB949009-IA64-INTL.exe&amp;quot;
version (there's also an X86 and an X64 version).&amp;nbsp; Choose the one that
works.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="microsoft-macro-assembler"&gt;
&lt;h3&gt;Microsoft Macro Assembler:&lt;/h3&gt;
&lt;p&gt;In order to properly assemble the code we need to &lt;a class="reference external" href="http://www.microsoft.com/downloads/en/details.aspx?familyid=7A1C9DA0-0510-44A2-B042-7EF370530C64&amp;amp;displaylang=en"&gt;install MASM&lt;/a&gt;
(which I think will eventually be included in MozillaBuild, but it isn't
currently).&amp;nbsp; Again, just install it with the defaults.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="mozillabuild"&gt;
&lt;h3&gt;MozillaBuild:&lt;/h3&gt;
&lt;p&gt;Almost there, I promise.&amp;nbsp; In order to get a *nix type shell to run
make, etc. in we'll use a package from Mozilla that includes MSYS, make,
Mercurial, etc.&amp;nbsp; Download and &lt;a class="reference external" href="http://ftp.mozilla.org/pub/mozilla.org/mozilla/libraries/win32/MozillaBuildSetup-Latest.exe"&gt;install MozillaBuild&lt;/a&gt;, the latest should
work fine.&lt;/p&gt;
&lt;p&gt;Now, an unknown step: you might require the &lt;a class="reference external" href="http://www.microsoft.com/downloads/en/details.aspx?FamilyID=a5c84275-3b97-4ab7-a40d-3802b2af5fc2&amp;amp;displaylang=en"&gt;Microsoft Visual C++ 2008
SP1 Redistributable Package&lt;/a&gt;.&amp;nbsp; I don't know if you need this or not
since I &lt;em&gt;already&lt;/em&gt; had it, most likely from a previous program I've
installed.&lt;/p&gt;
&lt;p&gt;We should be ready to build now pretty much.&amp;nbsp; For some more
information for this stuff you can check out the Mozilla Developer
Network pages I used to get this information: &lt;a class="reference external" href="https://developer.mozilla.org/En/Developer_Guide/Build_Instructions"&gt;Build Instructions&lt;/a&gt;,
&lt;a class="reference external" href="https://developer.mozilla.org/En/Developer_Guide/Build_Instructions/Windows_Prerequisites"&gt;Windows Build Prerequisites&lt;/a&gt; and &lt;a class="reference external" href="https://developer.mozilla.org/cn/VC8_Build_Instructions"&gt;MSVC8 Build Instructions&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="checkout-the-code"&gt;
&lt;h2&gt;Checkout the Code:&lt;/h2&gt;
&lt;p&gt;We need to checkout the code.&amp;nbsp; I originally checked out the code with
TortoiseHg (which is what I normally use), but the version of Mercurial
included is significantly greater than the one included in MozillaBuild
and this caused me issues later on.&amp;nbsp; Thus, we'll check out the code on
the command line.&amp;nbsp; Start by launching the bash shell, which is at
C:\mozilla-build\start-msvc8.bat (don't use the x64 version).&amp;nbsp; There's
a version here which corresponds to each version of VS.&lt;/p&gt;
&lt;p&gt;Once this finishes loading you'll be in the home directory (which is
in the root of your user's documents and settings folder, i.e. for me:
C:\Users\clokep).&amp;nbsp; You'll want to do the following:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
hg clone https://hg.instantbird.org/instantbird
&lt;/pre&gt;
&lt;p&gt;This might take a few minutes depending on how good your internet
connection is.&amp;nbsp; (The Instantbird source isn't THAT big though, it
shouldn't take too long.)&lt;/p&gt;
&lt;p&gt;Then we'll need to change into the instantbird directory that was just
created and download the Mozilla source code:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
cd instantbird
python client.py checkout
&lt;/pre&gt;
&lt;p&gt;Now this step?&amp;nbsp; This one is gonna take a while.&amp;nbsp; It took me like a
couple of hours.&amp;nbsp; It pulls the Mozilla source code, which is large and
has many changesets.&amp;nbsp; Just let it go, it'll give you progress
occasionally (changes, manifests, files, etc.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;Compiling Instantbird:&lt;/h2&gt;
&lt;p&gt;We need to set up the options we want to build with.&amp;nbsp; These are
read from a .mozconfig (don't miss the &amp;quot;.&amp;quot; in the front!).&amp;nbsp; The contents
of the .mozconfig that worked for me are:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
ac_add_options --enable-application=instantbird
mk_add_options MOZ_OBJDIR=&amp;#64;TOPSRCDIR&amp;#64;/objdir-ib-release
ac_add_options --disable-accessibility
&lt;/pre&gt;
&lt;p&gt;The first option says to build Instantbird, the second gives an output
directory and the third &lt;a class="reference external" href="https://developer.mozilla.org/en/atlbase.h"&gt;disables accessibility&lt;/a&gt; (not really sure why
we need to do this, but we'll get that error at that link otherwise).&lt;/p&gt;
&lt;p&gt;Finally (back in the bash shell) type:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
make -f client.mk build
&lt;/pre&gt;
&lt;p&gt;Now sit back and relax.&amp;nbsp; My build took about an hour to finish, maybe
a bit less -- I wasn't fully paying attention.&amp;nbsp; Once it's done you
should see something like:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Processed 1 file, writing output:

Output:
&amp;quot;c:\\Users\\clokep\\instantbird\\objdir-ib-release\\instantbird\\installer\\windows\\instgen\\helper.exe&amp;quot;
Install: 2 pages (128 bytes), 1 section (16416 bytes), 2579
instructions (72212 bytes), 369 strings (10198 bytes), 1 language table (230 bytes).
Uninstall: 5 pages (320 bytes),
1 section (16416 bytes), 2063 instructions (57764 bytes), 388 strings
(10828 bytes), 1 language table (314 bytes).
Datablock optimizer saved 123940 bytes (~17.6%).
Using zlib compression.
EXE header size:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 63488 / 39424 bytes
Install code:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 99564 / 99560 bytes
Install data:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 118002 / 241950 bytes
Uninstall code+data:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 398654 / 398646 bytes
CRC (0x062AF3F5):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 4 / 4 bytes
Total size:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 679712 / 779584 bytes (87.1%)
c:/Users/clokep/instantbird/objdir-ib-release/mozilla/config/nsinstall.exe -D ../../../mozilla/dist/bin/uninstall
cp instgen/helper.exe ../../../mozilla/dist/bin/uninstall
make[5]: Leaving directory `/c/Users/clokep/instantbird/objdir-ib-release/instantbird/installer/windows'
make[4]: Leaving directory `/c/Users/clokep/instantbird/objdir-ib-release/instantbird'
make[3]: Leaving directory `/c/Users/clokep/instantbird/objdir-ib-release'
make[2]: Leaving directory `/c/Users/clokep/instantbird/objdir-ib-release'
make[1]: Leaving directory `/c/Users/clokep/instantbird/objdir-ib-release'
&lt;/pre&gt;
&lt;p&gt;Now, to test that the build actually worked we can browse to the
compiled executable and run it:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
cd objdir-ib-release/mozilla/dist/bin/instantbird.exe -P dev -no-remote
&lt;/pre&gt;
&lt;p&gt;The -P option specifies a profile name (dev), the second option
(-no-remote) allows you to run a second Instantbird instance (since I
assume you use Instantbird to IM...you probably want to be able to run a
second one, if you don't use it...shame on you. Try not to close the
wrong Instantbird when you're working on stuff).&lt;/p&gt;
&lt;p&gt;Hopefully this will help someone else get started on hacking
Instantbird.&amp;nbsp; There's other good ways you can hack too if your computer
can't handle compiling, including unpacking omni.jar.&lt;/p&gt;
&lt;p&gt;One last tidbit is to possibly add the option to your .mozconfig:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
--enable-chrome-format=flat
&lt;/pre&gt;
&lt;p&gt;This will not package anything in JARs (which pretty much just get in
the way while developing).&amp;nbsp; See&amp;nbsp;&lt;a class="reference external" href="https://developer.mozilla.org/en/JAR_Packaging"&gt;here&lt;/a&gt; for more info.&lt;/p&gt;
&lt;p&gt;Edit: Fixed the path to the executable thanks to Florian. And fixed a
spelling error in the title.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Instantbird"></category><category term="Mozilla"></category><category term="programming"></category></entry><entry><title>Status Update - January 18, 2011</title><link href="https://clokep.github.io/status-update-january-18-2011.html" rel="alternate"></link><updated>2011-01-19T03:17:00-05:00</updated><author><name>Patrick Cloke</name></author><id>tag:https://clokep.github.io,2011-01-19:status-update-january-18-2011.html</id><summary type="html">&lt;p&gt;I haven't had an update in a few weeks (since early December)
actually, so I thought I would post a bit about what I've worked on.
I've fixed a bunch of bugs in the backend of Instantbird that allow work
on JavaScript IRC protocol to continue:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=519"&gt;Bug 519&lt;/a&gt; - Extend jsProtoHelper to implement purpleIConvChat
(&lt;a class="reference external" href="http://hg.instantbird.org/instantbird/rev/0166084ce2ae"&gt;check-in&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=495"&gt;Bug 495&lt;/a&gt; - purpleIAccount cannot access preferences via JavaScript
protocol (&lt;a class="reference external" href="http://hg.instantbird.org/instantbird/rev/a188a5cc3ff1"&gt;check-in&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=648"&gt;Bug 648&lt;/a&gt; -Provide a default JS implementation of
purpleIChatRoomField
(&lt;a class="reference external" href="http://hg.instantbird.org/instantbird/rev/61fc80a569d3"&gt;check-in&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;[Reviewed] &lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=647"&gt;Bug 647&lt;/a&gt; - Username split for JavaScript protocols
(&lt;a class="reference external" href="http://hg.instantbird.org/instantbird/rev/a6c8fbf77e10"&gt;check-in&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;[Reviewed] &amp;lt;no bug&amp;gt; -Share the nsIClassInfo implementation between
all the objects implemented in jsProtoHelper
(&lt;a class="reference external" href="http://hg.instantbird.org/instantbird/rev/035f7d8d7f78"&gt;check-in&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Also a few other random bugs I've worked on:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=625"&gt;Bug 625&lt;/a&gt; - Findbar broken on Windows in Conversation window
(&lt;a class="reference external" href="http://hg.instantbird.org/instantbird/rev/2e8af77af2f2"&gt;check-in&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=629"&gt;Bug 629&lt;/a&gt; - Remove workaround for bug 503048
(&lt;a class="reference external" href="http://hg.instantbird.org/instantbird/rev/ba4b9401791b"&gt;check-in&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=473"&gt;Bug 473&lt;/a&gt; - JS Logger line breaks don't play well on Windows
&lt;a class="reference external" href="http://hg.instantbird.org/instantbird/rev/6a600b8a32c9"&gt;(check-in&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=593"&gt;Bug 593&lt;/a&gt; - JavaScript component does not have a method named:
&amp;quot;onBeforeLinkTraversal&amp;quot;
(&lt;a class="reference external" href="http://hg.instantbird.org/instantbird/rev/1b75f9fa4859"&gt;check-in&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Although none of these are really things that weren't working a few
weeks ago, there are now real APIs for these for JavaScript protocols,
allowing other protocols to use them and to &lt;em&gt;FULLY&lt;/em&gt; implement them
instead of hard coding values.&amp;nbsp; In addition, a lot of the purplexpcom
layer is now hidden from JavaScript protocols.&lt;/p&gt;
&lt;p&gt;There's a few things left to do for the JavaScript protocol layer:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=118"&gt;Bug 118&lt;/a&gt; - Extensions should be able to register commands.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=650"&gt;Bug 650&lt;/a&gt; - JavaScript accounts must be notified of status changes
(a sketchy patch that exists that will work, but a better patch to
core should be done)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=623"&gt;Bug 623&lt;/a&gt; - Auto-Join option field is hard coded for certain
protocols (not &lt;em&gt;really&lt;/em&gt; necessary, since it's still IRC, but it
should be fixed)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=649"&gt;Bug 649&lt;/a&gt; - Proxy should be available to JavaScript protocols
(hopefully being handled by Florian)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A good summary of this is &lt;a class="reference external" href="https://bugzilla.instantbird.org/showdependencygraph.cgi?id=507&amp;amp;display=web&amp;amp;rankdir=LR"&gt;the dependency graph of bug 507&lt;/a&gt;
(Implement IRC in JavaScript).&amp;nbsp; Note that the IRC JavaScript work blocks
&lt;em&gt;a&amp;nbsp; lot&lt;/em&gt; of UI work done for IRC.&amp;nbsp; In particular Mook has been working
on implementing notifications (i.e. Invites, and perhaps a few other
commands), see &lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=628"&gt;Bug 628&lt;/a&gt;.&amp;nbsp; For other bugs, see the link above -- and if
there's a strange UI feature that you think should be added, please file
a bug and let us know about it!&lt;/p&gt;
&lt;p&gt;I've also worked a bit on sending outgoing text with rich formatting
(bold, italics, underline, text size, etc.), this work is being tracked
in &lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=634"&gt;Bug 634&lt;/a&gt;. There's a proof on concept, but a lot of work needs to be
done for it, but it's sort of working right now.&lt;/p&gt;
&lt;p&gt;As I alluded to in my last blog post, the JavaScript protocols would
be used to implement Twitter. Work for this is occurring in &lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=598"&gt;Bug 598&lt;/a&gt;,
where Florian has implemented (very) basic Twitter support.&lt;/p&gt;
&lt;p&gt;My plans for the next bit:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;I'm hoping to finish up some of the work blocking JavaScript
protocols so IRC can be put into a state that needs alpha/beta
testers (if you're interested in testing/hacking please drop me a
line here, on IRC or via email).&lt;/li&gt;
&lt;li&gt;Move into my new apartment&lt;/li&gt;
&lt;li&gt;Start my new job&lt;/li&gt;
&lt;li&gt;Work on richtext messages a bit more&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="Instantbird"></category><category term="IRC"></category><category term="Mozilla"></category><category term="programming"></category></entry><entry><title>Why Rewrite IRC into JavaScript? (vs. libpurple's vs. ChatZilla's)</title><link href="https://clokep.github.io/why-rewrite-irc-into-javascript-vs-libpurples-vs-chatzillas.html" rel="alternate"></link><updated>2010-12-08T18:29:00-05:00</updated><author><name>Patrick Cloke</name></author><id>tag:https://clokep.github.io,2010-12-08:why-rewrite-irc-into-javascript-vs-libpurples-vs-chatzillas.html</id><summary type="html">&lt;p&gt;I had a request on IRC (from Mic) to write an in-depth blog post
about &lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=507"&gt;IRC in JavaScript&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;Maybe we could ask clokep if he'd like to write something about
js-irc? Why it is done, what the advantages are once it's done, how
he is working on it (going through the specs), putting the
jsProtocol code to test and adding missing pieces?&amp;quot; -- &lt;a class="reference external" href="http://log.bezut.info/instantbird/101208/#m54"&gt;Mic&lt;/a&gt;&lt;/blockquote&gt;
&lt;div class="section" id="wait-a-second-what-is-irc"&gt;
&lt;h2&gt;Wait a second, what is IRC?&lt;/h2&gt;
&lt;p&gt;I guess this is a good first question, I'll steal from &lt;a class="reference external" href="http://en.wikipedia.org/wiki/IRC"&gt;Wikipedia&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
Internet Relay Chat (IRC) is a form of real-time [...] chat [...] It
is mainly designed for group communication [...] but also allows
[...for...] private message as well as chat and data transfers.&lt;/blockquote&gt;
&lt;p&gt;Awesome, what's that really mean?&amp;nbsp; It's an instant messaging protocol
with an actual specification (i.e. it's not owned by some large, unnamed
company), with open-source libraries for clients and servers.&amp;nbsp; It's
usually used by more computer-oriented types of people and centers
around group conversation.&amp;nbsp; Personally most of what I use it for is
open-source software I use (I'm almost always in &lt;a class="reference external" href="irc://irc.mozilla.org/#instantbird"&gt;#instantbird&lt;/a&gt;,
&lt;a class="reference external" href="irc://irc.mozilla.org/#maildev"&gt;#maildev&lt;/a&gt;, and &lt;a class="reference external" href="irc://irc.mozilla.org/#songbird"&gt;#songbird&lt;/a&gt; on &lt;a class="reference external" href="http://irc.mozilla.org/"&gt;Mozilla's IRC servers&lt;/a&gt;.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="why-it-is-done-what-advantages-are-there-once-this-is-done"&gt;
&lt;h2&gt;Why it is done?&amp;nbsp; What advantages are there once this is done?&lt;/h2&gt;
&lt;p&gt;I touched upon this a little in my &lt;a class="reference external" href="https://clokep.github.io/javascript-irc-in-instantbird.html"&gt;last post&lt;/a&gt;.&amp;nbsp; In terms of
Instantbird: there's an idea of switching some / all of the protocols
(eventually) to be JavaScript protocols instead of the libpurple
versions (libpurple is written mostly in C and is cross-platform, but
recent gains in speed in JavaScript allow this advantage of libpurple to
not matter as much).&amp;nbsp; This would unfortunately mean we need to maintain
a lot more code, but it would allow us to integrate protocols in any way
that we see fit, instead of only using APIs / methods provided by
libpurple.&amp;nbsp; Hopefully this would allow us to &lt;a class="reference external" href="https://bugzilla.instantbird.org/showdependencytree.cgi?id=507&amp;amp;maxdepth=2&amp;amp;hide_resolved=1"&gt;enhance our IRC
implementation&lt;/a&gt; a bit.&lt;/p&gt;
&lt;p&gt;Also, Instantbird (nightlies) currently have limited support for
generating a protocol plug-in in JavaScript.&amp;nbsp; A couple of &amp;quot;test&amp;quot;
protocols have be done, but nothing in &amp;quot;real&amp;quot; (in particular, none that
used a multi-user chat).&amp;nbsp; This would allow us to iron out &lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=519"&gt;some&lt;/a&gt;
&lt;a class="reference external" href="https://bugzilla.instantbird.org/show_bug.cgi?id=118"&gt;bugs&lt;/a&gt; in the implementation of JavaScript protocols.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;[Edit: Florian suggested another question that wasn't originally
covered, which some people more familiar with Mozilla code might be
wondering.]&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="why-aren-t-you-using-the-code-from-chatzilla"&gt;
&lt;h2&gt;Why aren't you using the code from ChatZilla?&lt;/h2&gt;
&lt;p&gt;This was a tough one.&amp;nbsp; Honestly when I first wanted a parsing
algorithm, I looked at the ChatZilla code, I used it.&amp;nbsp; Then rewrote it
in a fourth as many lines (&lt;a class="reference external" href="http://hg.mozilla.org/chatzilla/file/tip/js/lib/irc.js#l1250"&gt;93&lt;/a&gt; vs. &lt;a class="reference external" href="https://hg.instantbird.org/experiments/file/IRC-JavaScript/components/ircProtocol.js#l208"&gt;20&lt;/a&gt;).&amp;nbsp; Simply said, the code in
ChatZilla is &lt;em&gt;old&lt;/em&gt;, it doesn't use many of the features available only
in newer versions of JavaScript.&amp;nbsp; To that point, the ChatZilla code
hasn't been updated in over a year!&amp;nbsp; The last check-in was: 2009-10-03,
below is a &lt;a class="reference external" href="http://hg.mozilla.org/chatzilla/log/tip/js/lib/irc.js"&gt;quick summary&lt;/a&gt; of the number of check-ins per year:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;2010: 0&lt;/li&gt;
&lt;li&gt;2009: 5&lt;/li&gt;
&lt;li&gt;2008: 15&lt;/li&gt;
&lt;li&gt;2007: 11&lt;/li&gt;
&lt;li&gt;2006: 18&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There's been a pretty steady decline in check-ins.&amp;nbsp; I could take this
code and attempt to whip it into shape and make huge sweeping changes
and commit them back to ChatZilla, but honestly it was easier to start
over for me.&amp;nbsp; Regardless of ease, I'm not sure it would work any:
especially since the ChatZilla code seems overly complicated and overly
specific (since it wasn't really built as a library as far as I can
see), especially since all the code is meant to deal only with IRC.&amp;nbsp; The
Instantbird code needs to be protocol agnostic to a degree, while is why
it interfaces to purplexpcom.&lt;/p&gt;
&lt;p&gt;A quick example of this is: ChatZilla uses a CIRCUser object, but for
Instantbird I need to create either an imIContact or a
purpleIAccountBuddy (depending on the situation).&amp;nbsp; It's possible that's
can be abstracted and code shared -- but I'm not sure it would be worth
the effort.&amp;nbsp; After all this, I should probably look more into the
ChatZilla code, perhaps more of it could be used.&lt;/p&gt;
&lt;p&gt;(If someone familiar with the ChatZilla code base -- I don't know
who/if there's a maintainer -- is interested in talking with me, please
get in contact here or on #instantbird.&amp;nbsp; It's possible we could align
some of what I've been working on, but I'm not sure how much could be
shared besides the parsing algorithm).&lt;/p&gt;
&lt;p&gt;&lt;em&gt;[End edit]&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-are-the-specific-advantages-for-an-end-user"&gt;
&lt;h2&gt;What are the specific advantages for an end-user?&lt;/h2&gt;
&lt;p&gt;In terms of the IRC protocol itself, there shouldn't be any, my goal
is for it to be a drop in replacement for the libpurple implementation
with automatic account migration, etc. For end-users we can hopefully
solve &lt;a class="reference external" href="https://bugzilla.instantbird.org/showdependencytree.cgi?id=574&amp;amp;maxdepth=1&amp;amp;hide_resolved=1"&gt;a few annoying IRC UI issues&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-about-for-developers-anything-cool-there"&gt;
&lt;h2&gt;What about for developers?&amp;nbsp; Anything cool there?&lt;/h2&gt;
&lt;p&gt;Well, I'm hoping to be able to test this replacement via an extension
that replaces the libpurple IRC to dogfood it before eventual inclusion
in Instantbird.&amp;nbsp; I'm not sure if that counts as &amp;quot;cool.&amp;quot; though.&amp;nbsp; If
nothing else there will be an example of how to write a protocol in
JavaScript (using sockets).&amp;nbsp; So hopefully other people can make some
other cool protocols off of that example.&amp;nbsp; You might wonder what else we
have planned for JavaScript protocols; there are plans to make at least
a Twitter protocol.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-is-this-being-done"&gt;
&lt;h2&gt;How is this being done?&lt;/h2&gt;
&lt;p&gt;Well I said up above IRC has a specification, right?&amp;nbsp; Well, yes.
There's the &lt;a class="reference external" href="http://tools.ietf.org/html/rfc1459"&gt;original specification&lt;/a&gt;, this was superseded by &lt;a class="reference external" href="http://tools.ietf.org/html/rfc2810"&gt;four&lt;/a&gt;
&lt;a class="reference external" href="http://tools.ietf.org/html/rfc2811"&gt;different&lt;/a&gt; &lt;a class="reference external" href="http://tools.ietf.org/html/rfc2812"&gt;specification&lt;/a&gt; &lt;a class="reference external" href="http://tools.ietf.org/html/rfc2813"&gt;documents&lt;/a&gt;.&amp;nbsp; Of which we only really
care about one: &lt;a class="reference external" href="http://tools.ietf.org/html/rfc2812"&gt;the client protocol&lt;/a&gt;.&amp;nbsp; So we have this updated
specification (try reading it, it's rather painful), which is good.
It's relatively straightforward set of commands and responses/errors.
It's a bit more confusing than that though since there are a couple of
extensions, etc.&amp;nbsp; This is summarized below:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;[STRIKEOUT:RFC 1459]&lt;ul&gt;
&lt;li&gt;Extended with &lt;a class="reference external" href="http://www.irchelp.org/irchelp/rfc/dccspec.html"&gt;[STRIKEOUT:DCC specification (&amp;quot;direct client-to-client&amp;quot;)]&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Replaced with [STRIKEOUT:&lt;a class="reference external" href="http://www.irchelp.org/irchelp/rfc/dccspec.html"&gt;CTCP (&amp;quot;client-to-client protocol&amp;quot;)&lt;/a&gt;]&lt;ul&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.invlogic.com/irc/ctcp.html"&gt;Draft for a formalized CTCP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;(Apparently some people are working on a &lt;a class="reference external" href="http://www.dcc2.org/"&gt;DCC2&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Officially replaced with RFCs 2810, 2811, 2812, 2813&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A lot of this is being done by reading the specifications and finding
the proper responses, etc.&amp;nbsp; I've also used &lt;a class="reference external" href="http://www.wireshark.org/download.html"&gt;Wireshark&lt;/a&gt; a bit to see how
libpurple sends IRC commands (in particular, in what order it sends them
in).&amp;nbsp; A lot of my development is happening on live IRC servers, which
isn't really best practice, but I'm mostly sending commands by hand to
see the responses since a bunch of non-standard responses and extensions
have developed beyond the above.&amp;nbsp; I have been using &lt;a class="reference external" href="http://ircd.bircd.org/"&gt;beware irc&lt;/a&gt; to run
a daemon on my own machine, however.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="so-how-far-along-are-you"&gt;
&lt;h2&gt;So how far along are you?&lt;/h2&gt;
&lt;p&gt;I've started implementing RFC 2812 and have a variety of commands done
(the login sequence occurs automatically, the server connection is kept
alive, messages can be sent to a channel and are parsed when received, a
lot of the initial server information is displayed but unparsed).&amp;nbsp; But
there's a lot more to do!&amp;nbsp; As my last post outlined, I recently was able
to successfully get a chat to work in Instantbird from a silly bug I had
been having.&lt;/p&gt;
&lt;p&gt;It's rather slow going since I'll start to implement something from
the IRC side, and then realize the &lt;a class="reference external" href="http://hg.instantbird.org/instantbird/file/tip/purple/purplexpcom/src/jsProtoHelper.jsm"&gt;Instantbird layer&lt;/a&gt; (the jsProtocol
module) is missing a component I need.&amp;nbsp; One of the major parts of
working on this is extending the Instantbird layer to contain the proper
functions and objects needed to implement chats via JavaScript.&amp;nbsp; This is
usually the slowest going part of my code, since it involves interfacing
with Instantbird / &lt;a class="reference external" href="http://hg.instantbird.org/instantbird/file/tip/purple/purplexpcom/public/"&gt;purplexpcom&lt;/a&gt;.&amp;nbsp; Luckily Florian, the main developer
of Instantbird, has been a big help with this (as have other
participants of #instantbird -- in particular I know Mic helped track
down a few syntax type bugs).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-s-next"&gt;
&lt;h2&gt;What's next?&lt;/h2&gt;
&lt;p&gt;Now that have the basics of chat working, I need to start handling the
QUIT, PART and JOIN commands for when other users enter &amp;amp; leave chat
rooms.&amp;nbsp; Once these are complete it should be quite usable, although the
entire preference system still doesn't exist, including notifying the UI
of what options are available.&amp;nbsp; In addition, I need to look into doing
SSL sockets.&lt;/p&gt;
&lt;p&gt;Once the protocol plug-in is done, we plan to abstract sections of it
that will be useful for other protocols (in particular the socket
connection aspects).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="where-can-i-see-this-stuff"&gt;
&lt;h2&gt;Where can I see this stuff...?&lt;/h2&gt;
&lt;p&gt;My work is kept in the &amp;quot;&lt;a class="reference external" href="https://hg.instantbird.org/experiments/file/IRC-JavaScript/"&gt;experiments&lt;/a&gt;&amp;quot; repository on Instantbird's
&lt;a class="reference external" href="http://mercurial.selenic.com/"&gt;Mercurial&lt;/a&gt; repository.&amp;nbsp; There's also a variety of bugs open (they're
listed above, I'm not going to re-list them), although not a ton is
happening in them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-can-i-help"&gt;
&lt;h2&gt;How can I help?!&lt;/h2&gt;
&lt;p&gt;Well you can of course feel free to download the code and hack on it,
let me know (via IRC or any of the bugs most likely) if you have a patch
you'd like me to apply.&amp;nbsp; Or if you just found something that doesn't
work you can feel free to let me know, although I probably just haven't
gotten around to fixing it yet.&lt;/p&gt;
&lt;p&gt;Also, if you've ever found something annoying / broken in the IRC
implementation in Instantbird / libpurple please let us know (through
any of the above contact sources).&lt;/p&gt;
&lt;p&gt;Hopefully that's a bit of a better explanation of why we're spending
time to rewrite the IRC protocol implementation into JavaScript -- we
definitely think it's worth it and can lead to a bunch of new unique
protocol plug-ins for Instantbird.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Instantbird"></category><category term="IRC"></category><category term="Mozilla"></category><category term="programming"></category></entry><entry><title>JavaScript IRC in Instantbird</title><link href="https://clokep.github.io/javascript-irc-in-instantbird.html" rel="alternate"></link><updated>2010-12-04T21:24:00-05:00</updated><author><name>Patrick Cloke</name></author><id>tag:https://clokep.github.io,2010-12-04:javascript-irc-in-instantbird.html</id><summary type="html">&lt;p&gt;I've been working on rewriting the IRC plugin for &lt;a class="reference external" href="http://www.instantbird.com/"&gt;Instantbird&lt;/a&gt; since
the summer (sometime in August, I can't seem to find the exact date --
at least since Sept. 10th though).&lt;/p&gt;
&lt;p&gt;Since &lt;a class="reference external" href="http://developer.pidgin.im/wiki/WhatIsLibpurple"&gt;libpurple&lt;/a&gt; (used in Pidgin, Adium, etc.) provides the IRC
protocol that we currently use, why do this?&amp;nbsp; One reason is to iron out
(and find) some of the bugs left in implementing protocols in JavaScript
and part of it is so I can learn to code better.&amp;nbsp; Unfortunately during
this semester I was not able to get as much done as I had hoped and
almost everything that had been done was finished in August/September&lt;/p&gt;
&lt;p&gt;Some big milestones I've completed (with dates if I have them):&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Connected to server via sockets in JavaScript&lt;/li&gt;
&lt;li&gt;Generate a conversation that works as a raw connection to the server
(i.e. as if you had opened a telnet connection to the server)&lt;/li&gt;
&lt;li&gt;Parsing messages and automatic ponging when the server pings&lt;/li&gt;
&lt;li&gt;Joining a channel (2010/12/04, i.e. today!)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There had been a bunch of small bugs I had been having in getting this
to work: one error, (which I found quickly) one of the other developers
(&lt;a class="reference external" href="http://queze.net/"&gt;Florian&lt;/a&gt;) was able to help me out with, was that I was not initiating
a &lt;strong&gt;new&lt;/strong&gt; object.&amp;nbsp; And after learning a bit above observers I was able
to get the UI to respond.&amp;nbsp; I even threw in support for op/half-op/voice
After today's work I was able to generate the following screenshot:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://clokep.github.io/images/IRCworking2.png"&gt;&lt;img alt="IRCworking" src="https://clokep.github.io/images/IRCworking2.png" style="height: 297px;" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This build would be almost fully usable by those who do very little on
IRC (i.e. if you just want to go and chat, it'd work well), but there's
a lot more work to be done.&amp;nbsp; The code can be viewed in the &lt;a class="reference external" href="https://hg.instantbird.org/experiments/file/IRC-JavaScript/"&gt;Experiments
repository&lt;/a&gt;.&amp;nbsp; (Check it out, there's a 600+ line switch statement.)&lt;/p&gt;
</summary><category term="Instantbird"></category><category term="IRC"></category><category term="Mozilla"></category><category term="programming"></category></entry><entry><title>Yahoo &amp; Thunderbird Can Finally Play Nice?</title><link href="https://clokep.github.io/yahoo-thunderbird-can-finally-play-nice.html" rel="alternate"></link><updated>2010-11-23T03:03:00-05:00</updated><author><name>Patrick Cloke</name></author><id>tag:https://clokep.github.io,2010-11-23:yahoo-thunderbird-can-finally-play-nice.html</id><summary type="html">&lt;p&gt;For years I've been dealing with Yahoo's lack of support for any sort
of decent (free) POP3/IMAP/SMTP protocol support.&amp;nbsp; Why do I need this?
So I can check my &lt;a class="reference external" href="http://mail.yahoo.com/"&gt;Yahoo mail&lt;/a&gt; in &lt;a class="reference external" href="http://www.mozillamessaging.com/en-US/thunderbird/"&gt;Mozilla Thunderbird&lt;/a&gt; of course!&lt;/p&gt;
&lt;p&gt;At first I used &lt;a class="reference external" href="http://ypopsemail.com/"&gt;YPOPS!&lt;/a&gt;, a program that read the HTML pages provided
by the Yahoo webmail client and served the emails on a local POP
server.&amp;nbsp; Cool, right?&amp;nbsp; Except it always broke whenever Yahoo changed
their pages around.&lt;/p&gt;
&lt;p&gt;After a bit I moved onto using the &lt;a class="reference external" href="http://www.blogger.com/"&gt;WebMail extension&lt;/a&gt; for
Thunderbird.&amp;nbsp; It essentially works the same way, but runs in the
Thunderbird process as an extension instead of as a separate service.
It's a little complicated to set up and requires two extensions.&amp;nbsp; The
general WebMail extension and a Yahoo specific one (there's also ones
available for Hotmail, Gmail, Libero and AOL).&amp;nbsp; You might wonder why
this exists for some services that have always had POP/IMAP access
(Gmail)?&amp;nbsp; I was too, apparently some people cannot check those ports
because of firewall issues so this essentially allows them to check it
via port 80, over an HTTP connection.&lt;/p&gt;
&lt;p&gt;A few months ago I came across &lt;a class="reference external" href="http://www.emaildiscussions.com/showthread.php?t=59575"&gt;post&lt;/a&gt; describing how a &lt;a class="reference external" href="http://en.wikipedia.org/w/index.php?title=Yahoo%21_Mail&amp;amp;oldid=396914770#Free_IMAP_and_SMTPs_access"&gt;simple
(nonstandard) command&lt;/a&gt; could allow access to the Yahoo IMAP server, but
it required &lt;a class="reference external" href="http://www.crasseux.com/linux/"&gt;patching the Thunderbird source&lt;/a&gt; -- not an option for me
since I've been running nightlies of either Thunderbird 3.1 or 3.2/3.3
for a while now. (I mean sure, I could do it...but WebMail extension was
working fine.)&amp;nbsp; There was &lt;a class="reference external" href="http://groups.google.com/group/mozilla.dev.apps.thunderbird/browse_thread/thread/546356554c73f8ca"&gt;some discussion&lt;/a&gt; about it and a &lt;a class="reference external" href="https://bugzilla.mozilla.org/show_bug.cgi?id=493064"&gt;bug&lt;/a&gt; was
filed for Thunderbird.&lt;/p&gt;
&lt;p&gt;So how did this lead to free IMAP support?&amp;nbsp; I noticed in the &lt;a class="reference external" href="https://wiki.mozilla.org/Thunderbird/StatusMeetings/2010-11-16#Web_Update"&gt;Weekly
Status Meeting Notes (2010-11-16)&lt;/a&gt; for Thunderbird a mention of &lt;a class="reference external" href="http://trunk.mozillamessaging.com/en-US/thunderbird/features/email_providers.html"&gt;Free
Email Providers&lt;/a&gt; page.&amp;nbsp; Checking it out it said &amp;quot;Y! Mail is a free
email service provided by Yahoo! It offers webmail supported by targeted
advertising as well as IMAP access.&amp;quot;&amp;nbsp; Hmm...but I just said they don't
have support this for free! A quick Bing search brought up a &lt;a class="reference external" href="http://www.theanimail.com/imap_server_settings.html"&gt;page with
IMAP server settings&lt;/a&gt;.&amp;nbsp; I figured I'd check if they work, and sure
enough they did!&amp;nbsp; The settings are copied below:&lt;/p&gt;
&lt;blockquote&gt;
&lt;table class="docutils field-list" frame="void" rules="none"&gt;
&lt;col class="field-name" /&gt;
&lt;col class="field-body" /&gt;
&lt;tbody valign="top"&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;User name:&lt;/th&gt;&lt;td class="field-body"&gt;[STRIKEOUT:user&amp;#64;yahoo.com] user&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;IMAP server:&lt;/th&gt;&lt;td class="field-body"&gt;[STRIKEOUT:imap-ssl.mail.yahoo.com] imap.mail.yahoo.com&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;Port:&lt;/th&gt;&lt;td class="field-body"&gt;993&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;Password:&lt;/th&gt;&lt;td class="field-body"&gt;Cleartext/Normal&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;SSL:&lt;/th&gt;&lt;td class="field-body"&gt;yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;SMTP server:&lt;/th&gt;&lt;td class="field-body"&gt;smtp.mail.yahoo.com&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;Port:&lt;/th&gt;&lt;td class="field-body"&gt;465&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;Password:&lt;/th&gt;&lt;td class="field-body"&gt;Cleartext/Normal&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;SSL:&lt;/th&gt;&lt;td class="field-body"&gt;yes&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/blockquote&gt;
&lt;p&gt;Awesome!&amp;nbsp; Anyway, I replied with this info in the aforementioned bug
and &lt;a class="reference external" href="https://bugzilla.mozilla.org/attachment.cgi?id=492550&amp;amp;action=diff"&gt;a patch&lt;/a&gt; was quickly added by Mozilla's &lt;a class="reference external" href="http://www.bucksch.org/1/projects/mozilla/"&gt;Ben Bucksch&lt;/a&gt; to support
this in Thunderbird, hopefully it'll make it into the next version!&amp;nbsp; It
was also brought to my attention that imap-ssl.mail.yahoo.com provides
an SSL certificate that is valid for imap.mail.yahoo.com only, I'd
suggest using that former.&lt;/p&gt;
&lt;p&gt;Note that I'm currently suffering from &lt;a class="reference external" href="https://bugzilla.mozilla.org/show_bug.cgi?id=610264"&gt;another bug&lt;/a&gt; while using
Yahoo IMAP.&amp;nbsp; Everything works, there's just an annoying pop-up
occasionally about the error.&amp;nbsp; Hopefully it will be fixed soon.&lt;/p&gt;
</summary><category term="bugs"></category><category term="email"></category><category term="IMAP"></category><category term="Mozilla"></category><category term="POP3"></category><category term="programming"></category><category term="SMTP"></category><category term="Thunderbird"></category><category term="Yahoo"></category></entry></feed>